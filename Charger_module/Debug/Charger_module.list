
Charger_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d3c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f08  08004f08  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004f08  08004f08  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f08  08004f08  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000020  08004f30  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08004f30  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008519  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d4  00000000  00000000  00028561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00029f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2a6  00000000  00000000  0002af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093ca  00000000  00000000  000461c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af526  00000000  00000000  0004f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000feab6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe0  00000000  00000000  000feb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000020 	.word	0x20000020
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004de0 	.word	0x08004de0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000024 	.word	0x20000024
 8000100:	08004de0 	.word	0x08004de0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_f2uiz>:
 800021c:	219e      	movs	r1, #158	; 0x9e
 800021e:	b510      	push	{r4, lr}
 8000220:	05c9      	lsls	r1, r1, #23
 8000222:	1c04      	adds	r4, r0, #0
 8000224:	f001 fde2 	bl	8001dec <__aeabi_fcmpge>
 8000228:	2800      	cmp	r0, #0
 800022a:	d103      	bne.n	8000234 <__aeabi_f2uiz+0x18>
 800022c:	1c20      	adds	r0, r4, #0
 800022e:	f000 fdb5 	bl	8000d9c <__aeabi_f2iz>
 8000232:	bd10      	pop	{r4, pc}
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	1c20      	adds	r0, r4, #0
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	f000 fc01 	bl	8000a40 <__aeabi_fsub>
 800023e:	f000 fdad 	bl	8000d9c <__aeabi_f2iz>
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	061b      	lsls	r3, r3, #24
 8000246:	469c      	mov	ip, r3
 8000248:	4460      	add	r0, ip
 800024a:	e7f2      	b.n	8000232 <__aeabi_f2uiz+0x16>

0800024c <__aeabi_d2uiz>:
 800024c:	b570      	push	{r4, r5, r6, lr}
 800024e:	2200      	movs	r2, #0
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <__aeabi_d2uiz+0x38>)
 8000252:	0004      	movs	r4, r0
 8000254:	000d      	movs	r5, r1
 8000256:	f001 fd8f 	bl	8001d78 <__aeabi_dcmpge>
 800025a:	2800      	cmp	r0, #0
 800025c:	d104      	bne.n	8000268 <__aeabi_d2uiz+0x1c>
 800025e:	0020      	movs	r0, r4
 8000260:	0029      	movs	r1, r5
 8000262:	f001 fcd7 	bl	8001c14 <__aeabi_d2iz>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <__aeabi_d2uiz+0x38>)
 800026a:	2200      	movs	r2, #0
 800026c:	0020      	movs	r0, r4
 800026e:	0029      	movs	r1, r5
 8000270:	f001 f93e 	bl	80014f0 <__aeabi_dsub>
 8000274:	f001 fcce 	bl	8001c14 <__aeabi_d2iz>
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	061b      	lsls	r3, r3, #24
 800027c:	469c      	mov	ip, r3
 800027e:	4460      	add	r0, ip
 8000280:	e7f1      	b.n	8000266 <__aeabi_d2uiz+0x1a>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	41e00000 	.word	0x41e00000

08000288 <__aeabi_fadd>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	46c6      	mov	lr, r8
 800028c:	0243      	lsls	r3, r0, #9
 800028e:	0a5b      	lsrs	r3, r3, #9
 8000290:	024e      	lsls	r6, r1, #9
 8000292:	0045      	lsls	r5, r0, #1
 8000294:	004f      	lsls	r7, r1, #1
 8000296:	00da      	lsls	r2, r3, #3
 8000298:	0fc4      	lsrs	r4, r0, #31
 800029a:	469c      	mov	ip, r3
 800029c:	0a70      	lsrs	r0, r6, #9
 800029e:	4690      	mov	r8, r2
 80002a0:	b500      	push	{lr}
 80002a2:	0e2d      	lsrs	r5, r5, #24
 80002a4:	0e3f      	lsrs	r7, r7, #24
 80002a6:	0fc9      	lsrs	r1, r1, #31
 80002a8:	09b6      	lsrs	r6, r6, #6
 80002aa:	428c      	cmp	r4, r1
 80002ac:	d04b      	beq.n	8000346 <__aeabi_fadd+0xbe>
 80002ae:	1bea      	subs	r2, r5, r7
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	dd36      	ble.n	8000322 <__aeabi_fadd+0x9a>
 80002b4:	2f00      	cmp	r7, #0
 80002b6:	d061      	beq.n	800037c <__aeabi_fadd+0xf4>
 80002b8:	2dff      	cmp	r5, #255	; 0xff
 80002ba:	d100      	bne.n	80002be <__aeabi_fadd+0x36>
 80002bc:	e0ad      	b.n	800041a <__aeabi_fadd+0x192>
 80002be:	2380      	movs	r3, #128	; 0x80
 80002c0:	04db      	lsls	r3, r3, #19
 80002c2:	431e      	orrs	r6, r3
 80002c4:	2a1b      	cmp	r2, #27
 80002c6:	dc00      	bgt.n	80002ca <__aeabi_fadd+0x42>
 80002c8:	e0d3      	b.n	8000472 <__aeabi_fadd+0x1ea>
 80002ca:	2001      	movs	r0, #1
 80002cc:	4643      	mov	r3, r8
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	0143      	lsls	r3, r0, #5
 80002d2:	d400      	bmi.n	80002d6 <__aeabi_fadd+0x4e>
 80002d4:	e08c      	b.n	80003f0 <__aeabi_fadd+0x168>
 80002d6:	0180      	lsls	r0, r0, #6
 80002d8:	0987      	lsrs	r7, r0, #6
 80002da:	0038      	movs	r0, r7
 80002dc:	f001 fd90 	bl	8001e00 <__clzsi2>
 80002e0:	3805      	subs	r0, #5
 80002e2:	4087      	lsls	r7, r0
 80002e4:	4285      	cmp	r5, r0
 80002e6:	dc00      	bgt.n	80002ea <__aeabi_fadd+0x62>
 80002e8:	e0b6      	b.n	8000458 <__aeabi_fadd+0x1d0>
 80002ea:	1a2d      	subs	r5, r5, r0
 80002ec:	48b3      	ldr	r0, [pc, #716]	; (80005bc <__aeabi_fadd+0x334>)
 80002ee:	4038      	ands	r0, r7
 80002f0:	0743      	lsls	r3, r0, #29
 80002f2:	d004      	beq.n	80002fe <__aeabi_fadd+0x76>
 80002f4:	230f      	movs	r3, #15
 80002f6:	4003      	ands	r3, r0
 80002f8:	2b04      	cmp	r3, #4
 80002fa:	d000      	beq.n	80002fe <__aeabi_fadd+0x76>
 80002fc:	3004      	adds	r0, #4
 80002fe:	0143      	lsls	r3, r0, #5
 8000300:	d400      	bmi.n	8000304 <__aeabi_fadd+0x7c>
 8000302:	e078      	b.n	80003f6 <__aeabi_fadd+0x16e>
 8000304:	1c6a      	adds	r2, r5, #1
 8000306:	2dfe      	cmp	r5, #254	; 0xfe
 8000308:	d065      	beq.n	80003d6 <__aeabi_fadd+0x14e>
 800030a:	0180      	lsls	r0, r0, #6
 800030c:	0a43      	lsrs	r3, r0, #9
 800030e:	469c      	mov	ip, r3
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	4663      	mov	r3, ip
 8000314:	05d0      	lsls	r0, r2, #23
 8000316:	4318      	orrs	r0, r3
 8000318:	07e4      	lsls	r4, r4, #31
 800031a:	4320      	orrs	r0, r4
 800031c:	bc80      	pop	{r7}
 800031e:	46b8      	mov	r8, r7
 8000320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000322:	2a00      	cmp	r2, #0
 8000324:	d035      	beq.n	8000392 <__aeabi_fadd+0x10a>
 8000326:	1b7a      	subs	r2, r7, r5
 8000328:	2d00      	cmp	r5, #0
 800032a:	d000      	beq.n	800032e <__aeabi_fadd+0xa6>
 800032c:	e0af      	b.n	800048e <__aeabi_fadd+0x206>
 800032e:	4643      	mov	r3, r8
 8000330:	2b00      	cmp	r3, #0
 8000332:	d100      	bne.n	8000336 <__aeabi_fadd+0xae>
 8000334:	e0a7      	b.n	8000486 <__aeabi_fadd+0x1fe>
 8000336:	1e53      	subs	r3, r2, #1
 8000338:	2a01      	cmp	r2, #1
 800033a:	d100      	bne.n	800033e <__aeabi_fadd+0xb6>
 800033c:	e12f      	b.n	800059e <__aeabi_fadd+0x316>
 800033e:	2aff      	cmp	r2, #255	; 0xff
 8000340:	d069      	beq.n	8000416 <__aeabi_fadd+0x18e>
 8000342:	001a      	movs	r2, r3
 8000344:	e0aa      	b.n	800049c <__aeabi_fadd+0x214>
 8000346:	1be9      	subs	r1, r5, r7
 8000348:	2900      	cmp	r1, #0
 800034a:	dd70      	ble.n	800042e <__aeabi_fadd+0x1a6>
 800034c:	2f00      	cmp	r7, #0
 800034e:	d037      	beq.n	80003c0 <__aeabi_fadd+0x138>
 8000350:	2dff      	cmp	r5, #255	; 0xff
 8000352:	d062      	beq.n	800041a <__aeabi_fadd+0x192>
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	04db      	lsls	r3, r3, #19
 8000358:	431e      	orrs	r6, r3
 800035a:	291b      	cmp	r1, #27
 800035c:	dc00      	bgt.n	8000360 <__aeabi_fadd+0xd8>
 800035e:	e0b0      	b.n	80004c2 <__aeabi_fadd+0x23a>
 8000360:	2001      	movs	r0, #1
 8000362:	4440      	add	r0, r8
 8000364:	0143      	lsls	r3, r0, #5
 8000366:	d543      	bpl.n	80003f0 <__aeabi_fadd+0x168>
 8000368:	3501      	adds	r5, #1
 800036a:	2dff      	cmp	r5, #255	; 0xff
 800036c:	d033      	beq.n	80003d6 <__aeabi_fadd+0x14e>
 800036e:	2301      	movs	r3, #1
 8000370:	4a93      	ldr	r2, [pc, #588]	; (80005c0 <__aeabi_fadd+0x338>)
 8000372:	4003      	ands	r3, r0
 8000374:	0840      	lsrs	r0, r0, #1
 8000376:	4010      	ands	r0, r2
 8000378:	4318      	orrs	r0, r3
 800037a:	e7b9      	b.n	80002f0 <__aeabi_fadd+0x68>
 800037c:	2e00      	cmp	r6, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0xfa>
 8000380:	e083      	b.n	800048a <__aeabi_fadd+0x202>
 8000382:	1e51      	subs	r1, r2, #1
 8000384:	2a01      	cmp	r2, #1
 8000386:	d100      	bne.n	800038a <__aeabi_fadd+0x102>
 8000388:	e0d8      	b.n	800053c <__aeabi_fadd+0x2b4>
 800038a:	2aff      	cmp	r2, #255	; 0xff
 800038c:	d045      	beq.n	800041a <__aeabi_fadd+0x192>
 800038e:	000a      	movs	r2, r1
 8000390:	e798      	b.n	80002c4 <__aeabi_fadd+0x3c>
 8000392:	27fe      	movs	r7, #254	; 0xfe
 8000394:	1c6a      	adds	r2, r5, #1
 8000396:	4217      	tst	r7, r2
 8000398:	d000      	beq.n	800039c <__aeabi_fadd+0x114>
 800039a:	e086      	b.n	80004aa <__aeabi_fadd+0x222>
 800039c:	2d00      	cmp	r5, #0
 800039e:	d000      	beq.n	80003a2 <__aeabi_fadd+0x11a>
 80003a0:	e0b7      	b.n	8000512 <__aeabi_fadd+0x28a>
 80003a2:	4643      	mov	r3, r8
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d100      	bne.n	80003aa <__aeabi_fadd+0x122>
 80003a8:	e0f3      	b.n	8000592 <__aeabi_fadd+0x30a>
 80003aa:	2200      	movs	r2, #0
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0b0      	beq.n	8000312 <__aeabi_fadd+0x8a>
 80003b0:	1b98      	subs	r0, r3, r6
 80003b2:	0143      	lsls	r3, r0, #5
 80003b4:	d400      	bmi.n	80003b8 <__aeabi_fadd+0x130>
 80003b6:	e0fa      	b.n	80005ae <__aeabi_fadd+0x326>
 80003b8:	4643      	mov	r3, r8
 80003ba:	000c      	movs	r4, r1
 80003bc:	1af0      	subs	r0, r6, r3
 80003be:	e797      	b.n	80002f0 <__aeabi_fadd+0x68>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d100      	bne.n	80003c6 <__aeabi_fadd+0x13e>
 80003c4:	e0c8      	b.n	8000558 <__aeabi_fadd+0x2d0>
 80003c6:	1e4a      	subs	r2, r1, #1
 80003c8:	2901      	cmp	r1, #1
 80003ca:	d100      	bne.n	80003ce <__aeabi_fadd+0x146>
 80003cc:	e0ae      	b.n	800052c <__aeabi_fadd+0x2a4>
 80003ce:	29ff      	cmp	r1, #255	; 0xff
 80003d0:	d023      	beq.n	800041a <__aeabi_fadd+0x192>
 80003d2:	0011      	movs	r1, r2
 80003d4:	e7c1      	b.n	800035a <__aeabi_fadd+0xd2>
 80003d6:	2300      	movs	r3, #0
 80003d8:	22ff      	movs	r2, #255	; 0xff
 80003da:	469c      	mov	ip, r3
 80003dc:	e799      	b.n	8000312 <__aeabi_fadd+0x8a>
 80003de:	21fe      	movs	r1, #254	; 0xfe
 80003e0:	1c6a      	adds	r2, r5, #1
 80003e2:	4211      	tst	r1, r2
 80003e4:	d077      	beq.n	80004d6 <__aeabi_fadd+0x24e>
 80003e6:	2aff      	cmp	r2, #255	; 0xff
 80003e8:	d0f5      	beq.n	80003d6 <__aeabi_fadd+0x14e>
 80003ea:	0015      	movs	r5, r2
 80003ec:	4446      	add	r6, r8
 80003ee:	0870      	lsrs	r0, r6, #1
 80003f0:	0743      	lsls	r3, r0, #29
 80003f2:	d000      	beq.n	80003f6 <__aeabi_fadd+0x16e>
 80003f4:	e77e      	b.n	80002f4 <__aeabi_fadd+0x6c>
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	2dff      	cmp	r5, #255	; 0xff
 80003fa:	d00e      	beq.n	800041a <__aeabi_fadd+0x192>
 80003fc:	025b      	lsls	r3, r3, #9
 80003fe:	0a5b      	lsrs	r3, r3, #9
 8000400:	469c      	mov	ip, r3
 8000402:	b2ea      	uxtb	r2, r5
 8000404:	e785      	b.n	8000312 <__aeabi_fadd+0x8a>
 8000406:	2e00      	cmp	r6, #0
 8000408:	d007      	beq.n	800041a <__aeabi_fadd+0x192>
 800040a:	2280      	movs	r2, #128	; 0x80
 800040c:	03d2      	lsls	r2, r2, #15
 800040e:	4213      	tst	r3, r2
 8000410:	d003      	beq.n	800041a <__aeabi_fadd+0x192>
 8000412:	4210      	tst	r0, r2
 8000414:	d101      	bne.n	800041a <__aeabi_fadd+0x192>
 8000416:	000c      	movs	r4, r1
 8000418:	0003      	movs	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0db      	beq.n	80003d6 <__aeabi_fadd+0x14e>
 800041e:	2080      	movs	r0, #128	; 0x80
 8000420:	03c0      	lsls	r0, r0, #15
 8000422:	4318      	orrs	r0, r3
 8000424:	0240      	lsls	r0, r0, #9
 8000426:	0a43      	lsrs	r3, r0, #9
 8000428:	469c      	mov	ip, r3
 800042a:	22ff      	movs	r2, #255	; 0xff
 800042c:	e771      	b.n	8000312 <__aeabi_fadd+0x8a>
 800042e:	2900      	cmp	r1, #0
 8000430:	d0d5      	beq.n	80003de <__aeabi_fadd+0x156>
 8000432:	1b7a      	subs	r2, r7, r5
 8000434:	2d00      	cmp	r5, #0
 8000436:	d160      	bne.n	80004fa <__aeabi_fadd+0x272>
 8000438:	4643      	mov	r3, r8
 800043a:	2b00      	cmp	r3, #0
 800043c:	d024      	beq.n	8000488 <__aeabi_fadd+0x200>
 800043e:	1e53      	subs	r3, r2, #1
 8000440:	2a01      	cmp	r2, #1
 8000442:	d073      	beq.n	800052c <__aeabi_fadd+0x2a4>
 8000444:	2aff      	cmp	r2, #255	; 0xff
 8000446:	d0e7      	beq.n	8000418 <__aeabi_fadd+0x190>
 8000448:	001a      	movs	r2, r3
 800044a:	2a1b      	cmp	r2, #27
 800044c:	dc00      	bgt.n	8000450 <__aeabi_fadd+0x1c8>
 800044e:	e085      	b.n	800055c <__aeabi_fadd+0x2d4>
 8000450:	2001      	movs	r0, #1
 8000452:	003d      	movs	r5, r7
 8000454:	1980      	adds	r0, r0, r6
 8000456:	e785      	b.n	8000364 <__aeabi_fadd+0xdc>
 8000458:	2320      	movs	r3, #32
 800045a:	003a      	movs	r2, r7
 800045c:	1b45      	subs	r5, r0, r5
 800045e:	0038      	movs	r0, r7
 8000460:	3501      	adds	r5, #1
 8000462:	40ea      	lsrs	r2, r5
 8000464:	1b5d      	subs	r5, r3, r5
 8000466:	40a8      	lsls	r0, r5
 8000468:	1e43      	subs	r3, r0, #1
 800046a:	4198      	sbcs	r0, r3
 800046c:	2500      	movs	r5, #0
 800046e:	4310      	orrs	r0, r2
 8000470:	e73e      	b.n	80002f0 <__aeabi_fadd+0x68>
 8000472:	2320      	movs	r3, #32
 8000474:	0030      	movs	r0, r6
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	0031      	movs	r1, r6
 800047a:	4098      	lsls	r0, r3
 800047c:	40d1      	lsrs	r1, r2
 800047e:	1e43      	subs	r3, r0, #1
 8000480:	4198      	sbcs	r0, r3
 8000482:	4308      	orrs	r0, r1
 8000484:	e722      	b.n	80002cc <__aeabi_fadd+0x44>
 8000486:	000c      	movs	r4, r1
 8000488:	0003      	movs	r3, r0
 800048a:	0015      	movs	r5, r2
 800048c:	e7b4      	b.n	80003f8 <__aeabi_fadd+0x170>
 800048e:	2fff      	cmp	r7, #255	; 0xff
 8000490:	d0c1      	beq.n	8000416 <__aeabi_fadd+0x18e>
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	4640      	mov	r0, r8
 8000496:	04db      	lsls	r3, r3, #19
 8000498:	4318      	orrs	r0, r3
 800049a:	4680      	mov	r8, r0
 800049c:	2a1b      	cmp	r2, #27
 800049e:	dd51      	ble.n	8000544 <__aeabi_fadd+0x2bc>
 80004a0:	2001      	movs	r0, #1
 80004a2:	000c      	movs	r4, r1
 80004a4:	003d      	movs	r5, r7
 80004a6:	1a30      	subs	r0, r6, r0
 80004a8:	e712      	b.n	80002d0 <__aeabi_fadd+0x48>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1b9f      	subs	r7, r3, r6
 80004ae:	017b      	lsls	r3, r7, #5
 80004b0:	d42b      	bmi.n	800050a <__aeabi_fadd+0x282>
 80004b2:	2f00      	cmp	r7, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fadd+0x230>
 80004b6:	e710      	b.n	80002da <__aeabi_fadd+0x52>
 80004b8:	2300      	movs	r3, #0
 80004ba:	2400      	movs	r4, #0
 80004bc:	2200      	movs	r2, #0
 80004be:	469c      	mov	ip, r3
 80004c0:	e727      	b.n	8000312 <__aeabi_fadd+0x8a>
 80004c2:	2320      	movs	r3, #32
 80004c4:	0032      	movs	r2, r6
 80004c6:	0030      	movs	r0, r6
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	1a59      	subs	r1, r3, r1
 80004cc:	4088      	lsls	r0, r1
 80004ce:	1e43      	subs	r3, r0, #1
 80004d0:	4198      	sbcs	r0, r3
 80004d2:	4310      	orrs	r0, r2
 80004d4:	e745      	b.n	8000362 <__aeabi_fadd+0xda>
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	d14a      	bne.n	8000570 <__aeabi_fadd+0x2e8>
 80004da:	4643      	mov	r3, r8
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d063      	beq.n	80005a8 <__aeabi_fadd+0x320>
 80004e0:	2200      	movs	r2, #0
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fadd+0x260>
 80004e6:	e714      	b.n	8000312 <__aeabi_fadd+0x8a>
 80004e8:	0030      	movs	r0, r6
 80004ea:	4440      	add	r0, r8
 80004ec:	0143      	lsls	r3, r0, #5
 80004ee:	d400      	bmi.n	80004f2 <__aeabi_fadd+0x26a>
 80004f0:	e77e      	b.n	80003f0 <__aeabi_fadd+0x168>
 80004f2:	4b32      	ldr	r3, [pc, #200]	; (80005bc <__aeabi_fadd+0x334>)
 80004f4:	3501      	adds	r5, #1
 80004f6:	4018      	ands	r0, r3
 80004f8:	e77a      	b.n	80003f0 <__aeabi_fadd+0x168>
 80004fa:	2fff      	cmp	r7, #255	; 0xff
 80004fc:	d08c      	beq.n	8000418 <__aeabi_fadd+0x190>
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	4641      	mov	r1, r8
 8000502:	04db      	lsls	r3, r3, #19
 8000504:	4319      	orrs	r1, r3
 8000506:	4688      	mov	r8, r1
 8000508:	e79f      	b.n	800044a <__aeabi_fadd+0x1c2>
 800050a:	4643      	mov	r3, r8
 800050c:	000c      	movs	r4, r1
 800050e:	1af7      	subs	r7, r6, r3
 8000510:	e6e3      	b.n	80002da <__aeabi_fadd+0x52>
 8000512:	4642      	mov	r2, r8
 8000514:	2a00      	cmp	r2, #0
 8000516:	d000      	beq.n	800051a <__aeabi_fadd+0x292>
 8000518:	e775      	b.n	8000406 <__aeabi_fadd+0x17e>
 800051a:	2e00      	cmp	r6, #0
 800051c:	d000      	beq.n	8000520 <__aeabi_fadd+0x298>
 800051e:	e77a      	b.n	8000416 <__aeabi_fadd+0x18e>
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	03db      	lsls	r3, r3, #15
 8000524:	2400      	movs	r4, #0
 8000526:	469c      	mov	ip, r3
 8000528:	22ff      	movs	r2, #255	; 0xff
 800052a:	e6f2      	b.n	8000312 <__aeabi_fadd+0x8a>
 800052c:	0030      	movs	r0, r6
 800052e:	4440      	add	r0, r8
 8000530:	2501      	movs	r5, #1
 8000532:	0143      	lsls	r3, r0, #5
 8000534:	d400      	bmi.n	8000538 <__aeabi_fadd+0x2b0>
 8000536:	e75b      	b.n	80003f0 <__aeabi_fadd+0x168>
 8000538:	2502      	movs	r5, #2
 800053a:	e718      	b.n	800036e <__aeabi_fadd+0xe6>
 800053c:	4643      	mov	r3, r8
 800053e:	2501      	movs	r5, #1
 8000540:	1b98      	subs	r0, r3, r6
 8000542:	e6c5      	b.n	80002d0 <__aeabi_fadd+0x48>
 8000544:	2320      	movs	r3, #32
 8000546:	4644      	mov	r4, r8
 8000548:	4640      	mov	r0, r8
 800054a:	40d4      	lsrs	r4, r2
 800054c:	1a9a      	subs	r2, r3, r2
 800054e:	4090      	lsls	r0, r2
 8000550:	1e43      	subs	r3, r0, #1
 8000552:	4198      	sbcs	r0, r3
 8000554:	4320      	orrs	r0, r4
 8000556:	e7a4      	b.n	80004a2 <__aeabi_fadd+0x21a>
 8000558:	000d      	movs	r5, r1
 800055a:	e74d      	b.n	80003f8 <__aeabi_fadd+0x170>
 800055c:	2320      	movs	r3, #32
 800055e:	4641      	mov	r1, r8
 8000560:	4640      	mov	r0, r8
 8000562:	40d1      	lsrs	r1, r2
 8000564:	1a9a      	subs	r2, r3, r2
 8000566:	4090      	lsls	r0, r2
 8000568:	1e43      	subs	r3, r0, #1
 800056a:	4198      	sbcs	r0, r3
 800056c:	4308      	orrs	r0, r1
 800056e:	e770      	b.n	8000452 <__aeabi_fadd+0x1ca>
 8000570:	4642      	mov	r2, r8
 8000572:	2a00      	cmp	r2, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_fadd+0x2f0>
 8000576:	e74f      	b.n	8000418 <__aeabi_fadd+0x190>
 8000578:	2e00      	cmp	r6, #0
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0x2f6>
 800057c:	e74d      	b.n	800041a <__aeabi_fadd+0x192>
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	03d2      	lsls	r2, r2, #15
 8000582:	4213      	tst	r3, r2
 8000584:	d100      	bne.n	8000588 <__aeabi_fadd+0x300>
 8000586:	e748      	b.n	800041a <__aeabi_fadd+0x192>
 8000588:	4210      	tst	r0, r2
 800058a:	d000      	beq.n	800058e <__aeabi_fadd+0x306>
 800058c:	e745      	b.n	800041a <__aeabi_fadd+0x192>
 800058e:	0003      	movs	r3, r0
 8000590:	e743      	b.n	800041a <__aeabi_fadd+0x192>
 8000592:	2e00      	cmp	r6, #0
 8000594:	d090      	beq.n	80004b8 <__aeabi_fadd+0x230>
 8000596:	000c      	movs	r4, r1
 8000598:	4684      	mov	ip, r0
 800059a:	2200      	movs	r2, #0
 800059c:	e6b9      	b.n	8000312 <__aeabi_fadd+0x8a>
 800059e:	4643      	mov	r3, r8
 80005a0:	000c      	movs	r4, r1
 80005a2:	1af0      	subs	r0, r6, r3
 80005a4:	3501      	adds	r5, #1
 80005a6:	e693      	b.n	80002d0 <__aeabi_fadd+0x48>
 80005a8:	4684      	mov	ip, r0
 80005aa:	2200      	movs	r2, #0
 80005ac:	e6b1      	b.n	8000312 <__aeabi_fadd+0x8a>
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fadd+0x32c>
 80005b2:	e71d      	b.n	80003f0 <__aeabi_fadd+0x168>
 80005b4:	2300      	movs	r3, #0
 80005b6:	2400      	movs	r4, #0
 80005b8:	469c      	mov	ip, r3
 80005ba:	e6aa      	b.n	8000312 <__aeabi_fadd+0x8a>
 80005bc:	fbffffff 	.word	0xfbffffff
 80005c0:	7dffffff 	.word	0x7dffffff

080005c4 <__aeabi_fdiv>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	464f      	mov	r7, r9
 80005c8:	4646      	mov	r6, r8
 80005ca:	46d6      	mov	lr, sl
 80005cc:	0245      	lsls	r5, r0, #9
 80005ce:	b5c0      	push	{r6, r7, lr}
 80005d0:	0047      	lsls	r7, r0, #1
 80005d2:	1c0c      	adds	r4, r1, #0
 80005d4:	0a6d      	lsrs	r5, r5, #9
 80005d6:	0e3f      	lsrs	r7, r7, #24
 80005d8:	0fc6      	lsrs	r6, r0, #31
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fdiv+0x1c>
 80005de:	e070      	b.n	80006c2 <__aeabi_fdiv+0xfe>
 80005e0:	2fff      	cmp	r7, #255	; 0xff
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fdiv+0x22>
 80005e4:	e075      	b.n	80006d2 <__aeabi_fdiv+0x10e>
 80005e6:	00eb      	lsls	r3, r5, #3
 80005e8:	2580      	movs	r5, #128	; 0x80
 80005ea:	04ed      	lsls	r5, r5, #19
 80005ec:	431d      	orrs	r5, r3
 80005ee:	2300      	movs	r3, #0
 80005f0:	4699      	mov	r9, r3
 80005f2:	469a      	mov	sl, r3
 80005f4:	3f7f      	subs	r7, #127	; 0x7f
 80005f6:	0260      	lsls	r0, r4, #9
 80005f8:	0a43      	lsrs	r3, r0, #9
 80005fa:	4698      	mov	r8, r3
 80005fc:	0063      	lsls	r3, r4, #1
 80005fe:	0e1b      	lsrs	r3, r3, #24
 8000600:	0fe4      	lsrs	r4, r4, #31
 8000602:	2b00      	cmp	r3, #0
 8000604:	d04e      	beq.n	80006a4 <__aeabi_fdiv+0xe0>
 8000606:	2bff      	cmp	r3, #255	; 0xff
 8000608:	d046      	beq.n	8000698 <__aeabi_fdiv+0xd4>
 800060a:	4642      	mov	r2, r8
 800060c:	00d0      	lsls	r0, r2, #3
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	04d2      	lsls	r2, r2, #19
 8000612:	4302      	orrs	r2, r0
 8000614:	4690      	mov	r8, r2
 8000616:	2200      	movs	r2, #0
 8000618:	3b7f      	subs	r3, #127	; 0x7f
 800061a:	0031      	movs	r1, r6
 800061c:	1aff      	subs	r7, r7, r3
 800061e:	464b      	mov	r3, r9
 8000620:	4061      	eors	r1, r4
 8000622:	b2c9      	uxtb	r1, r1
 8000624:	4313      	orrs	r3, r2
 8000626:	2b0f      	cmp	r3, #15
 8000628:	d900      	bls.n	800062c <__aeabi_fdiv+0x68>
 800062a:	e0b5      	b.n	8000798 <__aeabi_fdiv+0x1d4>
 800062c:	486e      	ldr	r0, [pc, #440]	; (80007e8 <__aeabi_fdiv+0x224>)
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	58c3      	ldr	r3, [r0, r3]
 8000632:	469f      	mov	pc, r3
 8000634:	2300      	movs	r3, #0
 8000636:	4698      	mov	r8, r3
 8000638:	0026      	movs	r6, r4
 800063a:	4645      	mov	r5, r8
 800063c:	4692      	mov	sl, r2
 800063e:	4653      	mov	r3, sl
 8000640:	2b02      	cmp	r3, #2
 8000642:	d100      	bne.n	8000646 <__aeabi_fdiv+0x82>
 8000644:	e089      	b.n	800075a <__aeabi_fdiv+0x196>
 8000646:	2b03      	cmp	r3, #3
 8000648:	d100      	bne.n	800064c <__aeabi_fdiv+0x88>
 800064a:	e09e      	b.n	800078a <__aeabi_fdiv+0x1c6>
 800064c:	2b01      	cmp	r3, #1
 800064e:	d018      	beq.n	8000682 <__aeabi_fdiv+0xbe>
 8000650:	003b      	movs	r3, r7
 8000652:	337f      	adds	r3, #127	; 0x7f
 8000654:	2b00      	cmp	r3, #0
 8000656:	dd69      	ble.n	800072c <__aeabi_fdiv+0x168>
 8000658:	076a      	lsls	r2, r5, #29
 800065a:	d004      	beq.n	8000666 <__aeabi_fdiv+0xa2>
 800065c:	220f      	movs	r2, #15
 800065e:	402a      	ands	r2, r5
 8000660:	2a04      	cmp	r2, #4
 8000662:	d000      	beq.n	8000666 <__aeabi_fdiv+0xa2>
 8000664:	3504      	adds	r5, #4
 8000666:	012a      	lsls	r2, r5, #4
 8000668:	d503      	bpl.n	8000672 <__aeabi_fdiv+0xae>
 800066a:	4b60      	ldr	r3, [pc, #384]	; (80007ec <__aeabi_fdiv+0x228>)
 800066c:	401d      	ands	r5, r3
 800066e:	003b      	movs	r3, r7
 8000670:	3380      	adds	r3, #128	; 0x80
 8000672:	2bfe      	cmp	r3, #254	; 0xfe
 8000674:	dd00      	ble.n	8000678 <__aeabi_fdiv+0xb4>
 8000676:	e070      	b.n	800075a <__aeabi_fdiv+0x196>
 8000678:	01ad      	lsls	r5, r5, #6
 800067a:	0a6d      	lsrs	r5, r5, #9
 800067c:	b2d8      	uxtb	r0, r3
 800067e:	e002      	b.n	8000686 <__aeabi_fdiv+0xc2>
 8000680:	000e      	movs	r6, r1
 8000682:	2000      	movs	r0, #0
 8000684:	2500      	movs	r5, #0
 8000686:	05c0      	lsls	r0, r0, #23
 8000688:	4328      	orrs	r0, r5
 800068a:	07f6      	lsls	r6, r6, #31
 800068c:	4330      	orrs	r0, r6
 800068e:	bce0      	pop	{r5, r6, r7}
 8000690:	46ba      	mov	sl, r7
 8000692:	46b1      	mov	r9, r6
 8000694:	46a8      	mov	r8, r5
 8000696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000698:	4643      	mov	r3, r8
 800069a:	2b00      	cmp	r3, #0
 800069c:	d13f      	bne.n	800071e <__aeabi_fdiv+0x15a>
 800069e:	2202      	movs	r2, #2
 80006a0:	3fff      	subs	r7, #255	; 0xff
 80006a2:	e003      	b.n	80006ac <__aeabi_fdiv+0xe8>
 80006a4:	4643      	mov	r3, r8
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d12d      	bne.n	8000706 <__aeabi_fdiv+0x142>
 80006aa:	2201      	movs	r2, #1
 80006ac:	0031      	movs	r1, r6
 80006ae:	464b      	mov	r3, r9
 80006b0:	4061      	eors	r1, r4
 80006b2:	b2c9      	uxtb	r1, r1
 80006b4:	4313      	orrs	r3, r2
 80006b6:	2b0f      	cmp	r3, #15
 80006b8:	d834      	bhi.n	8000724 <__aeabi_fdiv+0x160>
 80006ba:	484d      	ldr	r0, [pc, #308]	; (80007f0 <__aeabi_fdiv+0x22c>)
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	58c3      	ldr	r3, [r0, r3]
 80006c0:	469f      	mov	pc, r3
 80006c2:	2d00      	cmp	r5, #0
 80006c4:	d113      	bne.n	80006ee <__aeabi_fdiv+0x12a>
 80006c6:	2304      	movs	r3, #4
 80006c8:	4699      	mov	r9, r3
 80006ca:	3b03      	subs	r3, #3
 80006cc:	2700      	movs	r7, #0
 80006ce:	469a      	mov	sl, r3
 80006d0:	e791      	b.n	80005f6 <__aeabi_fdiv+0x32>
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	d105      	bne.n	80006e2 <__aeabi_fdiv+0x11e>
 80006d6:	2308      	movs	r3, #8
 80006d8:	4699      	mov	r9, r3
 80006da:	3b06      	subs	r3, #6
 80006dc:	27ff      	movs	r7, #255	; 0xff
 80006de:	469a      	mov	sl, r3
 80006e0:	e789      	b.n	80005f6 <__aeabi_fdiv+0x32>
 80006e2:	230c      	movs	r3, #12
 80006e4:	4699      	mov	r9, r3
 80006e6:	3b09      	subs	r3, #9
 80006e8:	27ff      	movs	r7, #255	; 0xff
 80006ea:	469a      	mov	sl, r3
 80006ec:	e783      	b.n	80005f6 <__aeabi_fdiv+0x32>
 80006ee:	0028      	movs	r0, r5
 80006f0:	f001 fb86 	bl	8001e00 <__clzsi2>
 80006f4:	2776      	movs	r7, #118	; 0x76
 80006f6:	1f43      	subs	r3, r0, #5
 80006f8:	409d      	lsls	r5, r3
 80006fa:	2300      	movs	r3, #0
 80006fc:	427f      	negs	r7, r7
 80006fe:	4699      	mov	r9, r3
 8000700:	469a      	mov	sl, r3
 8000702:	1a3f      	subs	r7, r7, r0
 8000704:	e777      	b.n	80005f6 <__aeabi_fdiv+0x32>
 8000706:	4640      	mov	r0, r8
 8000708:	f001 fb7a 	bl	8001e00 <__clzsi2>
 800070c:	4642      	mov	r2, r8
 800070e:	1f43      	subs	r3, r0, #5
 8000710:	409a      	lsls	r2, r3
 8000712:	2376      	movs	r3, #118	; 0x76
 8000714:	425b      	negs	r3, r3
 8000716:	4690      	mov	r8, r2
 8000718:	1a1b      	subs	r3, r3, r0
 800071a:	2200      	movs	r2, #0
 800071c:	e77d      	b.n	800061a <__aeabi_fdiv+0x56>
 800071e:	23ff      	movs	r3, #255	; 0xff
 8000720:	2203      	movs	r2, #3
 8000722:	e77a      	b.n	800061a <__aeabi_fdiv+0x56>
 8000724:	000e      	movs	r6, r1
 8000726:	20ff      	movs	r0, #255	; 0xff
 8000728:	2500      	movs	r5, #0
 800072a:	e7ac      	b.n	8000686 <__aeabi_fdiv+0xc2>
 800072c:	2001      	movs	r0, #1
 800072e:	1ac0      	subs	r0, r0, r3
 8000730:	281b      	cmp	r0, #27
 8000732:	dca6      	bgt.n	8000682 <__aeabi_fdiv+0xbe>
 8000734:	379e      	adds	r7, #158	; 0x9e
 8000736:	002a      	movs	r2, r5
 8000738:	40bd      	lsls	r5, r7
 800073a:	40c2      	lsrs	r2, r0
 800073c:	1e6b      	subs	r3, r5, #1
 800073e:	419d      	sbcs	r5, r3
 8000740:	4315      	orrs	r5, r2
 8000742:	076b      	lsls	r3, r5, #29
 8000744:	d004      	beq.n	8000750 <__aeabi_fdiv+0x18c>
 8000746:	230f      	movs	r3, #15
 8000748:	402b      	ands	r3, r5
 800074a:	2b04      	cmp	r3, #4
 800074c:	d000      	beq.n	8000750 <__aeabi_fdiv+0x18c>
 800074e:	3504      	adds	r5, #4
 8000750:	016b      	lsls	r3, r5, #5
 8000752:	d544      	bpl.n	80007de <__aeabi_fdiv+0x21a>
 8000754:	2001      	movs	r0, #1
 8000756:	2500      	movs	r5, #0
 8000758:	e795      	b.n	8000686 <__aeabi_fdiv+0xc2>
 800075a:	20ff      	movs	r0, #255	; 0xff
 800075c:	2500      	movs	r5, #0
 800075e:	e792      	b.n	8000686 <__aeabi_fdiv+0xc2>
 8000760:	2580      	movs	r5, #128	; 0x80
 8000762:	2600      	movs	r6, #0
 8000764:	20ff      	movs	r0, #255	; 0xff
 8000766:	03ed      	lsls	r5, r5, #15
 8000768:	e78d      	b.n	8000686 <__aeabi_fdiv+0xc2>
 800076a:	2300      	movs	r3, #0
 800076c:	4698      	mov	r8, r3
 800076e:	2080      	movs	r0, #128	; 0x80
 8000770:	03c0      	lsls	r0, r0, #15
 8000772:	4205      	tst	r5, r0
 8000774:	d009      	beq.n	800078a <__aeabi_fdiv+0x1c6>
 8000776:	4643      	mov	r3, r8
 8000778:	4203      	tst	r3, r0
 800077a:	d106      	bne.n	800078a <__aeabi_fdiv+0x1c6>
 800077c:	4645      	mov	r5, r8
 800077e:	4305      	orrs	r5, r0
 8000780:	026d      	lsls	r5, r5, #9
 8000782:	0026      	movs	r6, r4
 8000784:	20ff      	movs	r0, #255	; 0xff
 8000786:	0a6d      	lsrs	r5, r5, #9
 8000788:	e77d      	b.n	8000686 <__aeabi_fdiv+0xc2>
 800078a:	2080      	movs	r0, #128	; 0x80
 800078c:	03c0      	lsls	r0, r0, #15
 800078e:	4305      	orrs	r5, r0
 8000790:	026d      	lsls	r5, r5, #9
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	0a6d      	lsrs	r5, r5, #9
 8000796:	e776      	b.n	8000686 <__aeabi_fdiv+0xc2>
 8000798:	4642      	mov	r2, r8
 800079a:	016b      	lsls	r3, r5, #5
 800079c:	0150      	lsls	r0, r2, #5
 800079e:	4283      	cmp	r3, r0
 80007a0:	d219      	bcs.n	80007d6 <__aeabi_fdiv+0x212>
 80007a2:	221b      	movs	r2, #27
 80007a4:	2500      	movs	r5, #0
 80007a6:	3f01      	subs	r7, #1
 80007a8:	2601      	movs	r6, #1
 80007aa:	001c      	movs	r4, r3
 80007ac:	006d      	lsls	r5, r5, #1
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	2c00      	cmp	r4, #0
 80007b2:	db01      	blt.n	80007b8 <__aeabi_fdiv+0x1f4>
 80007b4:	4298      	cmp	r0, r3
 80007b6:	d801      	bhi.n	80007bc <__aeabi_fdiv+0x1f8>
 80007b8:	1a1b      	subs	r3, r3, r0
 80007ba:	4335      	orrs	r5, r6
 80007bc:	3a01      	subs	r2, #1
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d1f3      	bne.n	80007aa <__aeabi_fdiv+0x1e6>
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	4193      	sbcs	r3, r2
 80007c6:	431d      	orrs	r5, r3
 80007c8:	003b      	movs	r3, r7
 80007ca:	337f      	adds	r3, #127	; 0x7f
 80007cc:	000e      	movs	r6, r1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_fdiv+0x210>
 80007d2:	e741      	b.n	8000658 <__aeabi_fdiv+0x94>
 80007d4:	e7aa      	b.n	800072c <__aeabi_fdiv+0x168>
 80007d6:	221a      	movs	r2, #26
 80007d8:	2501      	movs	r5, #1
 80007da:	1a1b      	subs	r3, r3, r0
 80007dc:	e7e4      	b.n	80007a8 <__aeabi_fdiv+0x1e4>
 80007de:	01ad      	lsls	r5, r5, #6
 80007e0:	2000      	movs	r0, #0
 80007e2:	0a6d      	lsrs	r5, r5, #9
 80007e4:	e74f      	b.n	8000686 <__aeabi_fdiv+0xc2>
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	08004df8 	.word	0x08004df8
 80007ec:	f7ffffff 	.word	0xf7ffffff
 80007f0:	08004e38 	.word	0x08004e38

080007f4 <__aeabi_fmul>:
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	464f      	mov	r7, r9
 80007f8:	4646      	mov	r6, r8
 80007fa:	46d6      	mov	lr, sl
 80007fc:	0244      	lsls	r4, r0, #9
 80007fe:	0045      	lsls	r5, r0, #1
 8000800:	b5c0      	push	{r6, r7, lr}
 8000802:	0a64      	lsrs	r4, r4, #9
 8000804:	1c0f      	adds	r7, r1, #0
 8000806:	0e2d      	lsrs	r5, r5, #24
 8000808:	0fc6      	lsrs	r6, r0, #31
 800080a:	2d00      	cmp	r5, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_fmul+0x1c>
 800080e:	e08d      	b.n	800092c <__aeabi_fmul+0x138>
 8000810:	2dff      	cmp	r5, #255	; 0xff
 8000812:	d100      	bne.n	8000816 <__aeabi_fmul+0x22>
 8000814:	e092      	b.n	800093c <__aeabi_fmul+0x148>
 8000816:	2300      	movs	r3, #0
 8000818:	2080      	movs	r0, #128	; 0x80
 800081a:	4699      	mov	r9, r3
 800081c:	469a      	mov	sl, r3
 800081e:	00e4      	lsls	r4, r4, #3
 8000820:	04c0      	lsls	r0, r0, #19
 8000822:	4304      	orrs	r4, r0
 8000824:	3d7f      	subs	r5, #127	; 0x7f
 8000826:	0278      	lsls	r0, r7, #9
 8000828:	0a43      	lsrs	r3, r0, #9
 800082a:	4698      	mov	r8, r3
 800082c:	007b      	lsls	r3, r7, #1
 800082e:	0e1b      	lsrs	r3, r3, #24
 8000830:	0fff      	lsrs	r7, r7, #31
 8000832:	2b00      	cmp	r3, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fmul+0x44>
 8000836:	e070      	b.n	800091a <__aeabi_fmul+0x126>
 8000838:	2bff      	cmp	r3, #255	; 0xff
 800083a:	d100      	bne.n	800083e <__aeabi_fmul+0x4a>
 800083c:	e086      	b.n	800094c <__aeabi_fmul+0x158>
 800083e:	4642      	mov	r2, r8
 8000840:	00d0      	lsls	r0, r2, #3
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	3b7f      	subs	r3, #127	; 0x7f
 8000846:	18ed      	adds	r5, r5, r3
 8000848:	2300      	movs	r3, #0
 800084a:	04d2      	lsls	r2, r2, #19
 800084c:	4302      	orrs	r2, r0
 800084e:	4690      	mov	r8, r2
 8000850:	469c      	mov	ip, r3
 8000852:	0031      	movs	r1, r6
 8000854:	464b      	mov	r3, r9
 8000856:	4079      	eors	r1, r7
 8000858:	1c68      	adds	r0, r5, #1
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d81c      	bhi.n	8000898 <__aeabi_fmul+0xa4>
 800085e:	4a76      	ldr	r2, [pc, #472]	; (8000a38 <__aeabi_fmul+0x244>)
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	58d3      	ldr	r3, [r2, r3]
 8000864:	469f      	mov	pc, r3
 8000866:	0039      	movs	r1, r7
 8000868:	4644      	mov	r4, r8
 800086a:	46e2      	mov	sl, ip
 800086c:	4653      	mov	r3, sl
 800086e:	2b02      	cmp	r3, #2
 8000870:	d00f      	beq.n	8000892 <__aeabi_fmul+0x9e>
 8000872:	2b03      	cmp	r3, #3
 8000874:	d100      	bne.n	8000878 <__aeabi_fmul+0x84>
 8000876:	e0d7      	b.n	8000a28 <__aeabi_fmul+0x234>
 8000878:	2b01      	cmp	r3, #1
 800087a:	d137      	bne.n	80008ec <__aeabi_fmul+0xf8>
 800087c:	2000      	movs	r0, #0
 800087e:	2400      	movs	r4, #0
 8000880:	05c0      	lsls	r0, r0, #23
 8000882:	4320      	orrs	r0, r4
 8000884:	07c9      	lsls	r1, r1, #31
 8000886:	4308      	orrs	r0, r1
 8000888:	bce0      	pop	{r5, r6, r7}
 800088a:	46ba      	mov	sl, r7
 800088c:	46b1      	mov	r9, r6
 800088e:	46a8      	mov	r8, r5
 8000890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000892:	20ff      	movs	r0, #255	; 0xff
 8000894:	2400      	movs	r4, #0
 8000896:	e7f3      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000898:	0c26      	lsrs	r6, r4, #16
 800089a:	0424      	lsls	r4, r4, #16
 800089c:	0c22      	lsrs	r2, r4, #16
 800089e:	4644      	mov	r4, r8
 80008a0:	0424      	lsls	r4, r4, #16
 80008a2:	0c24      	lsrs	r4, r4, #16
 80008a4:	4643      	mov	r3, r8
 80008a6:	0027      	movs	r7, r4
 80008a8:	0c1b      	lsrs	r3, r3, #16
 80008aa:	4357      	muls	r7, r2
 80008ac:	4374      	muls	r4, r6
 80008ae:	435a      	muls	r2, r3
 80008b0:	435e      	muls	r6, r3
 80008b2:	1912      	adds	r2, r2, r4
 80008b4:	0c3b      	lsrs	r3, r7, #16
 80008b6:	189b      	adds	r3, r3, r2
 80008b8:	429c      	cmp	r4, r3
 80008ba:	d903      	bls.n	80008c4 <__aeabi_fmul+0xd0>
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	4694      	mov	ip, r2
 80008c2:	4466      	add	r6, ip
 80008c4:	043f      	lsls	r7, r7, #16
 80008c6:	041a      	lsls	r2, r3, #16
 80008c8:	0c3f      	lsrs	r7, r7, #16
 80008ca:	19d2      	adds	r2, r2, r7
 80008cc:	0194      	lsls	r4, r2, #6
 80008ce:	1e67      	subs	r7, r4, #1
 80008d0:	41bc      	sbcs	r4, r7
 80008d2:	0c1b      	lsrs	r3, r3, #16
 80008d4:	0e92      	lsrs	r2, r2, #26
 80008d6:	199b      	adds	r3, r3, r6
 80008d8:	4314      	orrs	r4, r2
 80008da:	019b      	lsls	r3, r3, #6
 80008dc:	431c      	orrs	r4, r3
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	d400      	bmi.n	80008e4 <__aeabi_fmul+0xf0>
 80008e2:	e09b      	b.n	8000a1c <__aeabi_fmul+0x228>
 80008e4:	2301      	movs	r3, #1
 80008e6:	0862      	lsrs	r2, r4, #1
 80008e8:	401c      	ands	r4, r3
 80008ea:	4314      	orrs	r4, r2
 80008ec:	0002      	movs	r2, r0
 80008ee:	327f      	adds	r2, #127	; 0x7f
 80008f0:	2a00      	cmp	r2, #0
 80008f2:	dd64      	ble.n	80009be <__aeabi_fmul+0x1ca>
 80008f4:	0763      	lsls	r3, r4, #29
 80008f6:	d004      	beq.n	8000902 <__aeabi_fmul+0x10e>
 80008f8:	230f      	movs	r3, #15
 80008fa:	4023      	ands	r3, r4
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d000      	beq.n	8000902 <__aeabi_fmul+0x10e>
 8000900:	3404      	adds	r4, #4
 8000902:	0123      	lsls	r3, r4, #4
 8000904:	d503      	bpl.n	800090e <__aeabi_fmul+0x11a>
 8000906:	0002      	movs	r2, r0
 8000908:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <__aeabi_fmul+0x248>)
 800090a:	3280      	adds	r2, #128	; 0x80
 800090c:	401c      	ands	r4, r3
 800090e:	2afe      	cmp	r2, #254	; 0xfe
 8000910:	dcbf      	bgt.n	8000892 <__aeabi_fmul+0x9e>
 8000912:	01a4      	lsls	r4, r4, #6
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	b2d0      	uxtb	r0, r2
 8000918:	e7b2      	b.n	8000880 <__aeabi_fmul+0x8c>
 800091a:	4643      	mov	r3, r8
 800091c:	2b00      	cmp	r3, #0
 800091e:	d13d      	bne.n	800099c <__aeabi_fmul+0x1a8>
 8000920:	464a      	mov	r2, r9
 8000922:	3301      	adds	r3, #1
 8000924:	431a      	orrs	r2, r3
 8000926:	4691      	mov	r9, r2
 8000928:	469c      	mov	ip, r3
 800092a:	e792      	b.n	8000852 <__aeabi_fmul+0x5e>
 800092c:	2c00      	cmp	r4, #0
 800092e:	d129      	bne.n	8000984 <__aeabi_fmul+0x190>
 8000930:	2304      	movs	r3, #4
 8000932:	4699      	mov	r9, r3
 8000934:	3b03      	subs	r3, #3
 8000936:	2500      	movs	r5, #0
 8000938:	469a      	mov	sl, r3
 800093a:	e774      	b.n	8000826 <__aeabi_fmul+0x32>
 800093c:	2c00      	cmp	r4, #0
 800093e:	d11b      	bne.n	8000978 <__aeabi_fmul+0x184>
 8000940:	2308      	movs	r3, #8
 8000942:	4699      	mov	r9, r3
 8000944:	3b06      	subs	r3, #6
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e76c      	b.n	8000826 <__aeabi_fmul+0x32>
 800094c:	4643      	mov	r3, r8
 800094e:	35ff      	adds	r5, #255	; 0xff
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10b      	bne.n	800096c <__aeabi_fmul+0x178>
 8000954:	2302      	movs	r3, #2
 8000956:	464a      	mov	r2, r9
 8000958:	431a      	orrs	r2, r3
 800095a:	4691      	mov	r9, r2
 800095c:	469c      	mov	ip, r3
 800095e:	e778      	b.n	8000852 <__aeabi_fmul+0x5e>
 8000960:	4653      	mov	r3, sl
 8000962:	0031      	movs	r1, r6
 8000964:	2b02      	cmp	r3, #2
 8000966:	d000      	beq.n	800096a <__aeabi_fmul+0x176>
 8000968:	e783      	b.n	8000872 <__aeabi_fmul+0x7e>
 800096a:	e792      	b.n	8000892 <__aeabi_fmul+0x9e>
 800096c:	2303      	movs	r3, #3
 800096e:	464a      	mov	r2, r9
 8000970:	431a      	orrs	r2, r3
 8000972:	4691      	mov	r9, r2
 8000974:	469c      	mov	ip, r3
 8000976:	e76c      	b.n	8000852 <__aeabi_fmul+0x5e>
 8000978:	230c      	movs	r3, #12
 800097a:	4699      	mov	r9, r3
 800097c:	3b09      	subs	r3, #9
 800097e:	25ff      	movs	r5, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e750      	b.n	8000826 <__aeabi_fmul+0x32>
 8000984:	0020      	movs	r0, r4
 8000986:	f001 fa3b 	bl	8001e00 <__clzsi2>
 800098a:	2576      	movs	r5, #118	; 0x76
 800098c:	1f43      	subs	r3, r0, #5
 800098e:	409c      	lsls	r4, r3
 8000990:	2300      	movs	r3, #0
 8000992:	426d      	negs	r5, r5
 8000994:	4699      	mov	r9, r3
 8000996:	469a      	mov	sl, r3
 8000998:	1a2d      	subs	r5, r5, r0
 800099a:	e744      	b.n	8000826 <__aeabi_fmul+0x32>
 800099c:	4640      	mov	r0, r8
 800099e:	f001 fa2f 	bl	8001e00 <__clzsi2>
 80009a2:	4642      	mov	r2, r8
 80009a4:	1f43      	subs	r3, r0, #5
 80009a6:	409a      	lsls	r2, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	1a2d      	subs	r5, r5, r0
 80009ac:	4690      	mov	r8, r2
 80009ae:	469c      	mov	ip, r3
 80009b0:	3d76      	subs	r5, #118	; 0x76
 80009b2:	e74e      	b.n	8000852 <__aeabi_fmul+0x5e>
 80009b4:	2480      	movs	r4, #128	; 0x80
 80009b6:	2100      	movs	r1, #0
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	03e4      	lsls	r4, r4, #15
 80009bc:	e760      	b.n	8000880 <__aeabi_fmul+0x8c>
 80009be:	2301      	movs	r3, #1
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	2b1b      	cmp	r3, #27
 80009c4:	dd00      	ble.n	80009c8 <__aeabi_fmul+0x1d4>
 80009c6:	e759      	b.n	800087c <__aeabi_fmul+0x88>
 80009c8:	0022      	movs	r2, r4
 80009ca:	309e      	adds	r0, #158	; 0x9e
 80009cc:	40da      	lsrs	r2, r3
 80009ce:	4084      	lsls	r4, r0
 80009d0:	0013      	movs	r3, r2
 80009d2:	1e62      	subs	r2, r4, #1
 80009d4:	4194      	sbcs	r4, r2
 80009d6:	431c      	orrs	r4, r3
 80009d8:	0763      	lsls	r3, r4, #29
 80009da:	d004      	beq.n	80009e6 <__aeabi_fmul+0x1f2>
 80009dc:	230f      	movs	r3, #15
 80009de:	4023      	ands	r3, r4
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fmul+0x1f2>
 80009e4:	3404      	adds	r4, #4
 80009e6:	0163      	lsls	r3, r4, #5
 80009e8:	d51a      	bpl.n	8000a20 <__aeabi_fmul+0x22c>
 80009ea:	2001      	movs	r0, #1
 80009ec:	2400      	movs	r4, #0
 80009ee:	e747      	b.n	8000880 <__aeabi_fmul+0x8c>
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	03c0      	lsls	r0, r0, #15
 80009f4:	4204      	tst	r4, r0
 80009f6:	d009      	beq.n	8000a0c <__aeabi_fmul+0x218>
 80009f8:	4643      	mov	r3, r8
 80009fa:	4203      	tst	r3, r0
 80009fc:	d106      	bne.n	8000a0c <__aeabi_fmul+0x218>
 80009fe:	4644      	mov	r4, r8
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0264      	lsls	r4, r4, #9
 8000a04:	0039      	movs	r1, r7
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	e739      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000a0c:	2080      	movs	r0, #128	; 0x80
 8000a0e:	03c0      	lsls	r0, r0, #15
 8000a10:	4304      	orrs	r4, r0
 8000a12:	0264      	lsls	r4, r4, #9
 8000a14:	0031      	movs	r1, r6
 8000a16:	20ff      	movs	r0, #255	; 0xff
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	e731      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000a1c:	0028      	movs	r0, r5
 8000a1e:	e765      	b.n	80008ec <__aeabi_fmul+0xf8>
 8000a20:	01a4      	lsls	r4, r4, #6
 8000a22:	2000      	movs	r0, #0
 8000a24:	0a64      	lsrs	r4, r4, #9
 8000a26:	e72b      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	03c0      	lsls	r0, r0, #15
 8000a2c:	4304      	orrs	r4, r0
 8000a2e:	0264      	lsls	r4, r4, #9
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	0a64      	lsrs	r4, r4, #9
 8000a34:	e724      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	08004e78 	.word	0x08004e78
 8000a3c:	f7ffffff 	.word	0xf7ffffff

08000a40 <__aeabi_fsub>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	46ce      	mov	lr, r9
 8000a44:	4647      	mov	r7, r8
 8000a46:	0243      	lsls	r3, r0, #9
 8000a48:	0a5b      	lsrs	r3, r3, #9
 8000a4a:	024e      	lsls	r6, r1, #9
 8000a4c:	00da      	lsls	r2, r3, #3
 8000a4e:	4694      	mov	ip, r2
 8000a50:	0a72      	lsrs	r2, r6, #9
 8000a52:	4691      	mov	r9, r2
 8000a54:	0045      	lsls	r5, r0, #1
 8000a56:	004a      	lsls	r2, r1, #1
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	0e2d      	lsrs	r5, r5, #24
 8000a5c:	001f      	movs	r7, r3
 8000a5e:	0fc4      	lsrs	r4, r0, #31
 8000a60:	0e12      	lsrs	r2, r2, #24
 8000a62:	0fc9      	lsrs	r1, r1, #31
 8000a64:	09b6      	lsrs	r6, r6, #6
 8000a66:	2aff      	cmp	r2, #255	; 0xff
 8000a68:	d05b      	beq.n	8000b22 <__aeabi_fsub+0xe2>
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	4041      	eors	r1, r0
 8000a6e:	428c      	cmp	r4, r1
 8000a70:	d039      	beq.n	8000ae6 <__aeabi_fsub+0xa6>
 8000a72:	1aa8      	subs	r0, r5, r2
 8000a74:	2800      	cmp	r0, #0
 8000a76:	dd5a      	ble.n	8000b2e <__aeabi_fsub+0xee>
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d06a      	beq.n	8000b52 <__aeabi_fsub+0x112>
 8000a7c:	2dff      	cmp	r5, #255	; 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fsub+0x42>
 8000a80:	e0d9      	b.n	8000c36 <__aeabi_fsub+0x1f6>
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	04d2      	lsls	r2, r2, #19
 8000a86:	4316      	orrs	r6, r2
 8000a88:	281b      	cmp	r0, #27
 8000a8a:	dc00      	bgt.n	8000a8e <__aeabi_fsub+0x4e>
 8000a8c:	e0e9      	b.n	8000c62 <__aeabi_fsub+0x222>
 8000a8e:	2001      	movs	r0, #1
 8000a90:	4663      	mov	r3, ip
 8000a92:	1a18      	subs	r0, r3, r0
 8000a94:	0143      	lsls	r3, r0, #5
 8000a96:	d400      	bmi.n	8000a9a <__aeabi_fsub+0x5a>
 8000a98:	e0b4      	b.n	8000c04 <__aeabi_fsub+0x1c4>
 8000a9a:	0180      	lsls	r0, r0, #6
 8000a9c:	0987      	lsrs	r7, r0, #6
 8000a9e:	0038      	movs	r0, r7
 8000aa0:	f001 f9ae 	bl	8001e00 <__clzsi2>
 8000aa4:	3805      	subs	r0, #5
 8000aa6:	4087      	lsls	r7, r0
 8000aa8:	4285      	cmp	r5, r0
 8000aaa:	dc00      	bgt.n	8000aae <__aeabi_fsub+0x6e>
 8000aac:	e0cc      	b.n	8000c48 <__aeabi_fsub+0x208>
 8000aae:	1a2d      	subs	r5, r5, r0
 8000ab0:	48b5      	ldr	r0, [pc, #724]	; (8000d88 <__aeabi_fsub+0x348>)
 8000ab2:	4038      	ands	r0, r7
 8000ab4:	0743      	lsls	r3, r0, #29
 8000ab6:	d004      	beq.n	8000ac2 <__aeabi_fsub+0x82>
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4003      	ands	r3, r0
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fsub+0x82>
 8000ac0:	3004      	adds	r0, #4
 8000ac2:	0143      	lsls	r3, r0, #5
 8000ac4:	d400      	bmi.n	8000ac8 <__aeabi_fsub+0x88>
 8000ac6:	e0a0      	b.n	8000c0a <__aeabi_fsub+0x1ca>
 8000ac8:	1c6a      	adds	r2, r5, #1
 8000aca:	2dfe      	cmp	r5, #254	; 0xfe
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x90>
 8000ace:	e08d      	b.n	8000bec <__aeabi_fsub+0x1ac>
 8000ad0:	0180      	lsls	r0, r0, #6
 8000ad2:	0a47      	lsrs	r7, r0, #9
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	05d0      	lsls	r0, r2, #23
 8000ad8:	4338      	orrs	r0, r7
 8000ada:	07e4      	lsls	r4, r4, #31
 8000adc:	4320      	orrs	r0, r4
 8000ade:	bcc0      	pop	{r6, r7}
 8000ae0:	46b9      	mov	r9, r7
 8000ae2:	46b0      	mov	r8, r6
 8000ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ae6:	1aa8      	subs	r0, r5, r2
 8000ae8:	4680      	mov	r8, r0
 8000aea:	2800      	cmp	r0, #0
 8000aec:	dd45      	ble.n	8000b7a <__aeabi_fsub+0x13a>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d070      	beq.n	8000bd4 <__aeabi_fsub+0x194>
 8000af2:	2dff      	cmp	r5, #255	; 0xff
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0xb8>
 8000af6:	e09e      	b.n	8000c36 <__aeabi_fsub+0x1f6>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	04db      	lsls	r3, r3, #19
 8000afc:	431e      	orrs	r6, r3
 8000afe:	4643      	mov	r3, r8
 8000b00:	2b1b      	cmp	r3, #27
 8000b02:	dc00      	bgt.n	8000b06 <__aeabi_fsub+0xc6>
 8000b04:	e0d2      	b.n	8000cac <__aeabi_fsub+0x26c>
 8000b06:	2001      	movs	r0, #1
 8000b08:	4460      	add	r0, ip
 8000b0a:	0143      	lsls	r3, r0, #5
 8000b0c:	d57a      	bpl.n	8000c04 <__aeabi_fsub+0x1c4>
 8000b0e:	3501      	adds	r5, #1
 8000b10:	2dff      	cmp	r5, #255	; 0xff
 8000b12:	d06b      	beq.n	8000bec <__aeabi_fsub+0x1ac>
 8000b14:	2301      	movs	r3, #1
 8000b16:	4a9d      	ldr	r2, [pc, #628]	; (8000d8c <__aeabi_fsub+0x34c>)
 8000b18:	4003      	ands	r3, r0
 8000b1a:	0840      	lsrs	r0, r0, #1
 8000b1c:	4010      	ands	r0, r2
 8000b1e:	4318      	orrs	r0, r3
 8000b20:	e7c8      	b.n	8000ab4 <__aeabi_fsub+0x74>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d020      	beq.n	8000b68 <__aeabi_fsub+0x128>
 8000b26:	428c      	cmp	r4, r1
 8000b28:	d023      	beq.n	8000b72 <__aeabi_fsub+0x132>
 8000b2a:	0028      	movs	r0, r5
 8000b2c:	38ff      	subs	r0, #255	; 0xff
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d039      	beq.n	8000ba6 <__aeabi_fsub+0x166>
 8000b32:	1b57      	subs	r7, r2, r5
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fsub+0xfa>
 8000b38:	e09d      	b.n	8000c76 <__aeabi_fsub+0x236>
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_fsub+0x102>
 8000b40:	e0db      	b.n	8000cfa <__aeabi_fsub+0x2ba>
 8000b42:	1e7b      	subs	r3, r7, #1
 8000b44:	2f01      	cmp	r7, #1
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fsub+0x10a>
 8000b48:	e10d      	b.n	8000d66 <__aeabi_fsub+0x326>
 8000b4a:	2fff      	cmp	r7, #255	; 0xff
 8000b4c:	d071      	beq.n	8000c32 <__aeabi_fsub+0x1f2>
 8000b4e:	001f      	movs	r7, r3
 8000b50:	e098      	b.n	8000c84 <__aeabi_fsub+0x244>
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x118>
 8000b56:	e0a7      	b.n	8000ca8 <__aeabi_fsub+0x268>
 8000b58:	1e42      	subs	r2, r0, #1
 8000b5a:	2801      	cmp	r0, #1
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_fsub+0x120>
 8000b5e:	e0e6      	b.n	8000d2e <__aeabi_fsub+0x2ee>
 8000b60:	28ff      	cmp	r0, #255	; 0xff
 8000b62:	d068      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000b64:	0010      	movs	r0, r2
 8000b66:	e78f      	b.n	8000a88 <__aeabi_fsub+0x48>
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4041      	eors	r1, r0
 8000b6c:	42a1      	cmp	r1, r4
 8000b6e:	d000      	beq.n	8000b72 <__aeabi_fsub+0x132>
 8000b70:	e77f      	b.n	8000a72 <__aeabi_fsub+0x32>
 8000b72:	20ff      	movs	r0, #255	; 0xff
 8000b74:	4240      	negs	r0, r0
 8000b76:	4680      	mov	r8, r0
 8000b78:	44a8      	add	r8, r5
 8000b7a:	4640      	mov	r0, r8
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d038      	beq.n	8000bf2 <__aeabi_fsub+0x1b2>
 8000b80:	1b51      	subs	r1, r2, r5
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x148>
 8000b86:	e0ae      	b.n	8000ce6 <__aeabi_fsub+0x2a6>
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x14e>
 8000b8c:	e0df      	b.n	8000d4e <__aeabi_fsub+0x30e>
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	4660      	mov	r0, ip
 8000b92:	04db      	lsls	r3, r3, #19
 8000b94:	4318      	orrs	r0, r3
 8000b96:	4684      	mov	ip, r0
 8000b98:	291b      	cmp	r1, #27
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_fsub+0x15e>
 8000b9c:	e0d9      	b.n	8000d52 <__aeabi_fsub+0x312>
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	0015      	movs	r5, r2
 8000ba2:	1980      	adds	r0, r0, r6
 8000ba4:	e7b1      	b.n	8000b0a <__aeabi_fsub+0xca>
 8000ba6:	20fe      	movs	r0, #254	; 0xfe
 8000ba8:	1c6a      	adds	r2, r5, #1
 8000baa:	4210      	tst	r0, r2
 8000bac:	d171      	bne.n	8000c92 <__aeabi_fsub+0x252>
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0x174>
 8000bb2:	e0a6      	b.n	8000d02 <__aeabi_fsub+0x2c2>
 8000bb4:	4663      	mov	r3, ip
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fsub+0x17c>
 8000bba:	e0d9      	b.n	8000d70 <__aeabi_fsub+0x330>
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x184>
 8000bc2:	e788      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000bc4:	1b98      	subs	r0, r3, r6
 8000bc6:	0143      	lsls	r3, r0, #5
 8000bc8:	d400      	bmi.n	8000bcc <__aeabi_fsub+0x18c>
 8000bca:	e0e1      	b.n	8000d90 <__aeabi_fsub+0x350>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	000c      	movs	r4, r1
 8000bd0:	1af0      	subs	r0, r6, r3
 8000bd2:	e76f      	b.n	8000ab4 <__aeabi_fsub+0x74>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d100      	bne.n	8000bda <__aeabi_fsub+0x19a>
 8000bd8:	e0b7      	b.n	8000d4a <__aeabi_fsub+0x30a>
 8000bda:	0002      	movs	r2, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	2801      	cmp	r0, #1
 8000be0:	d100      	bne.n	8000be4 <__aeabi_fsub+0x1a4>
 8000be2:	e09c      	b.n	8000d1e <__aeabi_fsub+0x2de>
 8000be4:	28ff      	cmp	r0, #255	; 0xff
 8000be6:	d026      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000be8:	4690      	mov	r8, r2
 8000bea:	e788      	b.n	8000afe <__aeabi_fsub+0xbe>
 8000bec:	22ff      	movs	r2, #255	; 0xff
 8000bee:	2700      	movs	r7, #0
 8000bf0:	e771      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000bf2:	20fe      	movs	r0, #254	; 0xfe
 8000bf4:	1c6a      	adds	r2, r5, #1
 8000bf6:	4210      	tst	r0, r2
 8000bf8:	d064      	beq.n	8000cc4 <__aeabi_fsub+0x284>
 8000bfa:	2aff      	cmp	r2, #255	; 0xff
 8000bfc:	d0f6      	beq.n	8000bec <__aeabi_fsub+0x1ac>
 8000bfe:	0015      	movs	r5, r2
 8000c00:	4466      	add	r6, ip
 8000c02:	0870      	lsrs	r0, r6, #1
 8000c04:	0743      	lsls	r3, r0, #29
 8000c06:	d000      	beq.n	8000c0a <__aeabi_fsub+0x1ca>
 8000c08:	e756      	b.n	8000ab8 <__aeabi_fsub+0x78>
 8000c0a:	08c3      	lsrs	r3, r0, #3
 8000c0c:	2dff      	cmp	r5, #255	; 0xff
 8000c0e:	d012      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	0a5f      	lsrs	r7, r3, #9
 8000c14:	b2ea      	uxtb	r2, r5
 8000c16:	e75e      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000c18:	4662      	mov	r2, ip
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fsub+0x1e0>
 8000c1e:	e096      	b.n	8000d4e <__aeabi_fsub+0x30e>
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d008      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	03d2      	lsls	r2, r2, #15
 8000c28:	4213      	tst	r3, r2
 8000c2a:	d004      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	4210      	tst	r0, r2
 8000c30:	d101      	bne.n	8000c36 <__aeabi_fsub+0x1f6>
 8000c32:	000c      	movs	r4, r1
 8000c34:	464b      	mov	r3, r9
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0d8      	beq.n	8000bec <__aeabi_fsub+0x1ac>
 8000c3a:	2780      	movs	r7, #128	; 0x80
 8000c3c:	03ff      	lsls	r7, r7, #15
 8000c3e:	431f      	orrs	r7, r3
 8000c40:	027f      	lsls	r7, r7, #9
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	0a7f      	lsrs	r7, r7, #9
 8000c46:	e746      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000c48:	2320      	movs	r3, #32
 8000c4a:	003a      	movs	r2, r7
 8000c4c:	1b45      	subs	r5, r0, r5
 8000c4e:	0038      	movs	r0, r7
 8000c50:	3501      	adds	r5, #1
 8000c52:	40ea      	lsrs	r2, r5
 8000c54:	1b5d      	subs	r5, r3, r5
 8000c56:	40a8      	lsls	r0, r5
 8000c58:	1e43      	subs	r3, r0, #1
 8000c5a:	4198      	sbcs	r0, r3
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4310      	orrs	r0, r2
 8000c60:	e728      	b.n	8000ab4 <__aeabi_fsub+0x74>
 8000c62:	2320      	movs	r3, #32
 8000c64:	1a1b      	subs	r3, r3, r0
 8000c66:	0032      	movs	r2, r6
 8000c68:	409e      	lsls	r6, r3
 8000c6a:	40c2      	lsrs	r2, r0
 8000c6c:	0030      	movs	r0, r6
 8000c6e:	1e43      	subs	r3, r0, #1
 8000c70:	4198      	sbcs	r0, r3
 8000c72:	4310      	orrs	r0, r2
 8000c74:	e70c      	b.n	8000a90 <__aeabi_fsub+0x50>
 8000c76:	2aff      	cmp	r2, #255	; 0xff
 8000c78:	d0db      	beq.n	8000c32 <__aeabi_fsub+0x1f2>
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	4660      	mov	r0, ip
 8000c7e:	04db      	lsls	r3, r3, #19
 8000c80:	4318      	orrs	r0, r3
 8000c82:	4684      	mov	ip, r0
 8000c84:	2f1b      	cmp	r7, #27
 8000c86:	dd56      	ble.n	8000d36 <__aeabi_fsub+0x2f6>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	000c      	movs	r4, r1
 8000c8c:	0015      	movs	r5, r2
 8000c8e:	1a30      	subs	r0, r6, r0
 8000c90:	e700      	b.n	8000a94 <__aeabi_fsub+0x54>
 8000c92:	4663      	mov	r3, ip
 8000c94:	1b9f      	subs	r7, r3, r6
 8000c96:	017b      	lsls	r3, r7, #5
 8000c98:	d43d      	bmi.n	8000d16 <__aeabi_fsub+0x2d6>
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_fsub+0x260>
 8000c9e:	e6fe      	b.n	8000a9e <__aeabi_fsub+0x5e>
 8000ca0:	2400      	movs	r4, #0
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	e716      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000ca8:	0005      	movs	r5, r0
 8000caa:	e7af      	b.n	8000c0c <__aeabi_fsub+0x1cc>
 8000cac:	0032      	movs	r2, r6
 8000cae:	4643      	mov	r3, r8
 8000cb0:	4641      	mov	r1, r8
 8000cb2:	40da      	lsrs	r2, r3
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	1a5b      	subs	r3, r3, r1
 8000cb8:	409e      	lsls	r6, r3
 8000cba:	0030      	movs	r0, r6
 8000cbc:	1e43      	subs	r3, r0, #1
 8000cbe:	4198      	sbcs	r0, r3
 8000cc0:	4310      	orrs	r0, r2
 8000cc2:	e721      	b.n	8000b08 <__aeabi_fsub+0xc8>
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d1a7      	bne.n	8000c18 <__aeabi_fsub+0x1d8>
 8000cc8:	4663      	mov	r3, ip
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d059      	beq.n	8000d82 <__aeabi_fsub+0x342>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x296>
 8000cd4:	e6ff      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000cd6:	0030      	movs	r0, r6
 8000cd8:	4460      	add	r0, ip
 8000cda:	0143      	lsls	r3, r0, #5
 8000cdc:	d592      	bpl.n	8000c04 <__aeabi_fsub+0x1c4>
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <__aeabi_fsub+0x348>)
 8000ce0:	3501      	adds	r5, #1
 8000ce2:	4018      	ands	r0, r3
 8000ce4:	e78e      	b.n	8000c04 <__aeabi_fsub+0x1c4>
 8000ce6:	4663      	mov	r3, ip
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d047      	beq.n	8000d7c <__aeabi_fsub+0x33c>
 8000cec:	1e4b      	subs	r3, r1, #1
 8000cee:	2901      	cmp	r1, #1
 8000cf0:	d015      	beq.n	8000d1e <__aeabi_fsub+0x2de>
 8000cf2:	29ff      	cmp	r1, #255	; 0xff
 8000cf4:	d02b      	beq.n	8000d4e <__aeabi_fsub+0x30e>
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	e74e      	b.n	8000b98 <__aeabi_fsub+0x158>
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	003d      	movs	r5, r7
 8000d00:	e784      	b.n	8000c0c <__aeabi_fsub+0x1cc>
 8000d02:	4662      	mov	r2, ip
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d18b      	bne.n	8000c20 <__aeabi_fsub+0x1e0>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d192      	bne.n	8000c32 <__aeabi_fsub+0x1f2>
 8000d0c:	2780      	movs	r7, #128	; 0x80
 8000d0e:	2400      	movs	r4, #0
 8000d10:	22ff      	movs	r2, #255	; 0xff
 8000d12:	03ff      	lsls	r7, r7, #15
 8000d14:	e6df      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000d16:	4663      	mov	r3, ip
 8000d18:	000c      	movs	r4, r1
 8000d1a:	1af7      	subs	r7, r6, r3
 8000d1c:	e6bf      	b.n	8000a9e <__aeabi_fsub+0x5e>
 8000d1e:	0030      	movs	r0, r6
 8000d20:	4460      	add	r0, ip
 8000d22:	2501      	movs	r5, #1
 8000d24:	0143      	lsls	r3, r0, #5
 8000d26:	d400      	bmi.n	8000d2a <__aeabi_fsub+0x2ea>
 8000d28:	e76c      	b.n	8000c04 <__aeabi_fsub+0x1c4>
 8000d2a:	2502      	movs	r5, #2
 8000d2c:	e6f2      	b.n	8000b14 <__aeabi_fsub+0xd4>
 8000d2e:	4663      	mov	r3, ip
 8000d30:	2501      	movs	r5, #1
 8000d32:	1b98      	subs	r0, r3, r6
 8000d34:	e6ae      	b.n	8000a94 <__aeabi_fsub+0x54>
 8000d36:	2320      	movs	r3, #32
 8000d38:	4664      	mov	r4, ip
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	40fc      	lsrs	r4, r7
 8000d3e:	1bdf      	subs	r7, r3, r7
 8000d40:	40b8      	lsls	r0, r7
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	4320      	orrs	r0, r4
 8000d48:	e79f      	b.n	8000c8a <__aeabi_fsub+0x24a>
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	e75e      	b.n	8000c0c <__aeabi_fsub+0x1cc>
 8000d4e:	464b      	mov	r3, r9
 8000d50:	e771      	b.n	8000c36 <__aeabi_fsub+0x1f6>
 8000d52:	2320      	movs	r3, #32
 8000d54:	4665      	mov	r5, ip
 8000d56:	4660      	mov	r0, ip
 8000d58:	40cd      	lsrs	r5, r1
 8000d5a:	1a59      	subs	r1, r3, r1
 8000d5c:	4088      	lsls	r0, r1
 8000d5e:	1e43      	subs	r3, r0, #1
 8000d60:	4198      	sbcs	r0, r3
 8000d62:	4328      	orrs	r0, r5
 8000d64:	e71c      	b.n	8000ba0 <__aeabi_fsub+0x160>
 8000d66:	4663      	mov	r3, ip
 8000d68:	000c      	movs	r4, r1
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	1af0      	subs	r0, r6, r3
 8000d6e:	e691      	b.n	8000a94 <__aeabi_fsub+0x54>
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d095      	beq.n	8000ca0 <__aeabi_fsub+0x260>
 8000d74:	000c      	movs	r4, r1
 8000d76:	464f      	mov	r7, r9
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e6ac      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	000d      	movs	r5, r1
 8000d80:	e744      	b.n	8000c0c <__aeabi_fsub+0x1cc>
 8000d82:	464f      	mov	r7, r9
 8000d84:	2200      	movs	r2, #0
 8000d86:	e6a6      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000d88:	fbffffff 	.word	0xfbffffff
 8000d8c:	7dffffff 	.word	0x7dffffff
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fsub+0x356>
 8000d94:	e736      	b.n	8000c04 <__aeabi_fsub+0x1c4>
 8000d96:	2400      	movs	r4, #0
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e69c      	b.n	8000ad6 <__aeabi_fsub+0x96>

08000d9c <__aeabi_f2iz>:
 8000d9c:	0241      	lsls	r1, r0, #9
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0fc3      	lsrs	r3, r0, #31
 8000da2:	0a49      	lsrs	r1, r1, #9
 8000da4:	2000      	movs	r0, #0
 8000da6:	0e12      	lsrs	r2, r2, #24
 8000da8:	2a7e      	cmp	r2, #126	; 0x7e
 8000daa:	dd03      	ble.n	8000db4 <__aeabi_f2iz+0x18>
 8000dac:	2a9d      	cmp	r2, #157	; 0x9d
 8000dae:	dd02      	ble.n	8000db6 <__aeabi_f2iz+0x1a>
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <__aeabi_f2iz+0x3c>)
 8000db2:	1898      	adds	r0, r3, r2
 8000db4:	4770      	bx	lr
 8000db6:	2080      	movs	r0, #128	; 0x80
 8000db8:	0400      	lsls	r0, r0, #16
 8000dba:	4301      	orrs	r1, r0
 8000dbc:	2a95      	cmp	r2, #149	; 0x95
 8000dbe:	dc07      	bgt.n	8000dd0 <__aeabi_f2iz+0x34>
 8000dc0:	2096      	movs	r0, #150	; 0x96
 8000dc2:	1a82      	subs	r2, r0, r2
 8000dc4:	40d1      	lsrs	r1, r2
 8000dc6:	4248      	negs	r0, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_f2iz+0x18>
 8000dcc:	0008      	movs	r0, r1
 8000dce:	e7f1      	b.n	8000db4 <__aeabi_f2iz+0x18>
 8000dd0:	3a96      	subs	r2, #150	; 0x96
 8000dd2:	4091      	lsls	r1, r2
 8000dd4:	e7f7      	b.n	8000dc6 <__aeabi_f2iz+0x2a>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	7fffffff 	.word	0x7fffffff

08000ddc <__aeabi_i2f>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d013      	beq.n	8000e0a <__aeabi_i2f+0x2e>
 8000de2:	17c3      	asrs	r3, r0, #31
 8000de4:	18c6      	adds	r6, r0, r3
 8000de6:	405e      	eors	r6, r3
 8000de8:	0fc4      	lsrs	r4, r0, #31
 8000dea:	0030      	movs	r0, r6
 8000dec:	f001 f808 	bl	8001e00 <__clzsi2>
 8000df0:	239e      	movs	r3, #158	; 0x9e
 8000df2:	0005      	movs	r5, r0
 8000df4:	1a1b      	subs	r3, r3, r0
 8000df6:	2b96      	cmp	r3, #150	; 0x96
 8000df8:	dc0f      	bgt.n	8000e1a <__aeabi_i2f+0x3e>
 8000dfa:	2808      	cmp	r0, #8
 8000dfc:	dd01      	ble.n	8000e02 <__aeabi_i2f+0x26>
 8000dfe:	3d08      	subs	r5, #8
 8000e00:	40ae      	lsls	r6, r5
 8000e02:	0276      	lsls	r6, r6, #9
 8000e04:	0a76      	lsrs	r6, r6, #9
 8000e06:	b2d8      	uxtb	r0, r3
 8000e08:	e002      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	2600      	movs	r6, #0
 8000e10:	05c0      	lsls	r0, r0, #23
 8000e12:	4330      	orrs	r0, r6
 8000e14:	07e4      	lsls	r4, r4, #31
 8000e16:	4320      	orrs	r0, r4
 8000e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e1a:	2b99      	cmp	r3, #153	; 0x99
 8000e1c:	dd0c      	ble.n	8000e38 <__aeabi_i2f+0x5c>
 8000e1e:	2205      	movs	r2, #5
 8000e20:	0031      	movs	r1, r6
 8000e22:	1a12      	subs	r2, r2, r0
 8000e24:	40d1      	lsrs	r1, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	0001      	movs	r1, r0
 8000e2a:	0030      	movs	r0, r6
 8000e2c:	311b      	adds	r1, #27
 8000e2e:	4088      	lsls	r0, r1
 8000e30:	1e41      	subs	r1, r0, #1
 8000e32:	4188      	sbcs	r0, r1
 8000e34:	4302      	orrs	r2, r0
 8000e36:	0016      	movs	r6, r2
 8000e38:	2d05      	cmp	r5, #5
 8000e3a:	dc12      	bgt.n	8000e62 <__aeabi_i2f+0x86>
 8000e3c:	0031      	movs	r1, r6
 8000e3e:	4f0d      	ldr	r7, [pc, #52]	; (8000e74 <__aeabi_i2f+0x98>)
 8000e40:	4039      	ands	r1, r7
 8000e42:	0772      	lsls	r2, r6, #29
 8000e44:	d009      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e46:	200f      	movs	r0, #15
 8000e48:	4030      	ands	r0, r6
 8000e4a:	2804      	cmp	r0, #4
 8000e4c:	d005      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e4e:	3104      	adds	r1, #4
 8000e50:	014a      	lsls	r2, r1, #5
 8000e52:	d502      	bpl.n	8000e5a <__aeabi_i2f+0x7e>
 8000e54:	239f      	movs	r3, #159	; 0x9f
 8000e56:	4039      	ands	r1, r7
 8000e58:	1b5b      	subs	r3, r3, r5
 8000e5a:	0189      	lsls	r1, r1, #6
 8000e5c:	0a4e      	lsrs	r6, r1, #9
 8000e5e:	b2d8      	uxtb	r0, r3
 8000e60:	e7d6      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e62:	1f6a      	subs	r2, r5, #5
 8000e64:	4096      	lsls	r6, r2
 8000e66:	0031      	movs	r1, r6
 8000e68:	4f02      	ldr	r7, [pc, #8]	; (8000e74 <__aeabi_i2f+0x98>)
 8000e6a:	4039      	ands	r1, r7
 8000e6c:	0772      	lsls	r2, r6, #29
 8000e6e:	d0f4      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e70:	e7e9      	b.n	8000e46 <__aeabi_i2f+0x6a>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	fbffffff 	.word	0xfbffffff

08000e78 <__aeabi_dadd>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	464f      	mov	r7, r9
 8000e7c:	4646      	mov	r6, r8
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	000d      	movs	r5, r1
 8000e82:	0004      	movs	r4, r0
 8000e84:	b5c0      	push	{r6, r7, lr}
 8000e86:	001f      	movs	r7, r3
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0328      	lsls	r0, r5, #12
 8000e8c:	0f62      	lsrs	r2, r4, #29
 8000e8e:	0a40      	lsrs	r0, r0, #9
 8000e90:	4310      	orrs	r0, r2
 8000e92:	007a      	lsls	r2, r7, #1
 8000e94:	0d52      	lsrs	r2, r2, #21
 8000e96:	00e3      	lsls	r3, r4, #3
 8000e98:	033c      	lsls	r4, r7, #12
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	0a64      	lsrs	r4, r4, #9
 8000e9e:	0ffa      	lsrs	r2, r7, #31
 8000ea0:	0f4f      	lsrs	r7, r1, #29
 8000ea2:	006e      	lsls	r6, r5, #1
 8000ea4:	4327      	orrs	r7, r4
 8000ea6:	4692      	mov	sl, r2
 8000ea8:	46b8      	mov	r8, r7
 8000eaa:	0d76      	lsrs	r6, r6, #21
 8000eac:	0fed      	lsrs	r5, r5, #31
 8000eae:	00c9      	lsls	r1, r1, #3
 8000eb0:	4295      	cmp	r5, r2
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dadd+0x3e>
 8000eb4:	e099      	b.n	8000fea <__aeabi_dadd+0x172>
 8000eb6:	464c      	mov	r4, r9
 8000eb8:	1b34      	subs	r4, r6, r4
 8000eba:	46a4      	mov	ip, r4
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	dc00      	bgt.n	8000ec2 <__aeabi_dadd+0x4a>
 8000ec0:	e07c      	b.n	8000fbc <__aeabi_dadd+0x144>
 8000ec2:	464a      	mov	r2, r9
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dadd+0x52>
 8000ec8:	e0b8      	b.n	800103c <__aeabi_dadd+0x1c4>
 8000eca:	4ac5      	ldr	r2, [pc, #788]	; (80011e0 <__aeabi_dadd+0x368>)
 8000ecc:	4296      	cmp	r6, r2
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_dadd+0x5a>
 8000ed0:	e11c      	b.n	800110c <__aeabi_dadd+0x294>
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	003c      	movs	r4, r7
 8000ed6:	0412      	lsls	r2, r2, #16
 8000ed8:	4314      	orrs	r4, r2
 8000eda:	46a0      	mov	r8, r4
 8000edc:	4662      	mov	r2, ip
 8000ede:	2a38      	cmp	r2, #56	; 0x38
 8000ee0:	dd00      	ble.n	8000ee4 <__aeabi_dadd+0x6c>
 8000ee2:	e161      	b.n	80011a8 <__aeabi_dadd+0x330>
 8000ee4:	2a1f      	cmp	r2, #31
 8000ee6:	dd00      	ble.n	8000eea <__aeabi_dadd+0x72>
 8000ee8:	e1cc      	b.n	8001284 <__aeabi_dadd+0x40c>
 8000eea:	4664      	mov	r4, ip
 8000eec:	2220      	movs	r2, #32
 8000eee:	1b12      	subs	r2, r2, r4
 8000ef0:	4644      	mov	r4, r8
 8000ef2:	4094      	lsls	r4, r2
 8000ef4:	000f      	movs	r7, r1
 8000ef6:	46a1      	mov	r9, r4
 8000ef8:	4664      	mov	r4, ip
 8000efa:	4091      	lsls	r1, r2
 8000efc:	40e7      	lsrs	r7, r4
 8000efe:	464c      	mov	r4, r9
 8000f00:	1e4a      	subs	r2, r1, #1
 8000f02:	4191      	sbcs	r1, r2
 8000f04:	433c      	orrs	r4, r7
 8000f06:	4642      	mov	r2, r8
 8000f08:	4321      	orrs	r1, r4
 8000f0a:	4664      	mov	r4, ip
 8000f0c:	40e2      	lsrs	r2, r4
 8000f0e:	1a80      	subs	r0, r0, r2
 8000f10:	1a5c      	subs	r4, r3, r1
 8000f12:	42a3      	cmp	r3, r4
 8000f14:	419b      	sbcs	r3, r3
 8000f16:	425f      	negs	r7, r3
 8000f18:	1bc7      	subs	r7, r0, r7
 8000f1a:	023b      	lsls	r3, r7, #8
 8000f1c:	d400      	bmi.n	8000f20 <__aeabi_dadd+0xa8>
 8000f1e:	e0d0      	b.n	80010c2 <__aeabi_dadd+0x24a>
 8000f20:	027f      	lsls	r7, r7, #9
 8000f22:	0a7f      	lsrs	r7, r7, #9
 8000f24:	2f00      	cmp	r7, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0xb2>
 8000f28:	e0ff      	b.n	800112a <__aeabi_dadd+0x2b2>
 8000f2a:	0038      	movs	r0, r7
 8000f2c:	f000 ff68 	bl	8001e00 <__clzsi2>
 8000f30:	0001      	movs	r1, r0
 8000f32:	3908      	subs	r1, #8
 8000f34:	2320      	movs	r3, #32
 8000f36:	0022      	movs	r2, r4
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	408f      	lsls	r7, r1
 8000f3c:	40da      	lsrs	r2, r3
 8000f3e:	408c      	lsls	r4, r1
 8000f40:	4317      	orrs	r7, r2
 8000f42:	42b1      	cmp	r1, r6
 8000f44:	da00      	bge.n	8000f48 <__aeabi_dadd+0xd0>
 8000f46:	e0ff      	b.n	8001148 <__aeabi_dadd+0x2d0>
 8000f48:	1b89      	subs	r1, r1, r6
 8000f4a:	1c4b      	adds	r3, r1, #1
 8000f4c:	2b1f      	cmp	r3, #31
 8000f4e:	dd00      	ble.n	8000f52 <__aeabi_dadd+0xda>
 8000f50:	e0a8      	b.n	80010a4 <__aeabi_dadd+0x22c>
 8000f52:	2220      	movs	r2, #32
 8000f54:	0039      	movs	r1, r7
 8000f56:	1ad2      	subs	r2, r2, r3
 8000f58:	0020      	movs	r0, r4
 8000f5a:	4094      	lsls	r4, r2
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	40d8      	lsrs	r0, r3
 8000f60:	1e62      	subs	r2, r4, #1
 8000f62:	4194      	sbcs	r4, r2
 8000f64:	40df      	lsrs	r7, r3
 8000f66:	2600      	movs	r6, #0
 8000f68:	4301      	orrs	r1, r0
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	0763      	lsls	r3, r4, #29
 8000f6e:	d009      	beq.n	8000f84 <__aeabi_dadd+0x10c>
 8000f70:	230f      	movs	r3, #15
 8000f72:	4023      	ands	r3, r4
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d005      	beq.n	8000f84 <__aeabi_dadd+0x10c>
 8000f78:	1d23      	adds	r3, r4, #4
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	41a4      	sbcs	r4, r4
 8000f7e:	4264      	negs	r4, r4
 8000f80:	193f      	adds	r7, r7, r4
 8000f82:	001c      	movs	r4, r3
 8000f84:	023b      	lsls	r3, r7, #8
 8000f86:	d400      	bmi.n	8000f8a <__aeabi_dadd+0x112>
 8000f88:	e09e      	b.n	80010c8 <__aeabi_dadd+0x250>
 8000f8a:	4b95      	ldr	r3, [pc, #596]	; (80011e0 <__aeabi_dadd+0x368>)
 8000f8c:	3601      	adds	r6, #1
 8000f8e:	429e      	cmp	r6, r3
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x11c>
 8000f92:	e0b7      	b.n	8001104 <__aeabi_dadd+0x28c>
 8000f94:	4a93      	ldr	r2, [pc, #588]	; (80011e4 <__aeabi_dadd+0x36c>)
 8000f96:	08e4      	lsrs	r4, r4, #3
 8000f98:	4017      	ands	r7, r2
 8000f9a:	077b      	lsls	r3, r7, #29
 8000f9c:	0571      	lsls	r1, r6, #21
 8000f9e:	027f      	lsls	r7, r7, #9
 8000fa0:	4323      	orrs	r3, r4
 8000fa2:	0b3f      	lsrs	r7, r7, #12
 8000fa4:	0d4a      	lsrs	r2, r1, #21
 8000fa6:	0512      	lsls	r2, r2, #20
 8000fa8:	433a      	orrs	r2, r7
 8000faa:	07ed      	lsls	r5, r5, #31
 8000fac:	432a      	orrs	r2, r5
 8000fae:	0018      	movs	r0, r3
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	bce0      	pop	{r5, r6, r7}
 8000fb4:	46ba      	mov	sl, r7
 8000fb6:	46b1      	mov	r9, r6
 8000fb8:	46a8      	mov	r8, r5
 8000fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fbc:	2c00      	cmp	r4, #0
 8000fbe:	d04b      	beq.n	8001058 <__aeabi_dadd+0x1e0>
 8000fc0:	464c      	mov	r4, r9
 8000fc2:	1ba4      	subs	r4, r4, r6
 8000fc4:	46a4      	mov	ip, r4
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_dadd+0x154>
 8000fca:	e123      	b.n	8001214 <__aeabi_dadd+0x39c>
 8000fcc:	0004      	movs	r4, r0
 8000fce:	431c      	orrs	r4, r3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dadd+0x15c>
 8000fd2:	e1af      	b.n	8001334 <__aeabi_dadd+0x4bc>
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	1e54      	subs	r4, r2, #1
 8000fd8:	2a01      	cmp	r2, #1
 8000fda:	d100      	bne.n	8000fde <__aeabi_dadd+0x166>
 8000fdc:	e215      	b.n	800140a <__aeabi_dadd+0x592>
 8000fde:	4d80      	ldr	r5, [pc, #512]	; (80011e0 <__aeabi_dadd+0x368>)
 8000fe0:	45ac      	cmp	ip, r5
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x16e>
 8000fe4:	e1c8      	b.n	8001378 <__aeabi_dadd+0x500>
 8000fe6:	46a4      	mov	ip, r4
 8000fe8:	e11b      	b.n	8001222 <__aeabi_dadd+0x3aa>
 8000fea:	464a      	mov	r2, r9
 8000fec:	1ab2      	subs	r2, r6, r2
 8000fee:	4694      	mov	ip, r2
 8000ff0:	2a00      	cmp	r2, #0
 8000ff2:	dc00      	bgt.n	8000ff6 <__aeabi_dadd+0x17e>
 8000ff4:	e0ac      	b.n	8001150 <__aeabi_dadd+0x2d8>
 8000ff6:	464a      	mov	r2, r9
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d043      	beq.n	8001084 <__aeabi_dadd+0x20c>
 8000ffc:	4a78      	ldr	r2, [pc, #480]	; (80011e0 <__aeabi_dadd+0x368>)
 8000ffe:	4296      	cmp	r6, r2
 8001000:	d100      	bne.n	8001004 <__aeabi_dadd+0x18c>
 8001002:	e1af      	b.n	8001364 <__aeabi_dadd+0x4ec>
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	003c      	movs	r4, r7
 8001008:	0412      	lsls	r2, r2, #16
 800100a:	4314      	orrs	r4, r2
 800100c:	46a0      	mov	r8, r4
 800100e:	4662      	mov	r2, ip
 8001010:	2a38      	cmp	r2, #56	; 0x38
 8001012:	dc67      	bgt.n	80010e4 <__aeabi_dadd+0x26c>
 8001014:	2a1f      	cmp	r2, #31
 8001016:	dc00      	bgt.n	800101a <__aeabi_dadd+0x1a2>
 8001018:	e15f      	b.n	80012da <__aeabi_dadd+0x462>
 800101a:	4647      	mov	r7, r8
 800101c:	3a20      	subs	r2, #32
 800101e:	40d7      	lsrs	r7, r2
 8001020:	4662      	mov	r2, ip
 8001022:	2a20      	cmp	r2, #32
 8001024:	d005      	beq.n	8001032 <__aeabi_dadd+0x1ba>
 8001026:	4664      	mov	r4, ip
 8001028:	2240      	movs	r2, #64	; 0x40
 800102a:	1b12      	subs	r2, r2, r4
 800102c:	4644      	mov	r4, r8
 800102e:	4094      	lsls	r4, r2
 8001030:	4321      	orrs	r1, r4
 8001032:	1e4a      	subs	r2, r1, #1
 8001034:	4191      	sbcs	r1, r2
 8001036:	000c      	movs	r4, r1
 8001038:	433c      	orrs	r4, r7
 800103a:	e057      	b.n	80010ec <__aeabi_dadd+0x274>
 800103c:	003a      	movs	r2, r7
 800103e:	430a      	orrs	r2, r1
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0x1cc>
 8001042:	e105      	b.n	8001250 <__aeabi_dadd+0x3d8>
 8001044:	0022      	movs	r2, r4
 8001046:	3a01      	subs	r2, #1
 8001048:	2c01      	cmp	r4, #1
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x1d6>
 800104c:	e182      	b.n	8001354 <__aeabi_dadd+0x4dc>
 800104e:	4c64      	ldr	r4, [pc, #400]	; (80011e0 <__aeabi_dadd+0x368>)
 8001050:	45a4      	cmp	ip, r4
 8001052:	d05b      	beq.n	800110c <__aeabi_dadd+0x294>
 8001054:	4694      	mov	ip, r2
 8001056:	e741      	b.n	8000edc <__aeabi_dadd+0x64>
 8001058:	4c63      	ldr	r4, [pc, #396]	; (80011e8 <__aeabi_dadd+0x370>)
 800105a:	1c77      	adds	r7, r6, #1
 800105c:	4227      	tst	r7, r4
 800105e:	d000      	beq.n	8001062 <__aeabi_dadd+0x1ea>
 8001060:	e0c4      	b.n	80011ec <__aeabi_dadd+0x374>
 8001062:	0004      	movs	r4, r0
 8001064:	431c      	orrs	r4, r3
 8001066:	2e00      	cmp	r6, #0
 8001068:	d000      	beq.n	800106c <__aeabi_dadd+0x1f4>
 800106a:	e169      	b.n	8001340 <__aeabi_dadd+0x4c8>
 800106c:	2c00      	cmp	r4, #0
 800106e:	d100      	bne.n	8001072 <__aeabi_dadd+0x1fa>
 8001070:	e1bf      	b.n	80013f2 <__aeabi_dadd+0x57a>
 8001072:	4644      	mov	r4, r8
 8001074:	430c      	orrs	r4, r1
 8001076:	d000      	beq.n	800107a <__aeabi_dadd+0x202>
 8001078:	e1d0      	b.n	800141c <__aeabi_dadd+0x5a4>
 800107a:	0742      	lsls	r2, r0, #29
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	4313      	orrs	r3, r2
 8001080:	08c0      	lsrs	r0, r0, #3
 8001082:	e029      	b.n	80010d8 <__aeabi_dadd+0x260>
 8001084:	003a      	movs	r2, r7
 8001086:	430a      	orrs	r2, r1
 8001088:	d100      	bne.n	800108c <__aeabi_dadd+0x214>
 800108a:	e170      	b.n	800136e <__aeabi_dadd+0x4f6>
 800108c:	4662      	mov	r2, ip
 800108e:	4664      	mov	r4, ip
 8001090:	3a01      	subs	r2, #1
 8001092:	2c01      	cmp	r4, #1
 8001094:	d100      	bne.n	8001098 <__aeabi_dadd+0x220>
 8001096:	e0e0      	b.n	800125a <__aeabi_dadd+0x3e2>
 8001098:	4c51      	ldr	r4, [pc, #324]	; (80011e0 <__aeabi_dadd+0x368>)
 800109a:	45a4      	cmp	ip, r4
 800109c:	d100      	bne.n	80010a0 <__aeabi_dadd+0x228>
 800109e:	e161      	b.n	8001364 <__aeabi_dadd+0x4ec>
 80010a0:	4694      	mov	ip, r2
 80010a2:	e7b4      	b.n	800100e <__aeabi_dadd+0x196>
 80010a4:	003a      	movs	r2, r7
 80010a6:	391f      	subs	r1, #31
 80010a8:	40ca      	lsrs	r2, r1
 80010aa:	0011      	movs	r1, r2
 80010ac:	2b20      	cmp	r3, #32
 80010ae:	d003      	beq.n	80010b8 <__aeabi_dadd+0x240>
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	409f      	lsls	r7, r3
 80010b6:	433c      	orrs	r4, r7
 80010b8:	1e63      	subs	r3, r4, #1
 80010ba:	419c      	sbcs	r4, r3
 80010bc:	2700      	movs	r7, #0
 80010be:	2600      	movs	r6, #0
 80010c0:	430c      	orrs	r4, r1
 80010c2:	0763      	lsls	r3, r4, #29
 80010c4:	d000      	beq.n	80010c8 <__aeabi_dadd+0x250>
 80010c6:	e753      	b.n	8000f70 <__aeabi_dadd+0xf8>
 80010c8:	46b4      	mov	ip, r6
 80010ca:	08e4      	lsrs	r4, r4, #3
 80010cc:	077b      	lsls	r3, r7, #29
 80010ce:	4323      	orrs	r3, r4
 80010d0:	08f8      	lsrs	r0, r7, #3
 80010d2:	4a43      	ldr	r2, [pc, #268]	; (80011e0 <__aeabi_dadd+0x368>)
 80010d4:	4594      	cmp	ip, r2
 80010d6:	d01d      	beq.n	8001114 <__aeabi_dadd+0x29c>
 80010d8:	4662      	mov	r2, ip
 80010da:	0307      	lsls	r7, r0, #12
 80010dc:	0552      	lsls	r2, r2, #21
 80010de:	0b3f      	lsrs	r7, r7, #12
 80010e0:	0d52      	lsrs	r2, r2, #21
 80010e2:	e760      	b.n	8000fa6 <__aeabi_dadd+0x12e>
 80010e4:	4644      	mov	r4, r8
 80010e6:	430c      	orrs	r4, r1
 80010e8:	1e62      	subs	r2, r4, #1
 80010ea:	4194      	sbcs	r4, r2
 80010ec:	18e4      	adds	r4, r4, r3
 80010ee:	429c      	cmp	r4, r3
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	425f      	negs	r7, r3
 80010f4:	183f      	adds	r7, r7, r0
 80010f6:	023b      	lsls	r3, r7, #8
 80010f8:	d5e3      	bpl.n	80010c2 <__aeabi_dadd+0x24a>
 80010fa:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <__aeabi_dadd+0x368>)
 80010fc:	3601      	adds	r6, #1
 80010fe:	429e      	cmp	r6, r3
 8001100:	d000      	beq.n	8001104 <__aeabi_dadd+0x28c>
 8001102:	e0b5      	b.n	8001270 <__aeabi_dadd+0x3f8>
 8001104:	0032      	movs	r2, r6
 8001106:	2700      	movs	r7, #0
 8001108:	2300      	movs	r3, #0
 800110a:	e74c      	b.n	8000fa6 <__aeabi_dadd+0x12e>
 800110c:	0742      	lsls	r2, r0, #29
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	4313      	orrs	r3, r2
 8001112:	08c0      	lsrs	r0, r0, #3
 8001114:	001a      	movs	r2, r3
 8001116:	4302      	orrs	r2, r0
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x2a4>
 800111a:	e1e1      	b.n	80014e0 <__aeabi_dadd+0x668>
 800111c:	2780      	movs	r7, #128	; 0x80
 800111e:	033f      	lsls	r7, r7, #12
 8001120:	4307      	orrs	r7, r0
 8001122:	033f      	lsls	r7, r7, #12
 8001124:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <__aeabi_dadd+0x368>)
 8001126:	0b3f      	lsrs	r7, r7, #12
 8001128:	e73d      	b.n	8000fa6 <__aeabi_dadd+0x12e>
 800112a:	0020      	movs	r0, r4
 800112c:	f000 fe68 	bl	8001e00 <__clzsi2>
 8001130:	0001      	movs	r1, r0
 8001132:	3118      	adds	r1, #24
 8001134:	291f      	cmp	r1, #31
 8001136:	dc00      	bgt.n	800113a <__aeabi_dadd+0x2c2>
 8001138:	e6fc      	b.n	8000f34 <__aeabi_dadd+0xbc>
 800113a:	3808      	subs	r0, #8
 800113c:	4084      	lsls	r4, r0
 800113e:	0027      	movs	r7, r4
 8001140:	2400      	movs	r4, #0
 8001142:	42b1      	cmp	r1, r6
 8001144:	db00      	blt.n	8001148 <__aeabi_dadd+0x2d0>
 8001146:	e6ff      	b.n	8000f48 <__aeabi_dadd+0xd0>
 8001148:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <__aeabi_dadd+0x36c>)
 800114a:	1a76      	subs	r6, r6, r1
 800114c:	4017      	ands	r7, r2
 800114e:	e70d      	b.n	8000f6c <__aeabi_dadd+0xf4>
 8001150:	2a00      	cmp	r2, #0
 8001152:	d02f      	beq.n	80011b4 <__aeabi_dadd+0x33c>
 8001154:	464a      	mov	r2, r9
 8001156:	1b92      	subs	r2, r2, r6
 8001158:	4694      	mov	ip, r2
 800115a:	2e00      	cmp	r6, #0
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x2e8>
 800115e:	e0ad      	b.n	80012bc <__aeabi_dadd+0x444>
 8001160:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <__aeabi_dadd+0x368>)
 8001162:	4591      	cmp	r9, r2
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0x2f0>
 8001166:	e10f      	b.n	8001388 <__aeabi_dadd+0x510>
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	0412      	lsls	r2, r2, #16
 800116c:	4310      	orrs	r0, r2
 800116e:	4662      	mov	r2, ip
 8001170:	2a38      	cmp	r2, #56	; 0x38
 8001172:	dd00      	ble.n	8001176 <__aeabi_dadd+0x2fe>
 8001174:	e10f      	b.n	8001396 <__aeabi_dadd+0x51e>
 8001176:	2a1f      	cmp	r2, #31
 8001178:	dd00      	ble.n	800117c <__aeabi_dadd+0x304>
 800117a:	e180      	b.n	800147e <__aeabi_dadd+0x606>
 800117c:	4664      	mov	r4, ip
 800117e:	2220      	movs	r2, #32
 8001180:	001e      	movs	r6, r3
 8001182:	1b12      	subs	r2, r2, r4
 8001184:	4667      	mov	r7, ip
 8001186:	0004      	movs	r4, r0
 8001188:	4093      	lsls	r3, r2
 800118a:	4094      	lsls	r4, r2
 800118c:	40fe      	lsrs	r6, r7
 800118e:	1e5a      	subs	r2, r3, #1
 8001190:	4193      	sbcs	r3, r2
 8001192:	40f8      	lsrs	r0, r7
 8001194:	4334      	orrs	r4, r6
 8001196:	431c      	orrs	r4, r3
 8001198:	4480      	add	r8, r0
 800119a:	1864      	adds	r4, r4, r1
 800119c:	428c      	cmp	r4, r1
 800119e:	41bf      	sbcs	r7, r7
 80011a0:	427f      	negs	r7, r7
 80011a2:	464e      	mov	r6, r9
 80011a4:	4447      	add	r7, r8
 80011a6:	e7a6      	b.n	80010f6 <__aeabi_dadd+0x27e>
 80011a8:	4642      	mov	r2, r8
 80011aa:	430a      	orrs	r2, r1
 80011ac:	0011      	movs	r1, r2
 80011ae:	1e4a      	subs	r2, r1, #1
 80011b0:	4191      	sbcs	r1, r2
 80011b2:	e6ad      	b.n	8000f10 <__aeabi_dadd+0x98>
 80011b4:	4c0c      	ldr	r4, [pc, #48]	; (80011e8 <__aeabi_dadd+0x370>)
 80011b6:	1c72      	adds	r2, r6, #1
 80011b8:	4222      	tst	r2, r4
 80011ba:	d000      	beq.n	80011be <__aeabi_dadd+0x346>
 80011bc:	e0a1      	b.n	8001302 <__aeabi_dadd+0x48a>
 80011be:	0002      	movs	r2, r0
 80011c0:	431a      	orrs	r2, r3
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d000      	beq.n	80011c8 <__aeabi_dadd+0x350>
 80011c6:	e0fa      	b.n	80013be <__aeabi_dadd+0x546>
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x356>
 80011cc:	e145      	b.n	800145a <__aeabi_dadd+0x5e2>
 80011ce:	003a      	movs	r2, r7
 80011d0:	430a      	orrs	r2, r1
 80011d2:	d000      	beq.n	80011d6 <__aeabi_dadd+0x35e>
 80011d4:	e146      	b.n	8001464 <__aeabi_dadd+0x5ec>
 80011d6:	0742      	lsls	r2, r0, #29
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	4313      	orrs	r3, r2
 80011dc:	08c0      	lsrs	r0, r0, #3
 80011de:	e77b      	b.n	80010d8 <__aeabi_dadd+0x260>
 80011e0:	000007ff 	.word	0x000007ff
 80011e4:	ff7fffff 	.word	0xff7fffff
 80011e8:	000007fe 	.word	0x000007fe
 80011ec:	4647      	mov	r7, r8
 80011ee:	1a5c      	subs	r4, r3, r1
 80011f0:	1bc2      	subs	r2, r0, r7
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	41bf      	sbcs	r7, r7
 80011f6:	427f      	negs	r7, r7
 80011f8:	46b9      	mov	r9, r7
 80011fa:	0017      	movs	r7, r2
 80011fc:	464a      	mov	r2, r9
 80011fe:	1abf      	subs	r7, r7, r2
 8001200:	023a      	lsls	r2, r7, #8
 8001202:	d500      	bpl.n	8001206 <__aeabi_dadd+0x38e>
 8001204:	e08d      	b.n	8001322 <__aeabi_dadd+0x4aa>
 8001206:	0023      	movs	r3, r4
 8001208:	433b      	orrs	r3, r7
 800120a:	d000      	beq.n	800120e <__aeabi_dadd+0x396>
 800120c:	e68a      	b.n	8000f24 <__aeabi_dadd+0xac>
 800120e:	2000      	movs	r0, #0
 8001210:	2500      	movs	r5, #0
 8001212:	e761      	b.n	80010d8 <__aeabi_dadd+0x260>
 8001214:	4cb4      	ldr	r4, [pc, #720]	; (80014e8 <__aeabi_dadd+0x670>)
 8001216:	45a1      	cmp	r9, r4
 8001218:	d100      	bne.n	800121c <__aeabi_dadd+0x3a4>
 800121a:	e0ad      	b.n	8001378 <__aeabi_dadd+0x500>
 800121c:	2480      	movs	r4, #128	; 0x80
 800121e:	0424      	lsls	r4, r4, #16
 8001220:	4320      	orrs	r0, r4
 8001222:	4664      	mov	r4, ip
 8001224:	2c38      	cmp	r4, #56	; 0x38
 8001226:	dc3d      	bgt.n	80012a4 <__aeabi_dadd+0x42c>
 8001228:	4662      	mov	r2, ip
 800122a:	2c1f      	cmp	r4, #31
 800122c:	dd00      	ble.n	8001230 <__aeabi_dadd+0x3b8>
 800122e:	e0b7      	b.n	80013a0 <__aeabi_dadd+0x528>
 8001230:	2520      	movs	r5, #32
 8001232:	001e      	movs	r6, r3
 8001234:	1b2d      	subs	r5, r5, r4
 8001236:	0004      	movs	r4, r0
 8001238:	40ab      	lsls	r3, r5
 800123a:	40ac      	lsls	r4, r5
 800123c:	40d6      	lsrs	r6, r2
 800123e:	40d0      	lsrs	r0, r2
 8001240:	4642      	mov	r2, r8
 8001242:	1e5d      	subs	r5, r3, #1
 8001244:	41ab      	sbcs	r3, r5
 8001246:	4334      	orrs	r4, r6
 8001248:	1a12      	subs	r2, r2, r0
 800124a:	4690      	mov	r8, r2
 800124c:	4323      	orrs	r3, r4
 800124e:	e02c      	b.n	80012aa <__aeabi_dadd+0x432>
 8001250:	0742      	lsls	r2, r0, #29
 8001252:	08db      	lsrs	r3, r3, #3
 8001254:	4313      	orrs	r3, r2
 8001256:	08c0      	lsrs	r0, r0, #3
 8001258:	e73b      	b.n	80010d2 <__aeabi_dadd+0x25a>
 800125a:	185c      	adds	r4, r3, r1
 800125c:	429c      	cmp	r4, r3
 800125e:	419b      	sbcs	r3, r3
 8001260:	4440      	add	r0, r8
 8001262:	425b      	negs	r3, r3
 8001264:	18c7      	adds	r7, r0, r3
 8001266:	2601      	movs	r6, #1
 8001268:	023b      	lsls	r3, r7, #8
 800126a:	d400      	bmi.n	800126e <__aeabi_dadd+0x3f6>
 800126c:	e729      	b.n	80010c2 <__aeabi_dadd+0x24a>
 800126e:	2602      	movs	r6, #2
 8001270:	4a9e      	ldr	r2, [pc, #632]	; (80014ec <__aeabi_dadd+0x674>)
 8001272:	0863      	lsrs	r3, r4, #1
 8001274:	4017      	ands	r7, r2
 8001276:	2201      	movs	r2, #1
 8001278:	4014      	ands	r4, r2
 800127a:	431c      	orrs	r4, r3
 800127c:	07fb      	lsls	r3, r7, #31
 800127e:	431c      	orrs	r4, r3
 8001280:	087f      	lsrs	r7, r7, #1
 8001282:	e673      	b.n	8000f6c <__aeabi_dadd+0xf4>
 8001284:	4644      	mov	r4, r8
 8001286:	3a20      	subs	r2, #32
 8001288:	40d4      	lsrs	r4, r2
 800128a:	4662      	mov	r2, ip
 800128c:	2a20      	cmp	r2, #32
 800128e:	d005      	beq.n	800129c <__aeabi_dadd+0x424>
 8001290:	4667      	mov	r7, ip
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	1bd2      	subs	r2, r2, r7
 8001296:	4647      	mov	r7, r8
 8001298:	4097      	lsls	r7, r2
 800129a:	4339      	orrs	r1, r7
 800129c:	1e4a      	subs	r2, r1, #1
 800129e:	4191      	sbcs	r1, r2
 80012a0:	4321      	orrs	r1, r4
 80012a2:	e635      	b.n	8000f10 <__aeabi_dadd+0x98>
 80012a4:	4303      	orrs	r3, r0
 80012a6:	1e58      	subs	r0, r3, #1
 80012a8:	4183      	sbcs	r3, r0
 80012aa:	1acc      	subs	r4, r1, r3
 80012ac:	42a1      	cmp	r1, r4
 80012ae:	41bf      	sbcs	r7, r7
 80012b0:	4643      	mov	r3, r8
 80012b2:	427f      	negs	r7, r7
 80012b4:	4655      	mov	r5, sl
 80012b6:	464e      	mov	r6, r9
 80012b8:	1bdf      	subs	r7, r3, r7
 80012ba:	e62e      	b.n	8000f1a <__aeabi_dadd+0xa2>
 80012bc:	0002      	movs	r2, r0
 80012be:	431a      	orrs	r2, r3
 80012c0:	d100      	bne.n	80012c4 <__aeabi_dadd+0x44c>
 80012c2:	e0bd      	b.n	8001440 <__aeabi_dadd+0x5c8>
 80012c4:	4662      	mov	r2, ip
 80012c6:	4664      	mov	r4, ip
 80012c8:	3a01      	subs	r2, #1
 80012ca:	2c01      	cmp	r4, #1
 80012cc:	d100      	bne.n	80012d0 <__aeabi_dadd+0x458>
 80012ce:	e0e5      	b.n	800149c <__aeabi_dadd+0x624>
 80012d0:	4c85      	ldr	r4, [pc, #532]	; (80014e8 <__aeabi_dadd+0x670>)
 80012d2:	45a4      	cmp	ip, r4
 80012d4:	d058      	beq.n	8001388 <__aeabi_dadd+0x510>
 80012d6:	4694      	mov	ip, r2
 80012d8:	e749      	b.n	800116e <__aeabi_dadd+0x2f6>
 80012da:	4664      	mov	r4, ip
 80012dc:	2220      	movs	r2, #32
 80012de:	1b12      	subs	r2, r2, r4
 80012e0:	4644      	mov	r4, r8
 80012e2:	4094      	lsls	r4, r2
 80012e4:	000f      	movs	r7, r1
 80012e6:	46a1      	mov	r9, r4
 80012e8:	4664      	mov	r4, ip
 80012ea:	4091      	lsls	r1, r2
 80012ec:	40e7      	lsrs	r7, r4
 80012ee:	464c      	mov	r4, r9
 80012f0:	1e4a      	subs	r2, r1, #1
 80012f2:	4191      	sbcs	r1, r2
 80012f4:	433c      	orrs	r4, r7
 80012f6:	4642      	mov	r2, r8
 80012f8:	430c      	orrs	r4, r1
 80012fa:	4661      	mov	r1, ip
 80012fc:	40ca      	lsrs	r2, r1
 80012fe:	1880      	adds	r0, r0, r2
 8001300:	e6f4      	b.n	80010ec <__aeabi_dadd+0x274>
 8001302:	4c79      	ldr	r4, [pc, #484]	; (80014e8 <__aeabi_dadd+0x670>)
 8001304:	42a2      	cmp	r2, r4
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x492>
 8001308:	e6fd      	b.n	8001106 <__aeabi_dadd+0x28e>
 800130a:	1859      	adds	r1, r3, r1
 800130c:	4299      	cmp	r1, r3
 800130e:	419b      	sbcs	r3, r3
 8001310:	4440      	add	r0, r8
 8001312:	425f      	negs	r7, r3
 8001314:	19c7      	adds	r7, r0, r7
 8001316:	07fc      	lsls	r4, r7, #31
 8001318:	0849      	lsrs	r1, r1, #1
 800131a:	0016      	movs	r6, r2
 800131c:	430c      	orrs	r4, r1
 800131e:	087f      	lsrs	r7, r7, #1
 8001320:	e6cf      	b.n	80010c2 <__aeabi_dadd+0x24a>
 8001322:	1acc      	subs	r4, r1, r3
 8001324:	42a1      	cmp	r1, r4
 8001326:	41bf      	sbcs	r7, r7
 8001328:	4643      	mov	r3, r8
 800132a:	427f      	negs	r7, r7
 800132c:	1a18      	subs	r0, r3, r0
 800132e:	4655      	mov	r5, sl
 8001330:	1bc7      	subs	r7, r0, r7
 8001332:	e5f7      	b.n	8000f24 <__aeabi_dadd+0xac>
 8001334:	08c9      	lsrs	r1, r1, #3
 8001336:	077b      	lsls	r3, r7, #29
 8001338:	4655      	mov	r5, sl
 800133a:	430b      	orrs	r3, r1
 800133c:	08f8      	lsrs	r0, r7, #3
 800133e:	e6c8      	b.n	80010d2 <__aeabi_dadd+0x25a>
 8001340:	2c00      	cmp	r4, #0
 8001342:	d000      	beq.n	8001346 <__aeabi_dadd+0x4ce>
 8001344:	e081      	b.n	800144a <__aeabi_dadd+0x5d2>
 8001346:	4643      	mov	r3, r8
 8001348:	430b      	orrs	r3, r1
 800134a:	d115      	bne.n	8001378 <__aeabi_dadd+0x500>
 800134c:	2080      	movs	r0, #128	; 0x80
 800134e:	2500      	movs	r5, #0
 8001350:	0300      	lsls	r0, r0, #12
 8001352:	e6e3      	b.n	800111c <__aeabi_dadd+0x2a4>
 8001354:	1a5c      	subs	r4, r3, r1
 8001356:	42a3      	cmp	r3, r4
 8001358:	419b      	sbcs	r3, r3
 800135a:	1bc7      	subs	r7, r0, r7
 800135c:	425b      	negs	r3, r3
 800135e:	2601      	movs	r6, #1
 8001360:	1aff      	subs	r7, r7, r3
 8001362:	e5da      	b.n	8000f1a <__aeabi_dadd+0xa2>
 8001364:	0742      	lsls	r2, r0, #29
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	4313      	orrs	r3, r2
 800136a:	08c0      	lsrs	r0, r0, #3
 800136c:	e6d2      	b.n	8001114 <__aeabi_dadd+0x29c>
 800136e:	0742      	lsls	r2, r0, #29
 8001370:	08db      	lsrs	r3, r3, #3
 8001372:	4313      	orrs	r3, r2
 8001374:	08c0      	lsrs	r0, r0, #3
 8001376:	e6ac      	b.n	80010d2 <__aeabi_dadd+0x25a>
 8001378:	4643      	mov	r3, r8
 800137a:	4642      	mov	r2, r8
 800137c:	08c9      	lsrs	r1, r1, #3
 800137e:	075b      	lsls	r3, r3, #29
 8001380:	4655      	mov	r5, sl
 8001382:	430b      	orrs	r3, r1
 8001384:	08d0      	lsrs	r0, r2, #3
 8001386:	e6c5      	b.n	8001114 <__aeabi_dadd+0x29c>
 8001388:	4643      	mov	r3, r8
 800138a:	4642      	mov	r2, r8
 800138c:	075b      	lsls	r3, r3, #29
 800138e:	08c9      	lsrs	r1, r1, #3
 8001390:	430b      	orrs	r3, r1
 8001392:	08d0      	lsrs	r0, r2, #3
 8001394:	e6be      	b.n	8001114 <__aeabi_dadd+0x29c>
 8001396:	4303      	orrs	r3, r0
 8001398:	001c      	movs	r4, r3
 800139a:	1e63      	subs	r3, r4, #1
 800139c:	419c      	sbcs	r4, r3
 800139e:	e6fc      	b.n	800119a <__aeabi_dadd+0x322>
 80013a0:	0002      	movs	r2, r0
 80013a2:	3c20      	subs	r4, #32
 80013a4:	40e2      	lsrs	r2, r4
 80013a6:	0014      	movs	r4, r2
 80013a8:	4662      	mov	r2, ip
 80013aa:	2a20      	cmp	r2, #32
 80013ac:	d003      	beq.n	80013b6 <__aeabi_dadd+0x53e>
 80013ae:	2540      	movs	r5, #64	; 0x40
 80013b0:	1aad      	subs	r5, r5, r2
 80013b2:	40a8      	lsls	r0, r5
 80013b4:	4303      	orrs	r3, r0
 80013b6:	1e58      	subs	r0, r3, #1
 80013b8:	4183      	sbcs	r3, r0
 80013ba:	4323      	orrs	r3, r4
 80013bc:	e775      	b.n	80012aa <__aeabi_dadd+0x432>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d0e2      	beq.n	8001388 <__aeabi_dadd+0x510>
 80013c2:	003a      	movs	r2, r7
 80013c4:	430a      	orrs	r2, r1
 80013c6:	d0cd      	beq.n	8001364 <__aeabi_dadd+0x4ec>
 80013c8:	0742      	lsls	r2, r0, #29
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	08c0      	lsrs	r0, r0, #3
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	4210      	tst	r0, r2
 80013d6:	d006      	beq.n	80013e6 <__aeabi_dadd+0x56e>
 80013d8:	08fc      	lsrs	r4, r7, #3
 80013da:	4214      	tst	r4, r2
 80013dc:	d103      	bne.n	80013e6 <__aeabi_dadd+0x56e>
 80013de:	0020      	movs	r0, r4
 80013e0:	08cb      	lsrs	r3, r1, #3
 80013e2:	077a      	lsls	r2, r7, #29
 80013e4:	4313      	orrs	r3, r2
 80013e6:	0f5a      	lsrs	r2, r3, #29
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	0752      	lsls	r2, r2, #29
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	e690      	b.n	8001114 <__aeabi_dadd+0x29c>
 80013f2:	4643      	mov	r3, r8
 80013f4:	430b      	orrs	r3, r1
 80013f6:	d100      	bne.n	80013fa <__aeabi_dadd+0x582>
 80013f8:	e709      	b.n	800120e <__aeabi_dadd+0x396>
 80013fa:	4643      	mov	r3, r8
 80013fc:	4642      	mov	r2, r8
 80013fe:	08c9      	lsrs	r1, r1, #3
 8001400:	075b      	lsls	r3, r3, #29
 8001402:	4655      	mov	r5, sl
 8001404:	430b      	orrs	r3, r1
 8001406:	08d0      	lsrs	r0, r2, #3
 8001408:	e666      	b.n	80010d8 <__aeabi_dadd+0x260>
 800140a:	1acc      	subs	r4, r1, r3
 800140c:	42a1      	cmp	r1, r4
 800140e:	4189      	sbcs	r1, r1
 8001410:	1a3f      	subs	r7, r7, r0
 8001412:	4249      	negs	r1, r1
 8001414:	4655      	mov	r5, sl
 8001416:	2601      	movs	r6, #1
 8001418:	1a7f      	subs	r7, r7, r1
 800141a:	e57e      	b.n	8000f1a <__aeabi_dadd+0xa2>
 800141c:	4642      	mov	r2, r8
 800141e:	1a5c      	subs	r4, r3, r1
 8001420:	1a87      	subs	r7, r0, r2
 8001422:	42a3      	cmp	r3, r4
 8001424:	4192      	sbcs	r2, r2
 8001426:	4252      	negs	r2, r2
 8001428:	1abf      	subs	r7, r7, r2
 800142a:	023a      	lsls	r2, r7, #8
 800142c:	d53d      	bpl.n	80014aa <__aeabi_dadd+0x632>
 800142e:	1acc      	subs	r4, r1, r3
 8001430:	42a1      	cmp	r1, r4
 8001432:	4189      	sbcs	r1, r1
 8001434:	4643      	mov	r3, r8
 8001436:	4249      	negs	r1, r1
 8001438:	1a1f      	subs	r7, r3, r0
 800143a:	4655      	mov	r5, sl
 800143c:	1a7f      	subs	r7, r7, r1
 800143e:	e595      	b.n	8000f6c <__aeabi_dadd+0xf4>
 8001440:	077b      	lsls	r3, r7, #29
 8001442:	08c9      	lsrs	r1, r1, #3
 8001444:	430b      	orrs	r3, r1
 8001446:	08f8      	lsrs	r0, r7, #3
 8001448:	e643      	b.n	80010d2 <__aeabi_dadd+0x25a>
 800144a:	4644      	mov	r4, r8
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	430c      	orrs	r4, r1
 8001450:	d130      	bne.n	80014b4 <__aeabi_dadd+0x63c>
 8001452:	0742      	lsls	r2, r0, #29
 8001454:	4313      	orrs	r3, r2
 8001456:	08c0      	lsrs	r0, r0, #3
 8001458:	e65c      	b.n	8001114 <__aeabi_dadd+0x29c>
 800145a:	077b      	lsls	r3, r7, #29
 800145c:	08c9      	lsrs	r1, r1, #3
 800145e:	430b      	orrs	r3, r1
 8001460:	08f8      	lsrs	r0, r7, #3
 8001462:	e639      	b.n	80010d8 <__aeabi_dadd+0x260>
 8001464:	185c      	adds	r4, r3, r1
 8001466:	429c      	cmp	r4, r3
 8001468:	419b      	sbcs	r3, r3
 800146a:	4440      	add	r0, r8
 800146c:	425b      	negs	r3, r3
 800146e:	18c7      	adds	r7, r0, r3
 8001470:	023b      	lsls	r3, r7, #8
 8001472:	d400      	bmi.n	8001476 <__aeabi_dadd+0x5fe>
 8001474:	e625      	b.n	80010c2 <__aeabi_dadd+0x24a>
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <__aeabi_dadd+0x674>)
 8001478:	2601      	movs	r6, #1
 800147a:	401f      	ands	r7, r3
 800147c:	e621      	b.n	80010c2 <__aeabi_dadd+0x24a>
 800147e:	0004      	movs	r4, r0
 8001480:	3a20      	subs	r2, #32
 8001482:	40d4      	lsrs	r4, r2
 8001484:	4662      	mov	r2, ip
 8001486:	2a20      	cmp	r2, #32
 8001488:	d004      	beq.n	8001494 <__aeabi_dadd+0x61c>
 800148a:	2240      	movs	r2, #64	; 0x40
 800148c:	4666      	mov	r6, ip
 800148e:	1b92      	subs	r2, r2, r6
 8001490:	4090      	lsls	r0, r2
 8001492:	4303      	orrs	r3, r0
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	4193      	sbcs	r3, r2
 8001498:	431c      	orrs	r4, r3
 800149a:	e67e      	b.n	800119a <__aeabi_dadd+0x322>
 800149c:	185c      	adds	r4, r3, r1
 800149e:	428c      	cmp	r4, r1
 80014a0:	4189      	sbcs	r1, r1
 80014a2:	4440      	add	r0, r8
 80014a4:	4249      	negs	r1, r1
 80014a6:	1847      	adds	r7, r0, r1
 80014a8:	e6dd      	b.n	8001266 <__aeabi_dadd+0x3ee>
 80014aa:	0023      	movs	r3, r4
 80014ac:	433b      	orrs	r3, r7
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x63a>
 80014b0:	e6ad      	b.n	800120e <__aeabi_dadd+0x396>
 80014b2:	e606      	b.n	80010c2 <__aeabi_dadd+0x24a>
 80014b4:	0744      	lsls	r4, r0, #29
 80014b6:	4323      	orrs	r3, r4
 80014b8:	2480      	movs	r4, #128	; 0x80
 80014ba:	08c0      	lsrs	r0, r0, #3
 80014bc:	0324      	lsls	r4, r4, #12
 80014be:	4220      	tst	r0, r4
 80014c0:	d008      	beq.n	80014d4 <__aeabi_dadd+0x65c>
 80014c2:	4642      	mov	r2, r8
 80014c4:	08d6      	lsrs	r6, r2, #3
 80014c6:	4226      	tst	r6, r4
 80014c8:	d104      	bne.n	80014d4 <__aeabi_dadd+0x65c>
 80014ca:	4655      	mov	r5, sl
 80014cc:	0030      	movs	r0, r6
 80014ce:	08cb      	lsrs	r3, r1, #3
 80014d0:	0751      	lsls	r1, r2, #29
 80014d2:	430b      	orrs	r3, r1
 80014d4:	0f5a      	lsrs	r2, r3, #29
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	0752      	lsls	r2, r2, #29
 80014dc:	4313      	orrs	r3, r2
 80014de:	e619      	b.n	8001114 <__aeabi_dadd+0x29c>
 80014e0:	2300      	movs	r3, #0
 80014e2:	4a01      	ldr	r2, [pc, #4]	; (80014e8 <__aeabi_dadd+0x670>)
 80014e4:	001f      	movs	r7, r3
 80014e6:	e55e      	b.n	8000fa6 <__aeabi_dadd+0x12e>
 80014e8:	000007ff 	.word	0x000007ff
 80014ec:	ff7fffff 	.word	0xff7fffff

080014f0 <__aeabi_dsub>:
 80014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f2:	4657      	mov	r7, sl
 80014f4:	464e      	mov	r6, r9
 80014f6:	4645      	mov	r5, r8
 80014f8:	46de      	mov	lr, fp
 80014fa:	b5e0      	push	{r5, r6, r7, lr}
 80014fc:	001e      	movs	r6, r3
 80014fe:	0017      	movs	r7, r2
 8001500:	004a      	lsls	r2, r1, #1
 8001502:	030b      	lsls	r3, r1, #12
 8001504:	0d52      	lsrs	r2, r2, #21
 8001506:	0a5b      	lsrs	r3, r3, #9
 8001508:	4690      	mov	r8, r2
 800150a:	0f42      	lsrs	r2, r0, #29
 800150c:	431a      	orrs	r2, r3
 800150e:	0fcd      	lsrs	r5, r1, #31
 8001510:	4ccd      	ldr	r4, [pc, #820]	; (8001848 <__aeabi_dsub+0x358>)
 8001512:	0331      	lsls	r1, r6, #12
 8001514:	00c3      	lsls	r3, r0, #3
 8001516:	4694      	mov	ip, r2
 8001518:	0070      	lsls	r0, r6, #1
 800151a:	0f7a      	lsrs	r2, r7, #29
 800151c:	0a49      	lsrs	r1, r1, #9
 800151e:	00ff      	lsls	r7, r7, #3
 8001520:	469a      	mov	sl, r3
 8001522:	46b9      	mov	r9, r7
 8001524:	0d40      	lsrs	r0, r0, #21
 8001526:	0ff6      	lsrs	r6, r6, #31
 8001528:	4311      	orrs	r1, r2
 800152a:	42a0      	cmp	r0, r4
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x40>
 800152e:	e0b1      	b.n	8001694 <__aeabi_dsub+0x1a4>
 8001530:	2201      	movs	r2, #1
 8001532:	4056      	eors	r6, r2
 8001534:	46b3      	mov	fp, r6
 8001536:	42b5      	cmp	r5, r6
 8001538:	d100      	bne.n	800153c <__aeabi_dsub+0x4c>
 800153a:	e088      	b.n	800164e <__aeabi_dsub+0x15e>
 800153c:	4642      	mov	r2, r8
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	2a00      	cmp	r2, #0
 8001542:	dc00      	bgt.n	8001546 <__aeabi_dsub+0x56>
 8001544:	e0ae      	b.n	80016a4 <__aeabi_dsub+0x1b4>
 8001546:	2800      	cmp	r0, #0
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x5c>
 800154a:	e0c1      	b.n	80016d0 <__aeabi_dsub+0x1e0>
 800154c:	48be      	ldr	r0, [pc, #760]	; (8001848 <__aeabi_dsub+0x358>)
 800154e:	4580      	cmp	r8, r0
 8001550:	d100      	bne.n	8001554 <__aeabi_dsub+0x64>
 8001552:	e151      	b.n	80017f8 <__aeabi_dsub+0x308>
 8001554:	2080      	movs	r0, #128	; 0x80
 8001556:	0400      	lsls	r0, r0, #16
 8001558:	4301      	orrs	r1, r0
 800155a:	2a38      	cmp	r2, #56	; 0x38
 800155c:	dd00      	ble.n	8001560 <__aeabi_dsub+0x70>
 800155e:	e17b      	b.n	8001858 <__aeabi_dsub+0x368>
 8001560:	2a1f      	cmp	r2, #31
 8001562:	dd00      	ble.n	8001566 <__aeabi_dsub+0x76>
 8001564:	e1ee      	b.n	8001944 <__aeabi_dsub+0x454>
 8001566:	2020      	movs	r0, #32
 8001568:	003e      	movs	r6, r7
 800156a:	1a80      	subs	r0, r0, r2
 800156c:	000c      	movs	r4, r1
 800156e:	40d6      	lsrs	r6, r2
 8001570:	40d1      	lsrs	r1, r2
 8001572:	4087      	lsls	r7, r0
 8001574:	4662      	mov	r2, ip
 8001576:	4084      	lsls	r4, r0
 8001578:	1a52      	subs	r2, r2, r1
 800157a:	1e78      	subs	r0, r7, #1
 800157c:	4187      	sbcs	r7, r0
 800157e:	4694      	mov	ip, r2
 8001580:	4334      	orrs	r4, r6
 8001582:	4327      	orrs	r7, r4
 8001584:	1bdc      	subs	r4, r3, r7
 8001586:	42a3      	cmp	r3, r4
 8001588:	419b      	sbcs	r3, r3
 800158a:	4662      	mov	r2, ip
 800158c:	425b      	negs	r3, r3
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	4699      	mov	r9, r3
 8001592:	464b      	mov	r3, r9
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	d400      	bmi.n	800159a <__aeabi_dsub+0xaa>
 8001598:	e118      	b.n	80017cc <__aeabi_dsub+0x2dc>
 800159a:	464b      	mov	r3, r9
 800159c:	0258      	lsls	r0, r3, #9
 800159e:	0a43      	lsrs	r3, r0, #9
 80015a0:	4699      	mov	r9, r3
 80015a2:	464b      	mov	r3, r9
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d100      	bne.n	80015aa <__aeabi_dsub+0xba>
 80015a8:	e137      	b.n	800181a <__aeabi_dsub+0x32a>
 80015aa:	4648      	mov	r0, r9
 80015ac:	f000 fc28 	bl	8001e00 <__clzsi2>
 80015b0:	0001      	movs	r1, r0
 80015b2:	3908      	subs	r1, #8
 80015b4:	2320      	movs	r3, #32
 80015b6:	0022      	movs	r2, r4
 80015b8:	4648      	mov	r0, r9
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	40da      	lsrs	r2, r3
 80015be:	4088      	lsls	r0, r1
 80015c0:	408c      	lsls	r4, r1
 80015c2:	4643      	mov	r3, r8
 80015c4:	4310      	orrs	r0, r2
 80015c6:	4588      	cmp	r8, r1
 80015c8:	dd00      	ble.n	80015cc <__aeabi_dsub+0xdc>
 80015ca:	e136      	b.n	800183a <__aeabi_dsub+0x34a>
 80015cc:	1ac9      	subs	r1, r1, r3
 80015ce:	1c4b      	adds	r3, r1, #1
 80015d0:	2b1f      	cmp	r3, #31
 80015d2:	dd00      	ble.n	80015d6 <__aeabi_dsub+0xe6>
 80015d4:	e0ea      	b.n	80017ac <__aeabi_dsub+0x2bc>
 80015d6:	2220      	movs	r2, #32
 80015d8:	0026      	movs	r6, r4
 80015da:	1ad2      	subs	r2, r2, r3
 80015dc:	0001      	movs	r1, r0
 80015de:	4094      	lsls	r4, r2
 80015e0:	40de      	lsrs	r6, r3
 80015e2:	40d8      	lsrs	r0, r3
 80015e4:	2300      	movs	r3, #0
 80015e6:	4091      	lsls	r1, r2
 80015e8:	1e62      	subs	r2, r4, #1
 80015ea:	4194      	sbcs	r4, r2
 80015ec:	4681      	mov	r9, r0
 80015ee:	4698      	mov	r8, r3
 80015f0:	4331      	orrs	r1, r6
 80015f2:	430c      	orrs	r4, r1
 80015f4:	0763      	lsls	r3, r4, #29
 80015f6:	d009      	beq.n	800160c <__aeabi_dsub+0x11c>
 80015f8:	230f      	movs	r3, #15
 80015fa:	4023      	ands	r3, r4
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d005      	beq.n	800160c <__aeabi_dsub+0x11c>
 8001600:	1d23      	adds	r3, r4, #4
 8001602:	42a3      	cmp	r3, r4
 8001604:	41a4      	sbcs	r4, r4
 8001606:	4264      	negs	r4, r4
 8001608:	44a1      	add	r9, r4
 800160a:	001c      	movs	r4, r3
 800160c:	464b      	mov	r3, r9
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	d400      	bmi.n	8001614 <__aeabi_dsub+0x124>
 8001612:	e0de      	b.n	80017d2 <__aeabi_dsub+0x2e2>
 8001614:	4641      	mov	r1, r8
 8001616:	4b8c      	ldr	r3, [pc, #560]	; (8001848 <__aeabi_dsub+0x358>)
 8001618:	3101      	adds	r1, #1
 800161a:	4299      	cmp	r1, r3
 800161c:	d100      	bne.n	8001620 <__aeabi_dsub+0x130>
 800161e:	e0e7      	b.n	80017f0 <__aeabi_dsub+0x300>
 8001620:	464b      	mov	r3, r9
 8001622:	488a      	ldr	r0, [pc, #552]	; (800184c <__aeabi_dsub+0x35c>)
 8001624:	08e4      	lsrs	r4, r4, #3
 8001626:	4003      	ands	r3, r0
 8001628:	0018      	movs	r0, r3
 800162a:	0549      	lsls	r1, r1, #21
 800162c:	075b      	lsls	r3, r3, #29
 800162e:	0240      	lsls	r0, r0, #9
 8001630:	4323      	orrs	r3, r4
 8001632:	0d4a      	lsrs	r2, r1, #21
 8001634:	0b04      	lsrs	r4, r0, #12
 8001636:	0512      	lsls	r2, r2, #20
 8001638:	07ed      	lsls	r5, r5, #31
 800163a:	4322      	orrs	r2, r4
 800163c:	432a      	orrs	r2, r5
 800163e:	0018      	movs	r0, r3
 8001640:	0011      	movs	r1, r2
 8001642:	bcf0      	pop	{r4, r5, r6, r7}
 8001644:	46bb      	mov	fp, r7
 8001646:	46b2      	mov	sl, r6
 8001648:	46a9      	mov	r9, r5
 800164a:	46a0      	mov	r8, r4
 800164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800164e:	4642      	mov	r2, r8
 8001650:	1a12      	subs	r2, r2, r0
 8001652:	2a00      	cmp	r2, #0
 8001654:	dd52      	ble.n	80016fc <__aeabi_dsub+0x20c>
 8001656:	2800      	cmp	r0, #0
 8001658:	d100      	bne.n	800165c <__aeabi_dsub+0x16c>
 800165a:	e09c      	b.n	8001796 <__aeabi_dsub+0x2a6>
 800165c:	45a0      	cmp	r8, r4
 800165e:	d100      	bne.n	8001662 <__aeabi_dsub+0x172>
 8001660:	e0ca      	b.n	80017f8 <__aeabi_dsub+0x308>
 8001662:	2080      	movs	r0, #128	; 0x80
 8001664:	0400      	lsls	r0, r0, #16
 8001666:	4301      	orrs	r1, r0
 8001668:	2a38      	cmp	r2, #56	; 0x38
 800166a:	dd00      	ble.n	800166e <__aeabi_dsub+0x17e>
 800166c:	e149      	b.n	8001902 <__aeabi_dsub+0x412>
 800166e:	2a1f      	cmp	r2, #31
 8001670:	dc00      	bgt.n	8001674 <__aeabi_dsub+0x184>
 8001672:	e197      	b.n	80019a4 <__aeabi_dsub+0x4b4>
 8001674:	0010      	movs	r0, r2
 8001676:	000e      	movs	r6, r1
 8001678:	3820      	subs	r0, #32
 800167a:	40c6      	lsrs	r6, r0
 800167c:	2a20      	cmp	r2, #32
 800167e:	d004      	beq.n	800168a <__aeabi_dsub+0x19a>
 8001680:	2040      	movs	r0, #64	; 0x40
 8001682:	1a82      	subs	r2, r0, r2
 8001684:	4091      	lsls	r1, r2
 8001686:	430f      	orrs	r7, r1
 8001688:	46b9      	mov	r9, r7
 800168a:	464c      	mov	r4, r9
 800168c:	1e62      	subs	r2, r4, #1
 800168e:	4194      	sbcs	r4, r2
 8001690:	4334      	orrs	r4, r6
 8001692:	e13a      	b.n	800190a <__aeabi_dsub+0x41a>
 8001694:	000a      	movs	r2, r1
 8001696:	433a      	orrs	r2, r7
 8001698:	d028      	beq.n	80016ec <__aeabi_dsub+0x1fc>
 800169a:	46b3      	mov	fp, r6
 800169c:	42b5      	cmp	r5, r6
 800169e:	d02b      	beq.n	80016f8 <__aeabi_dsub+0x208>
 80016a0:	4a6b      	ldr	r2, [pc, #428]	; (8001850 <__aeabi_dsub+0x360>)
 80016a2:	4442      	add	r2, r8
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	d05d      	beq.n	8001764 <__aeabi_dsub+0x274>
 80016a8:	4642      	mov	r2, r8
 80016aa:	4644      	mov	r4, r8
 80016ac:	1a82      	subs	r2, r0, r2
 80016ae:	2c00      	cmp	r4, #0
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dsub+0x1c4>
 80016b2:	e0f5      	b.n	80018a0 <__aeabi_dsub+0x3b0>
 80016b4:	4665      	mov	r5, ip
 80016b6:	431d      	orrs	r5, r3
 80016b8:	d100      	bne.n	80016bc <__aeabi_dsub+0x1cc>
 80016ba:	e19c      	b.n	80019f6 <__aeabi_dsub+0x506>
 80016bc:	1e55      	subs	r5, r2, #1
 80016be:	2a01      	cmp	r2, #1
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dsub+0x1d4>
 80016c2:	e1fb      	b.n	8001abc <__aeabi_dsub+0x5cc>
 80016c4:	4c60      	ldr	r4, [pc, #384]	; (8001848 <__aeabi_dsub+0x358>)
 80016c6:	42a2      	cmp	r2, r4
 80016c8:	d100      	bne.n	80016cc <__aeabi_dsub+0x1dc>
 80016ca:	e1bd      	b.n	8001a48 <__aeabi_dsub+0x558>
 80016cc:	002a      	movs	r2, r5
 80016ce:	e0f0      	b.n	80018b2 <__aeabi_dsub+0x3c2>
 80016d0:	0008      	movs	r0, r1
 80016d2:	4338      	orrs	r0, r7
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dsub+0x1e8>
 80016d6:	e0c3      	b.n	8001860 <__aeabi_dsub+0x370>
 80016d8:	1e50      	subs	r0, r2, #1
 80016da:	2a01      	cmp	r2, #1
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x1f0>
 80016de:	e1a8      	b.n	8001a32 <__aeabi_dsub+0x542>
 80016e0:	4c59      	ldr	r4, [pc, #356]	; (8001848 <__aeabi_dsub+0x358>)
 80016e2:	42a2      	cmp	r2, r4
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dsub+0x1f8>
 80016e6:	e087      	b.n	80017f8 <__aeabi_dsub+0x308>
 80016e8:	0002      	movs	r2, r0
 80016ea:	e736      	b.n	800155a <__aeabi_dsub+0x6a>
 80016ec:	2201      	movs	r2, #1
 80016ee:	4056      	eors	r6, r2
 80016f0:	46b3      	mov	fp, r6
 80016f2:	42b5      	cmp	r5, r6
 80016f4:	d000      	beq.n	80016f8 <__aeabi_dsub+0x208>
 80016f6:	e721      	b.n	800153c <__aeabi_dsub+0x4c>
 80016f8:	4a55      	ldr	r2, [pc, #340]	; (8001850 <__aeabi_dsub+0x360>)
 80016fa:	4442      	add	r2, r8
 80016fc:	2a00      	cmp	r2, #0
 80016fe:	d100      	bne.n	8001702 <__aeabi_dsub+0x212>
 8001700:	e0b5      	b.n	800186e <__aeabi_dsub+0x37e>
 8001702:	4642      	mov	r2, r8
 8001704:	4644      	mov	r4, r8
 8001706:	1a82      	subs	r2, r0, r2
 8001708:	2c00      	cmp	r4, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dsub+0x21e>
 800170c:	e138      	b.n	8001980 <__aeabi_dsub+0x490>
 800170e:	4e4e      	ldr	r6, [pc, #312]	; (8001848 <__aeabi_dsub+0x358>)
 8001710:	42b0      	cmp	r0, r6
 8001712:	d100      	bne.n	8001716 <__aeabi_dsub+0x226>
 8001714:	e1de      	b.n	8001ad4 <__aeabi_dsub+0x5e4>
 8001716:	2680      	movs	r6, #128	; 0x80
 8001718:	4664      	mov	r4, ip
 800171a:	0436      	lsls	r6, r6, #16
 800171c:	4334      	orrs	r4, r6
 800171e:	46a4      	mov	ip, r4
 8001720:	2a38      	cmp	r2, #56	; 0x38
 8001722:	dd00      	ble.n	8001726 <__aeabi_dsub+0x236>
 8001724:	e196      	b.n	8001a54 <__aeabi_dsub+0x564>
 8001726:	2a1f      	cmp	r2, #31
 8001728:	dd00      	ble.n	800172c <__aeabi_dsub+0x23c>
 800172a:	e224      	b.n	8001b76 <__aeabi_dsub+0x686>
 800172c:	2620      	movs	r6, #32
 800172e:	1ab4      	subs	r4, r6, r2
 8001730:	46a2      	mov	sl, r4
 8001732:	4664      	mov	r4, ip
 8001734:	4656      	mov	r6, sl
 8001736:	40b4      	lsls	r4, r6
 8001738:	46a1      	mov	r9, r4
 800173a:	001c      	movs	r4, r3
 800173c:	464e      	mov	r6, r9
 800173e:	40d4      	lsrs	r4, r2
 8001740:	4326      	orrs	r6, r4
 8001742:	0034      	movs	r4, r6
 8001744:	4656      	mov	r6, sl
 8001746:	40b3      	lsls	r3, r6
 8001748:	1e5e      	subs	r6, r3, #1
 800174a:	41b3      	sbcs	r3, r6
 800174c:	431c      	orrs	r4, r3
 800174e:	4663      	mov	r3, ip
 8001750:	40d3      	lsrs	r3, r2
 8001752:	18c9      	adds	r1, r1, r3
 8001754:	19e4      	adds	r4, r4, r7
 8001756:	42bc      	cmp	r4, r7
 8001758:	41bf      	sbcs	r7, r7
 800175a:	427f      	negs	r7, r7
 800175c:	46b9      	mov	r9, r7
 800175e:	4680      	mov	r8, r0
 8001760:	4489      	add	r9, r1
 8001762:	e0d8      	b.n	8001916 <__aeabi_dsub+0x426>
 8001764:	4640      	mov	r0, r8
 8001766:	4c3b      	ldr	r4, [pc, #236]	; (8001854 <__aeabi_dsub+0x364>)
 8001768:	3001      	adds	r0, #1
 800176a:	4220      	tst	r0, r4
 800176c:	d000      	beq.n	8001770 <__aeabi_dsub+0x280>
 800176e:	e0b4      	b.n	80018da <__aeabi_dsub+0x3ea>
 8001770:	4640      	mov	r0, r8
 8001772:	2800      	cmp	r0, #0
 8001774:	d000      	beq.n	8001778 <__aeabi_dsub+0x288>
 8001776:	e144      	b.n	8001a02 <__aeabi_dsub+0x512>
 8001778:	4660      	mov	r0, ip
 800177a:	4318      	orrs	r0, r3
 800177c:	d100      	bne.n	8001780 <__aeabi_dsub+0x290>
 800177e:	e190      	b.n	8001aa2 <__aeabi_dsub+0x5b2>
 8001780:	0008      	movs	r0, r1
 8001782:	4338      	orrs	r0, r7
 8001784:	d000      	beq.n	8001788 <__aeabi_dsub+0x298>
 8001786:	e1aa      	b.n	8001ade <__aeabi_dsub+0x5ee>
 8001788:	4661      	mov	r1, ip
 800178a:	08db      	lsrs	r3, r3, #3
 800178c:	0749      	lsls	r1, r1, #29
 800178e:	430b      	orrs	r3, r1
 8001790:	4661      	mov	r1, ip
 8001792:	08cc      	lsrs	r4, r1, #3
 8001794:	e027      	b.n	80017e6 <__aeabi_dsub+0x2f6>
 8001796:	0008      	movs	r0, r1
 8001798:	4338      	orrs	r0, r7
 800179a:	d061      	beq.n	8001860 <__aeabi_dsub+0x370>
 800179c:	1e50      	subs	r0, r2, #1
 800179e:	2a01      	cmp	r2, #1
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dsub+0x2b4>
 80017a2:	e139      	b.n	8001a18 <__aeabi_dsub+0x528>
 80017a4:	42a2      	cmp	r2, r4
 80017a6:	d027      	beq.n	80017f8 <__aeabi_dsub+0x308>
 80017a8:	0002      	movs	r2, r0
 80017aa:	e75d      	b.n	8001668 <__aeabi_dsub+0x178>
 80017ac:	0002      	movs	r2, r0
 80017ae:	391f      	subs	r1, #31
 80017b0:	40ca      	lsrs	r2, r1
 80017b2:	0011      	movs	r1, r2
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	d003      	beq.n	80017c0 <__aeabi_dsub+0x2d0>
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4098      	lsls	r0, r3
 80017be:	4304      	orrs	r4, r0
 80017c0:	1e63      	subs	r3, r4, #1
 80017c2:	419c      	sbcs	r4, r3
 80017c4:	2300      	movs	r3, #0
 80017c6:	4699      	mov	r9, r3
 80017c8:	4698      	mov	r8, r3
 80017ca:	430c      	orrs	r4, r1
 80017cc:	0763      	lsls	r3, r4, #29
 80017ce:	d000      	beq.n	80017d2 <__aeabi_dsub+0x2e2>
 80017d0:	e712      	b.n	80015f8 <__aeabi_dsub+0x108>
 80017d2:	464b      	mov	r3, r9
 80017d4:	464a      	mov	r2, r9
 80017d6:	08e4      	lsrs	r4, r4, #3
 80017d8:	075b      	lsls	r3, r3, #29
 80017da:	4323      	orrs	r3, r4
 80017dc:	08d4      	lsrs	r4, r2, #3
 80017de:	4642      	mov	r2, r8
 80017e0:	4919      	ldr	r1, [pc, #100]	; (8001848 <__aeabi_dsub+0x358>)
 80017e2:	428a      	cmp	r2, r1
 80017e4:	d00e      	beq.n	8001804 <__aeabi_dsub+0x314>
 80017e6:	0324      	lsls	r4, r4, #12
 80017e8:	0552      	lsls	r2, r2, #21
 80017ea:	0b24      	lsrs	r4, r4, #12
 80017ec:	0d52      	lsrs	r2, r2, #21
 80017ee:	e722      	b.n	8001636 <__aeabi_dsub+0x146>
 80017f0:	000a      	movs	r2, r1
 80017f2:	2400      	movs	r4, #0
 80017f4:	2300      	movs	r3, #0
 80017f6:	e71e      	b.n	8001636 <__aeabi_dsub+0x146>
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	4662      	mov	r2, ip
 80017fc:	0752      	lsls	r2, r2, #29
 80017fe:	4313      	orrs	r3, r2
 8001800:	4662      	mov	r2, ip
 8001802:	08d4      	lsrs	r4, r2, #3
 8001804:	001a      	movs	r2, r3
 8001806:	4322      	orrs	r2, r4
 8001808:	d100      	bne.n	800180c <__aeabi_dsub+0x31c>
 800180a:	e1fc      	b.n	8001c06 <__aeabi_dsub+0x716>
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	0312      	lsls	r2, r2, #12
 8001810:	4314      	orrs	r4, r2
 8001812:	0324      	lsls	r4, r4, #12
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <__aeabi_dsub+0x358>)
 8001816:	0b24      	lsrs	r4, r4, #12
 8001818:	e70d      	b.n	8001636 <__aeabi_dsub+0x146>
 800181a:	0020      	movs	r0, r4
 800181c:	f000 faf0 	bl	8001e00 <__clzsi2>
 8001820:	0001      	movs	r1, r0
 8001822:	3118      	adds	r1, #24
 8001824:	291f      	cmp	r1, #31
 8001826:	dc00      	bgt.n	800182a <__aeabi_dsub+0x33a>
 8001828:	e6c4      	b.n	80015b4 <__aeabi_dsub+0xc4>
 800182a:	3808      	subs	r0, #8
 800182c:	4084      	lsls	r4, r0
 800182e:	4643      	mov	r3, r8
 8001830:	0020      	movs	r0, r4
 8001832:	2400      	movs	r4, #0
 8001834:	4588      	cmp	r8, r1
 8001836:	dc00      	bgt.n	800183a <__aeabi_dsub+0x34a>
 8001838:	e6c8      	b.n	80015cc <__aeabi_dsub+0xdc>
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__aeabi_dsub+0x35c>)
 800183c:	1a5b      	subs	r3, r3, r1
 800183e:	4010      	ands	r0, r2
 8001840:	4698      	mov	r8, r3
 8001842:	4681      	mov	r9, r0
 8001844:	e6d6      	b.n	80015f4 <__aeabi_dsub+0x104>
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	000007ff 	.word	0x000007ff
 800184c:	ff7fffff 	.word	0xff7fffff
 8001850:	fffff801 	.word	0xfffff801
 8001854:	000007fe 	.word	0x000007fe
 8001858:	430f      	orrs	r7, r1
 800185a:	1e7a      	subs	r2, r7, #1
 800185c:	4197      	sbcs	r7, r2
 800185e:	e691      	b.n	8001584 <__aeabi_dsub+0x94>
 8001860:	4661      	mov	r1, ip
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	0749      	lsls	r1, r1, #29
 8001866:	430b      	orrs	r3, r1
 8001868:	4661      	mov	r1, ip
 800186a:	08cc      	lsrs	r4, r1, #3
 800186c:	e7b8      	b.n	80017e0 <__aeabi_dsub+0x2f0>
 800186e:	4640      	mov	r0, r8
 8001870:	4cd3      	ldr	r4, [pc, #844]	; (8001bc0 <__aeabi_dsub+0x6d0>)
 8001872:	3001      	adds	r0, #1
 8001874:	4220      	tst	r0, r4
 8001876:	d000      	beq.n	800187a <__aeabi_dsub+0x38a>
 8001878:	e0a2      	b.n	80019c0 <__aeabi_dsub+0x4d0>
 800187a:	4640      	mov	r0, r8
 800187c:	2800      	cmp	r0, #0
 800187e:	d000      	beq.n	8001882 <__aeabi_dsub+0x392>
 8001880:	e101      	b.n	8001a86 <__aeabi_dsub+0x596>
 8001882:	4660      	mov	r0, ip
 8001884:	4318      	orrs	r0, r3
 8001886:	d100      	bne.n	800188a <__aeabi_dsub+0x39a>
 8001888:	e15e      	b.n	8001b48 <__aeabi_dsub+0x658>
 800188a:	0008      	movs	r0, r1
 800188c:	4338      	orrs	r0, r7
 800188e:	d000      	beq.n	8001892 <__aeabi_dsub+0x3a2>
 8001890:	e15f      	b.n	8001b52 <__aeabi_dsub+0x662>
 8001892:	4661      	mov	r1, ip
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	0749      	lsls	r1, r1, #29
 8001898:	430b      	orrs	r3, r1
 800189a:	4661      	mov	r1, ip
 800189c:	08cc      	lsrs	r4, r1, #3
 800189e:	e7a2      	b.n	80017e6 <__aeabi_dsub+0x2f6>
 80018a0:	4dc8      	ldr	r5, [pc, #800]	; (8001bc4 <__aeabi_dsub+0x6d4>)
 80018a2:	42a8      	cmp	r0, r5
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dsub+0x3b8>
 80018a6:	e0cf      	b.n	8001a48 <__aeabi_dsub+0x558>
 80018a8:	2580      	movs	r5, #128	; 0x80
 80018aa:	4664      	mov	r4, ip
 80018ac:	042d      	lsls	r5, r5, #16
 80018ae:	432c      	orrs	r4, r5
 80018b0:	46a4      	mov	ip, r4
 80018b2:	2a38      	cmp	r2, #56	; 0x38
 80018b4:	dc56      	bgt.n	8001964 <__aeabi_dsub+0x474>
 80018b6:	2a1f      	cmp	r2, #31
 80018b8:	dd00      	ble.n	80018bc <__aeabi_dsub+0x3cc>
 80018ba:	e0d1      	b.n	8001a60 <__aeabi_dsub+0x570>
 80018bc:	2520      	movs	r5, #32
 80018be:	001e      	movs	r6, r3
 80018c0:	1aad      	subs	r5, r5, r2
 80018c2:	4664      	mov	r4, ip
 80018c4:	40ab      	lsls	r3, r5
 80018c6:	40ac      	lsls	r4, r5
 80018c8:	40d6      	lsrs	r6, r2
 80018ca:	1e5d      	subs	r5, r3, #1
 80018cc:	41ab      	sbcs	r3, r5
 80018ce:	4334      	orrs	r4, r6
 80018d0:	4323      	orrs	r3, r4
 80018d2:	4664      	mov	r4, ip
 80018d4:	40d4      	lsrs	r4, r2
 80018d6:	1b09      	subs	r1, r1, r4
 80018d8:	e049      	b.n	800196e <__aeabi_dsub+0x47e>
 80018da:	4660      	mov	r0, ip
 80018dc:	1bdc      	subs	r4, r3, r7
 80018de:	1a46      	subs	r6, r0, r1
 80018e0:	42a3      	cmp	r3, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	4240      	negs	r0, r0
 80018e6:	4681      	mov	r9, r0
 80018e8:	0030      	movs	r0, r6
 80018ea:	464e      	mov	r6, r9
 80018ec:	1b80      	subs	r0, r0, r6
 80018ee:	4681      	mov	r9, r0
 80018f0:	0200      	lsls	r0, r0, #8
 80018f2:	d476      	bmi.n	80019e2 <__aeabi_dsub+0x4f2>
 80018f4:	464b      	mov	r3, r9
 80018f6:	4323      	orrs	r3, r4
 80018f8:	d000      	beq.n	80018fc <__aeabi_dsub+0x40c>
 80018fa:	e652      	b.n	80015a2 <__aeabi_dsub+0xb2>
 80018fc:	2400      	movs	r4, #0
 80018fe:	2500      	movs	r5, #0
 8001900:	e771      	b.n	80017e6 <__aeabi_dsub+0x2f6>
 8001902:	4339      	orrs	r1, r7
 8001904:	000c      	movs	r4, r1
 8001906:	1e62      	subs	r2, r4, #1
 8001908:	4194      	sbcs	r4, r2
 800190a:	18e4      	adds	r4, r4, r3
 800190c:	429c      	cmp	r4, r3
 800190e:	419b      	sbcs	r3, r3
 8001910:	425b      	negs	r3, r3
 8001912:	4463      	add	r3, ip
 8001914:	4699      	mov	r9, r3
 8001916:	464b      	mov	r3, r9
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	d400      	bmi.n	800191e <__aeabi_dsub+0x42e>
 800191c:	e756      	b.n	80017cc <__aeabi_dsub+0x2dc>
 800191e:	2301      	movs	r3, #1
 8001920:	469c      	mov	ip, r3
 8001922:	4ba8      	ldr	r3, [pc, #672]	; (8001bc4 <__aeabi_dsub+0x6d4>)
 8001924:	44e0      	add	r8, ip
 8001926:	4598      	cmp	r8, r3
 8001928:	d038      	beq.n	800199c <__aeabi_dsub+0x4ac>
 800192a:	464b      	mov	r3, r9
 800192c:	48a6      	ldr	r0, [pc, #664]	; (8001bc8 <__aeabi_dsub+0x6d8>)
 800192e:	2201      	movs	r2, #1
 8001930:	4003      	ands	r3, r0
 8001932:	0018      	movs	r0, r3
 8001934:	0863      	lsrs	r3, r4, #1
 8001936:	4014      	ands	r4, r2
 8001938:	431c      	orrs	r4, r3
 800193a:	07c3      	lsls	r3, r0, #31
 800193c:	431c      	orrs	r4, r3
 800193e:	0843      	lsrs	r3, r0, #1
 8001940:	4699      	mov	r9, r3
 8001942:	e657      	b.n	80015f4 <__aeabi_dsub+0x104>
 8001944:	0010      	movs	r0, r2
 8001946:	000e      	movs	r6, r1
 8001948:	3820      	subs	r0, #32
 800194a:	40c6      	lsrs	r6, r0
 800194c:	2a20      	cmp	r2, #32
 800194e:	d004      	beq.n	800195a <__aeabi_dsub+0x46a>
 8001950:	2040      	movs	r0, #64	; 0x40
 8001952:	1a82      	subs	r2, r0, r2
 8001954:	4091      	lsls	r1, r2
 8001956:	430f      	orrs	r7, r1
 8001958:	46b9      	mov	r9, r7
 800195a:	464f      	mov	r7, r9
 800195c:	1e7a      	subs	r2, r7, #1
 800195e:	4197      	sbcs	r7, r2
 8001960:	4337      	orrs	r7, r6
 8001962:	e60f      	b.n	8001584 <__aeabi_dsub+0x94>
 8001964:	4662      	mov	r2, ip
 8001966:	431a      	orrs	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	1e5a      	subs	r2, r3, #1
 800196c:	4193      	sbcs	r3, r2
 800196e:	1afc      	subs	r4, r7, r3
 8001970:	42a7      	cmp	r7, r4
 8001972:	41bf      	sbcs	r7, r7
 8001974:	427f      	negs	r7, r7
 8001976:	1bcb      	subs	r3, r1, r7
 8001978:	4699      	mov	r9, r3
 800197a:	465d      	mov	r5, fp
 800197c:	4680      	mov	r8, r0
 800197e:	e608      	b.n	8001592 <__aeabi_dsub+0xa2>
 8001980:	4666      	mov	r6, ip
 8001982:	431e      	orrs	r6, r3
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x498>
 8001986:	e0be      	b.n	8001b06 <__aeabi_dsub+0x616>
 8001988:	1e56      	subs	r6, r2, #1
 800198a:	2a01      	cmp	r2, #1
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x4a0>
 800198e:	e109      	b.n	8001ba4 <__aeabi_dsub+0x6b4>
 8001990:	4c8c      	ldr	r4, [pc, #560]	; (8001bc4 <__aeabi_dsub+0x6d4>)
 8001992:	42a2      	cmp	r2, r4
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x4a8>
 8001996:	e119      	b.n	8001bcc <__aeabi_dsub+0x6dc>
 8001998:	0032      	movs	r2, r6
 800199a:	e6c1      	b.n	8001720 <__aeabi_dsub+0x230>
 800199c:	4642      	mov	r2, r8
 800199e:	2400      	movs	r4, #0
 80019a0:	2300      	movs	r3, #0
 80019a2:	e648      	b.n	8001636 <__aeabi_dsub+0x146>
 80019a4:	2020      	movs	r0, #32
 80019a6:	000c      	movs	r4, r1
 80019a8:	1a80      	subs	r0, r0, r2
 80019aa:	003e      	movs	r6, r7
 80019ac:	4087      	lsls	r7, r0
 80019ae:	4084      	lsls	r4, r0
 80019b0:	40d6      	lsrs	r6, r2
 80019b2:	1e78      	subs	r0, r7, #1
 80019b4:	4187      	sbcs	r7, r0
 80019b6:	40d1      	lsrs	r1, r2
 80019b8:	4334      	orrs	r4, r6
 80019ba:	433c      	orrs	r4, r7
 80019bc:	448c      	add	ip, r1
 80019be:	e7a4      	b.n	800190a <__aeabi_dsub+0x41a>
 80019c0:	4a80      	ldr	r2, [pc, #512]	; (8001bc4 <__aeabi_dsub+0x6d4>)
 80019c2:	4290      	cmp	r0, r2
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x4d8>
 80019c6:	e0e9      	b.n	8001b9c <__aeabi_dsub+0x6ac>
 80019c8:	19df      	adds	r7, r3, r7
 80019ca:	429f      	cmp	r7, r3
 80019cc:	419b      	sbcs	r3, r3
 80019ce:	4461      	add	r1, ip
 80019d0:	425b      	negs	r3, r3
 80019d2:	18c9      	adds	r1, r1, r3
 80019d4:	07cc      	lsls	r4, r1, #31
 80019d6:	087f      	lsrs	r7, r7, #1
 80019d8:	084b      	lsrs	r3, r1, #1
 80019da:	4699      	mov	r9, r3
 80019dc:	4680      	mov	r8, r0
 80019de:	433c      	orrs	r4, r7
 80019e0:	e6f4      	b.n	80017cc <__aeabi_dsub+0x2dc>
 80019e2:	1afc      	subs	r4, r7, r3
 80019e4:	42a7      	cmp	r7, r4
 80019e6:	41bf      	sbcs	r7, r7
 80019e8:	4663      	mov	r3, ip
 80019ea:	427f      	negs	r7, r7
 80019ec:	1ac9      	subs	r1, r1, r3
 80019ee:	1bcb      	subs	r3, r1, r7
 80019f0:	4699      	mov	r9, r3
 80019f2:	465d      	mov	r5, fp
 80019f4:	e5d5      	b.n	80015a2 <__aeabi_dsub+0xb2>
 80019f6:	08ff      	lsrs	r7, r7, #3
 80019f8:	074b      	lsls	r3, r1, #29
 80019fa:	465d      	mov	r5, fp
 80019fc:	433b      	orrs	r3, r7
 80019fe:	08cc      	lsrs	r4, r1, #3
 8001a00:	e6ee      	b.n	80017e0 <__aeabi_dsub+0x2f0>
 8001a02:	4662      	mov	r2, ip
 8001a04:	431a      	orrs	r2, r3
 8001a06:	d000      	beq.n	8001a0a <__aeabi_dsub+0x51a>
 8001a08:	e082      	b.n	8001b10 <__aeabi_dsub+0x620>
 8001a0a:	000b      	movs	r3, r1
 8001a0c:	433b      	orrs	r3, r7
 8001a0e:	d11b      	bne.n	8001a48 <__aeabi_dsub+0x558>
 8001a10:	2480      	movs	r4, #128	; 0x80
 8001a12:	2500      	movs	r5, #0
 8001a14:	0324      	lsls	r4, r4, #12
 8001a16:	e6f9      	b.n	800180c <__aeabi_dsub+0x31c>
 8001a18:	19dc      	adds	r4, r3, r7
 8001a1a:	429c      	cmp	r4, r3
 8001a1c:	419b      	sbcs	r3, r3
 8001a1e:	4461      	add	r1, ip
 8001a20:	4689      	mov	r9, r1
 8001a22:	425b      	negs	r3, r3
 8001a24:	4499      	add	r9, r3
 8001a26:	464b      	mov	r3, r9
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	d444      	bmi.n	8001ab6 <__aeabi_dsub+0x5c6>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4698      	mov	r8, r3
 8001a30:	e6cc      	b.n	80017cc <__aeabi_dsub+0x2dc>
 8001a32:	1bdc      	subs	r4, r3, r7
 8001a34:	4662      	mov	r2, ip
 8001a36:	42a3      	cmp	r3, r4
 8001a38:	419b      	sbcs	r3, r3
 8001a3a:	1a51      	subs	r1, r2, r1
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	1acb      	subs	r3, r1, r3
 8001a40:	4699      	mov	r9, r3
 8001a42:	2301      	movs	r3, #1
 8001a44:	4698      	mov	r8, r3
 8001a46:	e5a4      	b.n	8001592 <__aeabi_dsub+0xa2>
 8001a48:	08ff      	lsrs	r7, r7, #3
 8001a4a:	074b      	lsls	r3, r1, #29
 8001a4c:	465d      	mov	r5, fp
 8001a4e:	433b      	orrs	r3, r7
 8001a50:	08cc      	lsrs	r4, r1, #3
 8001a52:	e6d7      	b.n	8001804 <__aeabi_dsub+0x314>
 8001a54:	4662      	mov	r2, ip
 8001a56:	431a      	orrs	r2, r3
 8001a58:	0014      	movs	r4, r2
 8001a5a:	1e63      	subs	r3, r4, #1
 8001a5c:	419c      	sbcs	r4, r3
 8001a5e:	e679      	b.n	8001754 <__aeabi_dsub+0x264>
 8001a60:	0015      	movs	r5, r2
 8001a62:	4664      	mov	r4, ip
 8001a64:	3d20      	subs	r5, #32
 8001a66:	40ec      	lsrs	r4, r5
 8001a68:	46a0      	mov	r8, r4
 8001a6a:	2a20      	cmp	r2, #32
 8001a6c:	d005      	beq.n	8001a7a <__aeabi_dsub+0x58a>
 8001a6e:	2540      	movs	r5, #64	; 0x40
 8001a70:	4664      	mov	r4, ip
 8001a72:	1aaa      	subs	r2, r5, r2
 8001a74:	4094      	lsls	r4, r2
 8001a76:	4323      	orrs	r3, r4
 8001a78:	469a      	mov	sl, r3
 8001a7a:	4654      	mov	r4, sl
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4643      	mov	r3, r8
 8001a82:	4323      	orrs	r3, r4
 8001a84:	e773      	b.n	800196e <__aeabi_dsub+0x47e>
 8001a86:	4662      	mov	r2, ip
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	d023      	beq.n	8001ad4 <__aeabi_dsub+0x5e4>
 8001a8c:	000a      	movs	r2, r1
 8001a8e:	433a      	orrs	r2, r7
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x5a4>
 8001a92:	e0a0      	b.n	8001bd6 <__aeabi_dsub+0x6e6>
 8001a94:	4662      	mov	r2, ip
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	0752      	lsls	r2, r2, #29
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	4662      	mov	r2, ip
 8001a9e:	08d4      	lsrs	r4, r2, #3
 8001aa0:	e6b0      	b.n	8001804 <__aeabi_dsub+0x314>
 8001aa2:	000b      	movs	r3, r1
 8001aa4:	433b      	orrs	r3, r7
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dsub+0x5ba>
 8001aa8:	e728      	b.n	80018fc <__aeabi_dsub+0x40c>
 8001aaa:	08ff      	lsrs	r7, r7, #3
 8001aac:	074b      	lsls	r3, r1, #29
 8001aae:	465d      	mov	r5, fp
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	08cc      	lsrs	r4, r1, #3
 8001ab4:	e697      	b.n	80017e6 <__aeabi_dsub+0x2f6>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	4698      	mov	r8, r3
 8001aba:	e736      	b.n	800192a <__aeabi_dsub+0x43a>
 8001abc:	1afc      	subs	r4, r7, r3
 8001abe:	42a7      	cmp	r7, r4
 8001ac0:	41bf      	sbcs	r7, r7
 8001ac2:	4663      	mov	r3, ip
 8001ac4:	427f      	negs	r7, r7
 8001ac6:	1ac9      	subs	r1, r1, r3
 8001ac8:	1bcb      	subs	r3, r1, r7
 8001aca:	4699      	mov	r9, r3
 8001acc:	2301      	movs	r3, #1
 8001ace:	465d      	mov	r5, fp
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	e55e      	b.n	8001592 <__aeabi_dsub+0xa2>
 8001ad4:	074b      	lsls	r3, r1, #29
 8001ad6:	08ff      	lsrs	r7, r7, #3
 8001ad8:	433b      	orrs	r3, r7
 8001ada:	08cc      	lsrs	r4, r1, #3
 8001adc:	e692      	b.n	8001804 <__aeabi_dsub+0x314>
 8001ade:	1bdc      	subs	r4, r3, r7
 8001ae0:	4660      	mov	r0, ip
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41b6      	sbcs	r6, r6
 8001ae6:	1a40      	subs	r0, r0, r1
 8001ae8:	4276      	negs	r6, r6
 8001aea:	1b80      	subs	r0, r0, r6
 8001aec:	4681      	mov	r9, r0
 8001aee:	0200      	lsls	r0, r0, #8
 8001af0:	d560      	bpl.n	8001bb4 <__aeabi_dsub+0x6c4>
 8001af2:	1afc      	subs	r4, r7, r3
 8001af4:	42a7      	cmp	r7, r4
 8001af6:	41bf      	sbcs	r7, r7
 8001af8:	4663      	mov	r3, ip
 8001afa:	427f      	negs	r7, r7
 8001afc:	1ac9      	subs	r1, r1, r3
 8001afe:	1bcb      	subs	r3, r1, r7
 8001b00:	4699      	mov	r9, r3
 8001b02:	465d      	mov	r5, fp
 8001b04:	e576      	b.n	80015f4 <__aeabi_dsub+0x104>
 8001b06:	08ff      	lsrs	r7, r7, #3
 8001b08:	074b      	lsls	r3, r1, #29
 8001b0a:	433b      	orrs	r3, r7
 8001b0c:	08cc      	lsrs	r4, r1, #3
 8001b0e:	e667      	b.n	80017e0 <__aeabi_dsub+0x2f0>
 8001b10:	000a      	movs	r2, r1
 8001b12:	08db      	lsrs	r3, r3, #3
 8001b14:	433a      	orrs	r2, r7
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x62a>
 8001b18:	e66f      	b.n	80017fa <__aeabi_dsub+0x30a>
 8001b1a:	4662      	mov	r2, ip
 8001b1c:	0752      	lsls	r2, r2, #29
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	4662      	mov	r2, ip
 8001b22:	08d4      	lsrs	r4, r2, #3
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	0312      	lsls	r2, r2, #12
 8001b28:	4214      	tst	r4, r2
 8001b2a:	d007      	beq.n	8001b3c <__aeabi_dsub+0x64c>
 8001b2c:	08c8      	lsrs	r0, r1, #3
 8001b2e:	4210      	tst	r0, r2
 8001b30:	d104      	bne.n	8001b3c <__aeabi_dsub+0x64c>
 8001b32:	465d      	mov	r5, fp
 8001b34:	0004      	movs	r4, r0
 8001b36:	08fb      	lsrs	r3, r7, #3
 8001b38:	0749      	lsls	r1, r1, #29
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	0f5a      	lsrs	r2, r3, #29
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	0752      	lsls	r2, r2, #29
 8001b44:	4313      	orrs	r3, r2
 8001b46:	e65d      	b.n	8001804 <__aeabi_dsub+0x314>
 8001b48:	074b      	lsls	r3, r1, #29
 8001b4a:	08ff      	lsrs	r7, r7, #3
 8001b4c:	433b      	orrs	r3, r7
 8001b4e:	08cc      	lsrs	r4, r1, #3
 8001b50:	e649      	b.n	80017e6 <__aeabi_dsub+0x2f6>
 8001b52:	19dc      	adds	r4, r3, r7
 8001b54:	429c      	cmp	r4, r3
 8001b56:	419b      	sbcs	r3, r3
 8001b58:	4461      	add	r1, ip
 8001b5a:	4689      	mov	r9, r1
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	4499      	add	r9, r3
 8001b60:	464b      	mov	r3, r9
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	d400      	bmi.n	8001b68 <__aeabi_dsub+0x678>
 8001b66:	e631      	b.n	80017cc <__aeabi_dsub+0x2dc>
 8001b68:	464a      	mov	r2, r9
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <__aeabi_dsub+0x6d8>)
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	2301      	movs	r3, #1
 8001b70:	4691      	mov	r9, r2
 8001b72:	4698      	mov	r8, r3
 8001b74:	e62a      	b.n	80017cc <__aeabi_dsub+0x2dc>
 8001b76:	0016      	movs	r6, r2
 8001b78:	4664      	mov	r4, ip
 8001b7a:	3e20      	subs	r6, #32
 8001b7c:	40f4      	lsrs	r4, r6
 8001b7e:	46a0      	mov	r8, r4
 8001b80:	2a20      	cmp	r2, #32
 8001b82:	d005      	beq.n	8001b90 <__aeabi_dsub+0x6a0>
 8001b84:	2640      	movs	r6, #64	; 0x40
 8001b86:	4664      	mov	r4, ip
 8001b88:	1ab2      	subs	r2, r6, r2
 8001b8a:	4094      	lsls	r4, r2
 8001b8c:	4323      	orrs	r3, r4
 8001b8e:	469a      	mov	sl, r3
 8001b90:	4654      	mov	r4, sl
 8001b92:	1e63      	subs	r3, r4, #1
 8001b94:	419c      	sbcs	r4, r3
 8001b96:	4643      	mov	r3, r8
 8001b98:	431c      	orrs	r4, r3
 8001b9a:	e5db      	b.n	8001754 <__aeabi_dsub+0x264>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e548      	b.n	8001636 <__aeabi_dsub+0x146>
 8001ba4:	19dc      	adds	r4, r3, r7
 8001ba6:	42bc      	cmp	r4, r7
 8001ba8:	41bf      	sbcs	r7, r7
 8001baa:	4461      	add	r1, ip
 8001bac:	4689      	mov	r9, r1
 8001bae:	427f      	negs	r7, r7
 8001bb0:	44b9      	add	r9, r7
 8001bb2:	e738      	b.n	8001a26 <__aeabi_dsub+0x536>
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x6cc>
 8001bba:	e69f      	b.n	80018fc <__aeabi_dsub+0x40c>
 8001bbc:	e606      	b.n	80017cc <__aeabi_dsub+0x2dc>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	000007fe 	.word	0x000007fe
 8001bc4:	000007ff 	.word	0x000007ff
 8001bc8:	ff7fffff 	.word	0xff7fffff
 8001bcc:	08ff      	lsrs	r7, r7, #3
 8001bce:	074b      	lsls	r3, r1, #29
 8001bd0:	433b      	orrs	r3, r7
 8001bd2:	08cc      	lsrs	r4, r1, #3
 8001bd4:	e616      	b.n	8001804 <__aeabi_dsub+0x314>
 8001bd6:	4662      	mov	r2, ip
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	0752      	lsls	r2, r2, #29
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	4662      	mov	r2, ip
 8001be0:	08d4      	lsrs	r4, r2, #3
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	0312      	lsls	r2, r2, #12
 8001be6:	4214      	tst	r4, r2
 8001be8:	d007      	beq.n	8001bfa <__aeabi_dsub+0x70a>
 8001bea:	08c8      	lsrs	r0, r1, #3
 8001bec:	4210      	tst	r0, r2
 8001bee:	d104      	bne.n	8001bfa <__aeabi_dsub+0x70a>
 8001bf0:	465d      	mov	r5, fp
 8001bf2:	0004      	movs	r4, r0
 8001bf4:	08fb      	lsrs	r3, r7, #3
 8001bf6:	0749      	lsls	r1, r1, #29
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	0f5a      	lsrs	r2, r3, #29
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	0752      	lsls	r2, r2, #29
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	e5fe      	b.n	8001804 <__aeabi_dsub+0x314>
 8001c06:	2300      	movs	r3, #0
 8001c08:	4a01      	ldr	r2, [pc, #4]	; (8001c10 <__aeabi_dsub+0x720>)
 8001c0a:	001c      	movs	r4, r3
 8001c0c:	e513      	b.n	8001636 <__aeabi_dsub+0x146>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	000007ff 	.word	0x000007ff

08001c14 <__aeabi_d2iz>:
 8001c14:	000a      	movs	r2, r1
 8001c16:	b530      	push	{r4, r5, lr}
 8001c18:	4c13      	ldr	r4, [pc, #76]	; (8001c68 <__aeabi_d2iz+0x54>)
 8001c1a:	0053      	lsls	r3, r2, #1
 8001c1c:	0309      	lsls	r1, r1, #12
 8001c1e:	0005      	movs	r5, r0
 8001c20:	0b09      	lsrs	r1, r1, #12
 8001c22:	2000      	movs	r0, #0
 8001c24:	0d5b      	lsrs	r3, r3, #21
 8001c26:	0fd2      	lsrs	r2, r2, #31
 8001c28:	42a3      	cmp	r3, r4
 8001c2a:	dd04      	ble.n	8001c36 <__aeabi_d2iz+0x22>
 8001c2c:	480f      	ldr	r0, [pc, #60]	; (8001c6c <__aeabi_d2iz+0x58>)
 8001c2e:	4283      	cmp	r3, r0
 8001c30:	dd02      	ble.n	8001c38 <__aeabi_d2iz+0x24>
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <__aeabi_d2iz+0x5c>)
 8001c34:	18d0      	adds	r0, r2, r3
 8001c36:	bd30      	pop	{r4, r5, pc}
 8001c38:	2080      	movs	r0, #128	; 0x80
 8001c3a:	0340      	lsls	r0, r0, #13
 8001c3c:	4301      	orrs	r1, r0
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <__aeabi_d2iz+0x60>)
 8001c40:	1ac0      	subs	r0, r0, r3
 8001c42:	281f      	cmp	r0, #31
 8001c44:	dd08      	ble.n	8001c58 <__aeabi_d2iz+0x44>
 8001c46:	480c      	ldr	r0, [pc, #48]	; (8001c78 <__aeabi_d2iz+0x64>)
 8001c48:	1ac3      	subs	r3, r0, r3
 8001c4a:	40d9      	lsrs	r1, r3
 8001c4c:	000b      	movs	r3, r1
 8001c4e:	4258      	negs	r0, r3
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d1f0      	bne.n	8001c36 <__aeabi_d2iz+0x22>
 8001c54:	0018      	movs	r0, r3
 8001c56:	e7ee      	b.n	8001c36 <__aeabi_d2iz+0x22>
 8001c58:	4c08      	ldr	r4, [pc, #32]	; (8001c7c <__aeabi_d2iz+0x68>)
 8001c5a:	40c5      	lsrs	r5, r0
 8001c5c:	46a4      	mov	ip, r4
 8001c5e:	4463      	add	r3, ip
 8001c60:	4099      	lsls	r1, r3
 8001c62:	000b      	movs	r3, r1
 8001c64:	432b      	orrs	r3, r5
 8001c66:	e7f2      	b.n	8001c4e <__aeabi_d2iz+0x3a>
 8001c68:	000003fe 	.word	0x000003fe
 8001c6c:	0000041d 	.word	0x0000041d
 8001c70:	7fffffff 	.word	0x7fffffff
 8001c74:	00000433 	.word	0x00000433
 8001c78:	00000413 	.word	0x00000413
 8001c7c:	fffffbed 	.word	0xfffffbed

08001c80 <__aeabi_f2d>:
 8001c80:	b570      	push	{r4, r5, r6, lr}
 8001c82:	0043      	lsls	r3, r0, #1
 8001c84:	0246      	lsls	r6, r0, #9
 8001c86:	0fc4      	lsrs	r4, r0, #31
 8001c88:	20fe      	movs	r0, #254	; 0xfe
 8001c8a:	0e1b      	lsrs	r3, r3, #24
 8001c8c:	1c59      	adds	r1, r3, #1
 8001c8e:	0a75      	lsrs	r5, r6, #9
 8001c90:	4208      	tst	r0, r1
 8001c92:	d00c      	beq.n	8001cae <__aeabi_f2d+0x2e>
 8001c94:	22e0      	movs	r2, #224	; 0xe0
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	4694      	mov	ip, r2
 8001c9a:	076d      	lsls	r5, r5, #29
 8001c9c:	0b36      	lsrs	r6, r6, #12
 8001c9e:	4463      	add	r3, ip
 8001ca0:	051b      	lsls	r3, r3, #20
 8001ca2:	4333      	orrs	r3, r6
 8001ca4:	07e4      	lsls	r4, r4, #31
 8001ca6:	4323      	orrs	r3, r4
 8001ca8:	0028      	movs	r0, r5
 8001caa:	0019      	movs	r1, r3
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d114      	bne.n	8001cdc <__aeabi_f2d+0x5c>
 8001cb2:	2d00      	cmp	r5, #0
 8001cb4:	d01b      	beq.n	8001cee <__aeabi_f2d+0x6e>
 8001cb6:	0028      	movs	r0, r5
 8001cb8:	f000 f8a2 	bl	8001e00 <__clzsi2>
 8001cbc:	280a      	cmp	r0, #10
 8001cbe:	dc1c      	bgt.n	8001cfa <__aeabi_f2d+0x7a>
 8001cc0:	230b      	movs	r3, #11
 8001cc2:	002e      	movs	r6, r5
 8001cc4:	1a1b      	subs	r3, r3, r0
 8001cc6:	40de      	lsrs	r6, r3
 8001cc8:	0003      	movs	r3, r0
 8001cca:	3315      	adds	r3, #21
 8001ccc:	409d      	lsls	r5, r3
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <__aeabi_f2d+0x88>)
 8001cd0:	0336      	lsls	r6, r6, #12
 8001cd2:	1a12      	subs	r2, r2, r0
 8001cd4:	0552      	lsls	r2, r2, #21
 8001cd6:	0b36      	lsrs	r6, r6, #12
 8001cd8:	0d53      	lsrs	r3, r2, #21
 8001cda:	e7e1      	b.n	8001ca0 <__aeabi_f2d+0x20>
 8001cdc:	2d00      	cmp	r5, #0
 8001cde:	d009      	beq.n	8001cf4 <__aeabi_f2d+0x74>
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	0b36      	lsrs	r6, r6, #12
 8001ce4:	0312      	lsls	r2, r2, #12
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <__aeabi_f2d+0x8c>)
 8001ce8:	076d      	lsls	r5, r5, #29
 8001cea:	4316      	orrs	r6, r2
 8001cec:	e7d8      	b.n	8001ca0 <__aeabi_f2d+0x20>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	2600      	movs	r6, #0
 8001cf2:	e7d5      	b.n	8001ca0 <__aeabi_f2d+0x20>
 8001cf4:	2600      	movs	r6, #0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <__aeabi_f2d+0x8c>)
 8001cf8:	e7d2      	b.n	8001ca0 <__aeabi_f2d+0x20>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	3b0b      	subs	r3, #11
 8001cfe:	409d      	lsls	r5, r3
 8001d00:	002e      	movs	r6, r5
 8001d02:	2500      	movs	r5, #0
 8001d04:	e7e3      	b.n	8001cce <__aeabi_f2d+0x4e>
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	00000389 	.word	0x00000389
 8001d0c:	000007ff 	.word	0x000007ff

08001d10 <__aeabi_cdrcmple>:
 8001d10:	4684      	mov	ip, r0
 8001d12:	0010      	movs	r0, r2
 8001d14:	4662      	mov	r2, ip
 8001d16:	468c      	mov	ip, r1
 8001d18:	0019      	movs	r1, r3
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	e000      	b.n	8001d20 <__aeabi_cdcmpeq>
 8001d1e:	46c0      	nop			; (mov r8, r8)

08001d20 <__aeabi_cdcmpeq>:
 8001d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d22:	f000 f9e3 	bl	80020ec <__ledf2>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d401      	bmi.n	8001d2e <__aeabi_cdcmpeq+0xe>
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	42c8      	cmn	r0, r1
 8001d2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d30 <__aeabi_dcmpeq>:
 8001d30:	b510      	push	{r4, lr}
 8001d32:	f000 f933 	bl	8001f9c <__eqdf2>
 8001d36:	4240      	negs	r0, r0
 8001d38:	3001      	adds	r0, #1
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <__aeabi_dcmplt>:
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	f000 f9d5 	bl	80020ec <__ledf2>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	db01      	blt.n	8001d4a <__aeabi_dcmplt+0xe>
 8001d46:	2000      	movs	r0, #0
 8001d48:	bd10      	pop	{r4, pc}
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)

08001d50 <__aeabi_dcmple>:
 8001d50:	b510      	push	{r4, lr}
 8001d52:	f000 f9cb 	bl	80020ec <__ledf2>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	dd01      	ble.n	8001d5e <__aeabi_dcmple+0xe>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	2001      	movs	r0, #1
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)

08001d64 <__aeabi_dcmpgt>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	f000 f95b 	bl	8002020 <__gedf2>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	dc01      	bgt.n	8001d72 <__aeabi_dcmpgt+0xe>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	2001      	movs	r0, #1
 8001d74:	bd10      	pop	{r4, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)

08001d78 <__aeabi_dcmpge>:
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	f000 f951 	bl	8002020 <__gedf2>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	da01      	bge.n	8001d86 <__aeabi_dcmpge+0xe>
 8001d82:	2000      	movs	r0, #0
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	2001      	movs	r0, #1
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)

08001d8c <__aeabi_cfrcmple>:
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	0008      	movs	r0, r1
 8001d90:	4661      	mov	r1, ip
 8001d92:	e7ff      	b.n	8001d94 <__aeabi_cfcmpeq>

08001d94 <__aeabi_cfcmpeq>:
 8001d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d96:	f000 f8bd 	bl	8001f14 <__lesf2>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d401      	bmi.n	8001da2 <__aeabi_cfcmpeq+0xe>
 8001d9e:	2100      	movs	r1, #0
 8001da0:	42c8      	cmn	r0, r1
 8001da2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001da4 <__aeabi_fcmpeq>:
 8001da4:	b510      	push	{r4, lr}
 8001da6:	f000 f849 	bl	8001e3c <__eqsf2>
 8001daa:	4240      	negs	r0, r0
 8001dac:	3001      	adds	r0, #1
 8001dae:	bd10      	pop	{r4, pc}

08001db0 <__aeabi_fcmplt>:
 8001db0:	b510      	push	{r4, lr}
 8001db2:	f000 f8af 	bl	8001f14 <__lesf2>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	db01      	blt.n	8001dbe <__aeabi_fcmplt+0xe>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)

08001dc4 <__aeabi_fcmple>:
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	f000 f8a5 	bl	8001f14 <__lesf2>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	dd01      	ble.n	8001dd2 <__aeabi_fcmple+0xe>
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd10      	pop	{r4, pc}
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	bd10      	pop	{r4, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)

08001dd8 <__aeabi_fcmpgt>:
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	f000 f855 	bl	8001e88 <__gesf2>
 8001dde:	2800      	cmp	r0, #0
 8001de0:	dc01      	bgt.n	8001de6 <__aeabi_fcmpgt+0xe>
 8001de2:	2000      	movs	r0, #0
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	2001      	movs	r0, #1
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)

08001dec <__aeabi_fcmpge>:
 8001dec:	b510      	push	{r4, lr}
 8001dee:	f000 f84b 	bl	8001e88 <__gesf2>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	da01      	bge.n	8001dfa <__aeabi_fcmpge+0xe>
 8001df6:	2000      	movs	r0, #0
 8001df8:	bd10      	pop	{r4, pc}
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	bd10      	pop	{r4, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)

08001e00 <__clzsi2>:
 8001e00:	211c      	movs	r1, #28
 8001e02:	2301      	movs	r3, #1
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	4298      	cmp	r0, r3
 8001e08:	d301      	bcc.n	8001e0e <__clzsi2+0xe>
 8001e0a:	0c00      	lsrs	r0, r0, #16
 8001e0c:	3910      	subs	r1, #16
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	4298      	cmp	r0, r3
 8001e12:	d301      	bcc.n	8001e18 <__clzsi2+0x18>
 8001e14:	0a00      	lsrs	r0, r0, #8
 8001e16:	3908      	subs	r1, #8
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	4298      	cmp	r0, r3
 8001e1c:	d301      	bcc.n	8001e22 <__clzsi2+0x22>
 8001e1e:	0900      	lsrs	r0, r0, #4
 8001e20:	3904      	subs	r1, #4
 8001e22:	a202      	add	r2, pc, #8	; (adr r2, 8001e2c <__clzsi2+0x2c>)
 8001e24:	5c10      	ldrb	r0, [r2, r0]
 8001e26:	1840      	adds	r0, r0, r1
 8001e28:	4770      	bx	lr
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	02020304 	.word	0x02020304
 8001e30:	01010101 	.word	0x01010101
	...

08001e3c <__eqsf2>:
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	0042      	lsls	r2, r0, #1
 8001e40:	0245      	lsls	r5, r0, #9
 8001e42:	024e      	lsls	r6, r1, #9
 8001e44:	004c      	lsls	r4, r1, #1
 8001e46:	0fc3      	lsrs	r3, r0, #31
 8001e48:	0a6d      	lsrs	r5, r5, #9
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	0e12      	lsrs	r2, r2, #24
 8001e4e:	0a76      	lsrs	r6, r6, #9
 8001e50:	0e24      	lsrs	r4, r4, #24
 8001e52:	0fc9      	lsrs	r1, r1, #31
 8001e54:	2aff      	cmp	r2, #255	; 0xff
 8001e56:	d006      	beq.n	8001e66 <__eqsf2+0x2a>
 8001e58:	2cff      	cmp	r4, #255	; 0xff
 8001e5a:	d003      	beq.n	8001e64 <__eqsf2+0x28>
 8001e5c:	42a2      	cmp	r2, r4
 8001e5e:	d101      	bne.n	8001e64 <__eqsf2+0x28>
 8001e60:	42b5      	cmp	r5, r6
 8001e62:	d006      	beq.n	8001e72 <__eqsf2+0x36>
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
 8001e66:	2d00      	cmp	r5, #0
 8001e68:	d1fc      	bne.n	8001e64 <__eqsf2+0x28>
 8001e6a:	2cff      	cmp	r4, #255	; 0xff
 8001e6c:	d1fa      	bne.n	8001e64 <__eqsf2+0x28>
 8001e6e:	2e00      	cmp	r6, #0
 8001e70:	d1f8      	bne.n	8001e64 <__eqsf2+0x28>
 8001e72:	428b      	cmp	r3, r1
 8001e74:	d006      	beq.n	8001e84 <__eqsf2+0x48>
 8001e76:	2001      	movs	r0, #1
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d1f3      	bne.n	8001e64 <__eqsf2+0x28>
 8001e7c:	0028      	movs	r0, r5
 8001e7e:	1e43      	subs	r3, r0, #1
 8001e80:	4198      	sbcs	r0, r3
 8001e82:	e7ef      	b.n	8001e64 <__eqsf2+0x28>
 8001e84:	2000      	movs	r0, #0
 8001e86:	e7ed      	b.n	8001e64 <__eqsf2+0x28>

08001e88 <__gesf2>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	0042      	lsls	r2, r0, #1
 8001e8c:	0245      	lsls	r5, r0, #9
 8001e8e:	024e      	lsls	r6, r1, #9
 8001e90:	004c      	lsls	r4, r1, #1
 8001e92:	0fc3      	lsrs	r3, r0, #31
 8001e94:	0a6d      	lsrs	r5, r5, #9
 8001e96:	0e12      	lsrs	r2, r2, #24
 8001e98:	0a76      	lsrs	r6, r6, #9
 8001e9a:	0e24      	lsrs	r4, r4, #24
 8001e9c:	0fc8      	lsrs	r0, r1, #31
 8001e9e:	2aff      	cmp	r2, #255	; 0xff
 8001ea0:	d01b      	beq.n	8001eda <__gesf2+0x52>
 8001ea2:	2cff      	cmp	r4, #255	; 0xff
 8001ea4:	d00e      	beq.n	8001ec4 <__gesf2+0x3c>
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	d11b      	bne.n	8001ee2 <__gesf2+0x5a>
 8001eaa:	2c00      	cmp	r4, #0
 8001eac:	d101      	bne.n	8001eb2 <__gesf2+0x2a>
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	d01c      	beq.n	8001eec <__gesf2+0x64>
 8001eb2:	2d00      	cmp	r5, #0
 8001eb4:	d00c      	beq.n	8001ed0 <__gesf2+0x48>
 8001eb6:	4283      	cmp	r3, r0
 8001eb8:	d01c      	beq.n	8001ef4 <__gesf2+0x6c>
 8001eba:	2102      	movs	r1, #2
 8001ebc:	1e58      	subs	r0, r3, #1
 8001ebe:	4008      	ands	r0, r1
 8001ec0:	3801      	subs	r0, #1
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	2e00      	cmp	r6, #0
 8001ec6:	d122      	bne.n	8001f0e <__gesf2+0x86>
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d1f4      	bne.n	8001eb6 <__gesf2+0x2e>
 8001ecc:	2d00      	cmp	r5, #0
 8001ece:	d1f2      	bne.n	8001eb6 <__gesf2+0x2e>
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d1f6      	bne.n	8001ec2 <__gesf2+0x3a>
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	4240      	negs	r0, r0
 8001ed8:	e7f3      	b.n	8001ec2 <__gesf2+0x3a>
 8001eda:	2d00      	cmp	r5, #0
 8001edc:	d117      	bne.n	8001f0e <__gesf2+0x86>
 8001ede:	2cff      	cmp	r4, #255	; 0xff
 8001ee0:	d0f0      	beq.n	8001ec4 <__gesf2+0x3c>
 8001ee2:	2c00      	cmp	r4, #0
 8001ee4:	d1e7      	bne.n	8001eb6 <__gesf2+0x2e>
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d1e5      	bne.n	8001eb6 <__gesf2+0x2e>
 8001eea:	e7e6      	b.n	8001eba <__gesf2+0x32>
 8001eec:	2000      	movs	r0, #0
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d0e7      	beq.n	8001ec2 <__gesf2+0x3a>
 8001ef2:	e7e2      	b.n	8001eba <__gesf2+0x32>
 8001ef4:	42a2      	cmp	r2, r4
 8001ef6:	dc05      	bgt.n	8001f04 <__gesf2+0x7c>
 8001ef8:	dbea      	blt.n	8001ed0 <__gesf2+0x48>
 8001efa:	42b5      	cmp	r5, r6
 8001efc:	d802      	bhi.n	8001f04 <__gesf2+0x7c>
 8001efe:	d3e7      	bcc.n	8001ed0 <__gesf2+0x48>
 8001f00:	2000      	movs	r0, #0
 8001f02:	e7de      	b.n	8001ec2 <__gesf2+0x3a>
 8001f04:	4243      	negs	r3, r0
 8001f06:	4158      	adcs	r0, r3
 8001f08:	0040      	lsls	r0, r0, #1
 8001f0a:	3801      	subs	r0, #1
 8001f0c:	e7d9      	b.n	8001ec2 <__gesf2+0x3a>
 8001f0e:	2002      	movs	r0, #2
 8001f10:	4240      	negs	r0, r0
 8001f12:	e7d6      	b.n	8001ec2 <__gesf2+0x3a>

08001f14 <__lesf2>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	0042      	lsls	r2, r0, #1
 8001f18:	0245      	lsls	r5, r0, #9
 8001f1a:	024e      	lsls	r6, r1, #9
 8001f1c:	004c      	lsls	r4, r1, #1
 8001f1e:	0fc3      	lsrs	r3, r0, #31
 8001f20:	0a6d      	lsrs	r5, r5, #9
 8001f22:	0e12      	lsrs	r2, r2, #24
 8001f24:	0a76      	lsrs	r6, r6, #9
 8001f26:	0e24      	lsrs	r4, r4, #24
 8001f28:	0fc8      	lsrs	r0, r1, #31
 8001f2a:	2aff      	cmp	r2, #255	; 0xff
 8001f2c:	d00b      	beq.n	8001f46 <__lesf2+0x32>
 8001f2e:	2cff      	cmp	r4, #255	; 0xff
 8001f30:	d00d      	beq.n	8001f4e <__lesf2+0x3a>
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d11f      	bne.n	8001f76 <__lesf2+0x62>
 8001f36:	2c00      	cmp	r4, #0
 8001f38:	d116      	bne.n	8001f68 <__lesf2+0x54>
 8001f3a:	2e00      	cmp	r6, #0
 8001f3c:	d114      	bne.n	8001f68 <__lesf2+0x54>
 8001f3e:	2000      	movs	r0, #0
 8001f40:	2d00      	cmp	r5, #0
 8001f42:	d010      	beq.n	8001f66 <__lesf2+0x52>
 8001f44:	e009      	b.n	8001f5a <__lesf2+0x46>
 8001f46:	2d00      	cmp	r5, #0
 8001f48:	d10c      	bne.n	8001f64 <__lesf2+0x50>
 8001f4a:	2cff      	cmp	r4, #255	; 0xff
 8001f4c:	d113      	bne.n	8001f76 <__lesf2+0x62>
 8001f4e:	2e00      	cmp	r6, #0
 8001f50:	d108      	bne.n	8001f64 <__lesf2+0x50>
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d008      	beq.n	8001f68 <__lesf2+0x54>
 8001f56:	4283      	cmp	r3, r0
 8001f58:	d012      	beq.n	8001f80 <__lesf2+0x6c>
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	1e58      	subs	r0, r3, #1
 8001f5e:	4008      	ands	r0, r1
 8001f60:	3801      	subs	r0, #1
 8001f62:	e000      	b.n	8001f66 <__lesf2+0x52>
 8001f64:	2002      	movs	r0, #2
 8001f66:	bd70      	pop	{r4, r5, r6, pc}
 8001f68:	2d00      	cmp	r5, #0
 8001f6a:	d1f4      	bne.n	8001f56 <__lesf2+0x42>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d1fa      	bne.n	8001f66 <__lesf2+0x52>
 8001f70:	2001      	movs	r0, #1
 8001f72:	4240      	negs	r0, r0
 8001f74:	e7f7      	b.n	8001f66 <__lesf2+0x52>
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	d1ed      	bne.n	8001f56 <__lesf2+0x42>
 8001f7a:	2e00      	cmp	r6, #0
 8001f7c:	d1eb      	bne.n	8001f56 <__lesf2+0x42>
 8001f7e:	e7ec      	b.n	8001f5a <__lesf2+0x46>
 8001f80:	42a2      	cmp	r2, r4
 8001f82:	dc05      	bgt.n	8001f90 <__lesf2+0x7c>
 8001f84:	dbf2      	blt.n	8001f6c <__lesf2+0x58>
 8001f86:	42b5      	cmp	r5, r6
 8001f88:	d802      	bhi.n	8001f90 <__lesf2+0x7c>
 8001f8a:	d3ef      	bcc.n	8001f6c <__lesf2+0x58>
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	e7ea      	b.n	8001f66 <__lesf2+0x52>
 8001f90:	4243      	negs	r3, r0
 8001f92:	4158      	adcs	r0, r3
 8001f94:	0040      	lsls	r0, r0, #1
 8001f96:	3801      	subs	r0, #1
 8001f98:	e7e5      	b.n	8001f66 <__lesf2+0x52>
 8001f9a:	46c0      	nop			; (mov r8, r8)

08001f9c <__eqdf2>:
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	464e      	mov	r6, r9
 8001fa0:	4645      	mov	r5, r8
 8001fa2:	46de      	mov	lr, fp
 8001fa4:	4657      	mov	r7, sl
 8001fa6:	4690      	mov	r8, r2
 8001fa8:	b5e0      	push	{r5, r6, r7, lr}
 8001faa:	0017      	movs	r7, r2
 8001fac:	031a      	lsls	r2, r3, #12
 8001fae:	0b12      	lsrs	r2, r2, #12
 8001fb0:	0005      	movs	r5, r0
 8001fb2:	4684      	mov	ip, r0
 8001fb4:	4819      	ldr	r0, [pc, #100]	; (800201c <__eqdf2+0x80>)
 8001fb6:	030e      	lsls	r6, r1, #12
 8001fb8:	004c      	lsls	r4, r1, #1
 8001fba:	4691      	mov	r9, r2
 8001fbc:	005a      	lsls	r2, r3, #1
 8001fbe:	0fdb      	lsrs	r3, r3, #31
 8001fc0:	469b      	mov	fp, r3
 8001fc2:	0b36      	lsrs	r6, r6, #12
 8001fc4:	0d64      	lsrs	r4, r4, #21
 8001fc6:	0fc9      	lsrs	r1, r1, #31
 8001fc8:	0d52      	lsrs	r2, r2, #21
 8001fca:	4284      	cmp	r4, r0
 8001fcc:	d019      	beq.n	8002002 <__eqdf2+0x66>
 8001fce:	4282      	cmp	r2, r0
 8001fd0:	d010      	beq.n	8001ff4 <__eqdf2+0x58>
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	4294      	cmp	r4, r2
 8001fd6:	d10e      	bne.n	8001ff6 <__eqdf2+0x5a>
 8001fd8:	454e      	cmp	r6, r9
 8001fda:	d10c      	bne.n	8001ff6 <__eqdf2+0x5a>
 8001fdc:	2001      	movs	r0, #1
 8001fde:	45c4      	cmp	ip, r8
 8001fe0:	d109      	bne.n	8001ff6 <__eqdf2+0x5a>
 8001fe2:	4559      	cmp	r1, fp
 8001fe4:	d017      	beq.n	8002016 <__eqdf2+0x7a>
 8001fe6:	2c00      	cmp	r4, #0
 8001fe8:	d105      	bne.n	8001ff6 <__eqdf2+0x5a>
 8001fea:	0030      	movs	r0, r6
 8001fec:	4328      	orrs	r0, r5
 8001fee:	1e43      	subs	r3, r0, #1
 8001ff0:	4198      	sbcs	r0, r3
 8001ff2:	e000      	b.n	8001ff6 <__eqdf2+0x5a>
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ff8:	46bb      	mov	fp, r7
 8001ffa:	46b2      	mov	sl, r6
 8001ffc:	46a9      	mov	r9, r5
 8001ffe:	46a0      	mov	r8, r4
 8002000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002002:	0033      	movs	r3, r6
 8002004:	2001      	movs	r0, #1
 8002006:	432b      	orrs	r3, r5
 8002008:	d1f5      	bne.n	8001ff6 <__eqdf2+0x5a>
 800200a:	42a2      	cmp	r2, r4
 800200c:	d1f3      	bne.n	8001ff6 <__eqdf2+0x5a>
 800200e:	464b      	mov	r3, r9
 8002010:	433b      	orrs	r3, r7
 8002012:	d1f0      	bne.n	8001ff6 <__eqdf2+0x5a>
 8002014:	e7e2      	b.n	8001fdc <__eqdf2+0x40>
 8002016:	2000      	movs	r0, #0
 8002018:	e7ed      	b.n	8001ff6 <__eqdf2+0x5a>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	000007ff 	.word	0x000007ff

08002020 <__gedf2>:
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	4647      	mov	r7, r8
 8002024:	46ce      	mov	lr, r9
 8002026:	0004      	movs	r4, r0
 8002028:	0018      	movs	r0, r3
 800202a:	0016      	movs	r6, r2
 800202c:	031b      	lsls	r3, r3, #12
 800202e:	0b1b      	lsrs	r3, r3, #12
 8002030:	4d2d      	ldr	r5, [pc, #180]	; (80020e8 <__gedf2+0xc8>)
 8002032:	004a      	lsls	r2, r1, #1
 8002034:	4699      	mov	r9, r3
 8002036:	b580      	push	{r7, lr}
 8002038:	0043      	lsls	r3, r0, #1
 800203a:	030f      	lsls	r7, r1, #12
 800203c:	46a4      	mov	ip, r4
 800203e:	46b0      	mov	r8, r6
 8002040:	0b3f      	lsrs	r7, r7, #12
 8002042:	0d52      	lsrs	r2, r2, #21
 8002044:	0fc9      	lsrs	r1, r1, #31
 8002046:	0d5b      	lsrs	r3, r3, #21
 8002048:	0fc0      	lsrs	r0, r0, #31
 800204a:	42aa      	cmp	r2, r5
 800204c:	d021      	beq.n	8002092 <__gedf2+0x72>
 800204e:	42ab      	cmp	r3, r5
 8002050:	d013      	beq.n	800207a <__gedf2+0x5a>
 8002052:	2a00      	cmp	r2, #0
 8002054:	d122      	bne.n	800209c <__gedf2+0x7c>
 8002056:	433c      	orrs	r4, r7
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <__gedf2+0x42>
 800205c:	464d      	mov	r5, r9
 800205e:	432e      	orrs	r6, r5
 8002060:	d022      	beq.n	80020a8 <__gedf2+0x88>
 8002062:	2c00      	cmp	r4, #0
 8002064:	d010      	beq.n	8002088 <__gedf2+0x68>
 8002066:	4281      	cmp	r1, r0
 8002068:	d022      	beq.n	80020b0 <__gedf2+0x90>
 800206a:	2002      	movs	r0, #2
 800206c:	3901      	subs	r1, #1
 800206e:	4008      	ands	r0, r1
 8002070:	3801      	subs	r0, #1
 8002072:	bcc0      	pop	{r6, r7}
 8002074:	46b9      	mov	r9, r7
 8002076:	46b0      	mov	r8, r6
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207a:	464d      	mov	r5, r9
 800207c:	432e      	orrs	r6, r5
 800207e:	d129      	bne.n	80020d4 <__gedf2+0xb4>
 8002080:	2a00      	cmp	r2, #0
 8002082:	d1f0      	bne.n	8002066 <__gedf2+0x46>
 8002084:	433c      	orrs	r4, r7
 8002086:	d1ee      	bne.n	8002066 <__gedf2+0x46>
 8002088:	2800      	cmp	r0, #0
 800208a:	d1f2      	bne.n	8002072 <__gedf2+0x52>
 800208c:	2001      	movs	r0, #1
 800208e:	4240      	negs	r0, r0
 8002090:	e7ef      	b.n	8002072 <__gedf2+0x52>
 8002092:	003d      	movs	r5, r7
 8002094:	4325      	orrs	r5, r4
 8002096:	d11d      	bne.n	80020d4 <__gedf2+0xb4>
 8002098:	4293      	cmp	r3, r2
 800209a:	d0ee      	beq.n	800207a <__gedf2+0x5a>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e2      	bne.n	8002066 <__gedf2+0x46>
 80020a0:	464c      	mov	r4, r9
 80020a2:	4326      	orrs	r6, r4
 80020a4:	d1df      	bne.n	8002066 <__gedf2+0x46>
 80020a6:	e7e0      	b.n	800206a <__gedf2+0x4a>
 80020a8:	2000      	movs	r0, #0
 80020aa:	2c00      	cmp	r4, #0
 80020ac:	d0e1      	beq.n	8002072 <__gedf2+0x52>
 80020ae:	e7dc      	b.n	800206a <__gedf2+0x4a>
 80020b0:	429a      	cmp	r2, r3
 80020b2:	dc0a      	bgt.n	80020ca <__gedf2+0xaa>
 80020b4:	dbe8      	blt.n	8002088 <__gedf2+0x68>
 80020b6:	454f      	cmp	r7, r9
 80020b8:	d8d7      	bhi.n	800206a <__gedf2+0x4a>
 80020ba:	d00e      	beq.n	80020da <__gedf2+0xba>
 80020bc:	2000      	movs	r0, #0
 80020be:	454f      	cmp	r7, r9
 80020c0:	d2d7      	bcs.n	8002072 <__gedf2+0x52>
 80020c2:	2900      	cmp	r1, #0
 80020c4:	d0e2      	beq.n	800208c <__gedf2+0x6c>
 80020c6:	0008      	movs	r0, r1
 80020c8:	e7d3      	b.n	8002072 <__gedf2+0x52>
 80020ca:	4243      	negs	r3, r0
 80020cc:	4158      	adcs	r0, r3
 80020ce:	0040      	lsls	r0, r0, #1
 80020d0:	3801      	subs	r0, #1
 80020d2:	e7ce      	b.n	8002072 <__gedf2+0x52>
 80020d4:	2002      	movs	r0, #2
 80020d6:	4240      	negs	r0, r0
 80020d8:	e7cb      	b.n	8002072 <__gedf2+0x52>
 80020da:	45c4      	cmp	ip, r8
 80020dc:	d8c5      	bhi.n	800206a <__gedf2+0x4a>
 80020de:	2000      	movs	r0, #0
 80020e0:	45c4      	cmp	ip, r8
 80020e2:	d2c6      	bcs.n	8002072 <__gedf2+0x52>
 80020e4:	e7ed      	b.n	80020c2 <__gedf2+0xa2>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	000007ff 	.word	0x000007ff

080020ec <__ledf2>:
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	4647      	mov	r7, r8
 80020f0:	46ce      	mov	lr, r9
 80020f2:	0004      	movs	r4, r0
 80020f4:	0018      	movs	r0, r3
 80020f6:	0016      	movs	r6, r2
 80020f8:	031b      	lsls	r3, r3, #12
 80020fa:	0b1b      	lsrs	r3, r3, #12
 80020fc:	4d2c      	ldr	r5, [pc, #176]	; (80021b0 <__ledf2+0xc4>)
 80020fe:	004a      	lsls	r2, r1, #1
 8002100:	4699      	mov	r9, r3
 8002102:	b580      	push	{r7, lr}
 8002104:	0043      	lsls	r3, r0, #1
 8002106:	030f      	lsls	r7, r1, #12
 8002108:	46a4      	mov	ip, r4
 800210a:	46b0      	mov	r8, r6
 800210c:	0b3f      	lsrs	r7, r7, #12
 800210e:	0d52      	lsrs	r2, r2, #21
 8002110:	0fc9      	lsrs	r1, r1, #31
 8002112:	0d5b      	lsrs	r3, r3, #21
 8002114:	0fc0      	lsrs	r0, r0, #31
 8002116:	42aa      	cmp	r2, r5
 8002118:	d00d      	beq.n	8002136 <__ledf2+0x4a>
 800211a:	42ab      	cmp	r3, r5
 800211c:	d010      	beq.n	8002140 <__ledf2+0x54>
 800211e:	2a00      	cmp	r2, #0
 8002120:	d127      	bne.n	8002172 <__ledf2+0x86>
 8002122:	433c      	orrs	r4, r7
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <__ledf2+0x60>
 8002128:	464d      	mov	r5, r9
 800212a:	432e      	orrs	r6, r5
 800212c:	d10e      	bne.n	800214c <__ledf2+0x60>
 800212e:	2000      	movs	r0, #0
 8002130:	2c00      	cmp	r4, #0
 8002132:	d015      	beq.n	8002160 <__ledf2+0x74>
 8002134:	e00e      	b.n	8002154 <__ledf2+0x68>
 8002136:	003d      	movs	r5, r7
 8002138:	4325      	orrs	r5, r4
 800213a:	d110      	bne.n	800215e <__ledf2+0x72>
 800213c:	4293      	cmp	r3, r2
 800213e:	d118      	bne.n	8002172 <__ledf2+0x86>
 8002140:	464d      	mov	r5, r9
 8002142:	432e      	orrs	r6, r5
 8002144:	d10b      	bne.n	800215e <__ledf2+0x72>
 8002146:	2a00      	cmp	r2, #0
 8002148:	d102      	bne.n	8002150 <__ledf2+0x64>
 800214a:	433c      	orrs	r4, r7
 800214c:	2c00      	cmp	r4, #0
 800214e:	d00b      	beq.n	8002168 <__ledf2+0x7c>
 8002150:	4281      	cmp	r1, r0
 8002152:	d014      	beq.n	800217e <__ledf2+0x92>
 8002154:	2002      	movs	r0, #2
 8002156:	3901      	subs	r1, #1
 8002158:	4008      	ands	r0, r1
 800215a:	3801      	subs	r0, #1
 800215c:	e000      	b.n	8002160 <__ledf2+0x74>
 800215e:	2002      	movs	r0, #2
 8002160:	bcc0      	pop	{r6, r7}
 8002162:	46b9      	mov	r9, r7
 8002164:	46b0      	mov	r8, r6
 8002166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002168:	2800      	cmp	r0, #0
 800216a:	d1f9      	bne.n	8002160 <__ledf2+0x74>
 800216c:	2001      	movs	r0, #1
 800216e:	4240      	negs	r0, r0
 8002170:	e7f6      	b.n	8002160 <__ledf2+0x74>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ec      	bne.n	8002150 <__ledf2+0x64>
 8002176:	464c      	mov	r4, r9
 8002178:	4326      	orrs	r6, r4
 800217a:	d1e9      	bne.n	8002150 <__ledf2+0x64>
 800217c:	e7ea      	b.n	8002154 <__ledf2+0x68>
 800217e:	429a      	cmp	r2, r3
 8002180:	dd04      	ble.n	800218c <__ledf2+0xa0>
 8002182:	4243      	negs	r3, r0
 8002184:	4158      	adcs	r0, r3
 8002186:	0040      	lsls	r0, r0, #1
 8002188:	3801      	subs	r0, #1
 800218a:	e7e9      	b.n	8002160 <__ledf2+0x74>
 800218c:	429a      	cmp	r2, r3
 800218e:	dbeb      	blt.n	8002168 <__ledf2+0x7c>
 8002190:	454f      	cmp	r7, r9
 8002192:	d8df      	bhi.n	8002154 <__ledf2+0x68>
 8002194:	d006      	beq.n	80021a4 <__ledf2+0xb8>
 8002196:	2000      	movs	r0, #0
 8002198:	454f      	cmp	r7, r9
 800219a:	d2e1      	bcs.n	8002160 <__ledf2+0x74>
 800219c:	2900      	cmp	r1, #0
 800219e:	d0e5      	beq.n	800216c <__ledf2+0x80>
 80021a0:	0008      	movs	r0, r1
 80021a2:	e7dd      	b.n	8002160 <__ledf2+0x74>
 80021a4:	45c4      	cmp	ip, r8
 80021a6:	d8d5      	bhi.n	8002154 <__ledf2+0x68>
 80021a8:	2000      	movs	r0, #0
 80021aa:	45c4      	cmp	ip, r8
 80021ac:	d2d8      	bcs.n	8002160 <__ledf2+0x74>
 80021ae:	e7f5      	b.n	800219c <__ledf2+0xb0>
 80021b0:	000007ff 	.word	0x000007ff

080021b4 <CAN_init>:
#include "can.h"

uint8_t Rx_data[8];

void CAN_init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <CAN_init+0x30>)
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 ffe6 	bl	800318c <HAL_FDCAN_Start>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d001      	beq.n	80021c8 <CAN_init+0x14>
 	{
		Error_Handler();
 80021c4:	f000 fc0c 	bl	80029e0 <Error_Handler>
 	}

	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <CAN_init+0x30>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	2101      	movs	r1, #1
 80021ce:	0018      	movs	r0, r3
 80021d0:	f001 f956 	bl	8003480 <HAL_FDCAN_ActivateNotification>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d001      	beq.n	80021dc <CAN_init+0x28>
	{
		Error_Handler();
 80021d8:	f000 fc02 	bl	80029e0 <Error_Handler>
	}
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	20000054 	.word	0x20000054

080021e8 <Charger_CAN_config>:

/*Function To configure CAN Message Type*/
void Charger_CAN_config(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	Tx_header.IdType = FDCAN_EXTENDED_ID;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <Charger_CAN_config+0x3c>)
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	05d2      	lsls	r2, r2, #23
 80021f2:	605a      	str	r2, [r3, #4]
	Tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <Charger_CAN_config+0x3c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
	Tx_header.DataLength = FDCAN_DLC_BYTES_8;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <Charger_CAN_config+0x3c>)
 80021fc:	2208      	movs	r2, #8
 80021fe:	60da      	str	r2, [r3, #12]
	Tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <Charger_CAN_config+0x3c>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
	Tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <Charger_CAN_config+0x3c>)
 8002208:	2200      	movs	r2, #0
 800220a:	615a      	str	r2, [r3, #20]
	Tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <Charger_CAN_config+0x3c>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
	Tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <Charger_CAN_config+0x3c>)
 8002214:	2200      	movs	r2, #0
 8002216:	61da      	str	r2, [r3, #28]
	Tx_header.MessageMarker = 0;
 8002218:	4b02      	ldr	r3, [pc, #8]	; (8002224 <Charger_CAN_config+0x3c>)
 800221a:	2200      	movs	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200000b8 	.word	0x200000b8

08002228 <CAN_Tx>:

/*Function to transmit data over CAN*/
void CAN_Tx(uint32_t msg_id, uint8_t *data)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	Tx_header.Identifier = msg_id;
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <CAN_Tx+0x34>)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Tx_header, data) != HAL_OK)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <CAN_Tx+0x34>)
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <CAN_Tx+0x38>)
 800223e:	0018      	movs	r0, r3
 8002240:	f000 ffca 	bl	80031d8 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002244:	1e03      	subs	r3, r0, #0
 8002246:	d001      	beq.n	800224c <CAN_Tx+0x24>
	{
		Error_Handler();
 8002248:	f000 fbca 	bl	80029e0 <Error_Handler>
	}

	HAL_Delay(250);
 800224c:	20fa      	movs	r0, #250	; 0xfa
 800224e:	f000 fd35 	bl	8002cbc <HAL_Delay>
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	200000b8 	.word	0x200000b8
 8002260:	20000054 	.word	0x20000054

08002264 <CAN_Rx>:

/*Function to store data received over CAN*/
void CAN_Rx(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &Rx_header, Rx_data) != HAL_OK)
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <CAN_Rx+0x20>)
 800226a:	4a07      	ldr	r2, [pc, #28]	; (8002288 <CAN_Rx+0x24>)
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <CAN_Rx+0x28>)
 800226e:	2140      	movs	r1, #64	; 0x40
 8002270:	f000 fff8 	bl	8003264 <HAL_FDCAN_GetRxMessage>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d001      	beq.n	800227c <CAN_Rx+0x18>
	{
		Error_Handler();
 8002278:	f000 fbb2 	bl	80029e0 <Error_Handler>
	}

}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	2000003c 	.word	0x2000003c
 8002288:	200000dc 	.word	0x200000dc
 800228c:	20000054 	.word	0x20000054

08002290 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	d001      	beq.n	80022a6 <HAL_FDCAN_RxFifo0Callback+0x16>
	{
		CAN_Rx();
 80022a2:	f7ff ffdf 	bl	8002264 <CAN_Rx>
	}

}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b002      	add	sp, #8
 80022ac:	bd80      	pop	{r7, pc}

080022ae <Format_Bms_Msg>:
int rec_vol_off = 0;
float rec_vol_fact = 0.05;

/*Function to Format the BMS message to transmit over CAN*/
void Format_Bms_Msg(uint8_t *data, bms_to_charger msg)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	6019      	str	r1, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
	data[0] = msg.chg_status;
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	701a      	strb	r2, [r3, #0]
	data[1] = msg.out_volt_set_point_low;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3301      	adds	r3, #1
 80022c8:	1d3a      	adds	r2, r7, #4
 80022ca:	7852      	ldrb	r2, [r2, #1]
 80022cc:	701a      	strb	r2, [r3, #0]
	data[2] = msg.out_volt_set_point_high;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3302      	adds	r3, #2
 80022d2:	1d3a      	adds	r2, r7, #4
 80022d4:	7892      	ldrb	r2, [r2, #2]
 80022d6:	701a      	strb	r2, [r3, #0]
	data[3] = msg.out_curr_set_point_low;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3303      	adds	r3, #3
 80022dc:	1d3a      	adds	r2, r7, #4
 80022de:	78d2      	ldrb	r2, [r2, #3]
 80022e0:	701a      	strb	r2, [r3, #0]
	data[4] = msg.out_curr_set_point_high;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3304      	adds	r3, #4
 80022e6:	1d3a      	adds	r2, r7, #4
 80022e8:	7912      	ldrb	r2, [r2, #4]
 80022ea:	701a      	strb	r2, [r3, #0]
	data[5] = msg.reserve_b1;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3305      	adds	r3, #5
 80022f0:	1d3a      	adds	r2, r7, #4
 80022f2:	7952      	ldrb	r2, [r2, #5]
 80022f4:	701a      	strb	r2, [r3, #0]
	data[6] = msg.reserve_b2;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3306      	adds	r3, #6
 80022fa:	1d3a      	adds	r2, r7, #4
 80022fc:	7992      	ldrb	r2, [r2, #6]
 80022fe:	701a      	strb	r2, [r3, #0]
	data[7] = msg.reserve_b3;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3307      	adds	r3, #7
 8002304:	1d3a      	adds	r2, r7, #4
 8002306:	79d2      	ldrb	r2, [r2, #7]
 8002308:	701a      	strb	r2, [r3, #0]
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b004      	add	sp, #16
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <Bms_Demand>:

/*Function to Demand Current and Voltage from Charger*/
void Bms_Demand(uint8_t status, uint8_t curr, uint8_t vol)
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	0004      	movs	r4, r0
 800231c:	0008      	movs	r0, r1
 800231e:	0011      	movs	r1, r2
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	1c22      	adds	r2, r4, #0
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	1c02      	adds	r2, r0, #0
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	1d7b      	adds	r3, r7, #5
 800232e:	1c0a      	adds	r2, r1, #0
 8002330:	701a      	strb	r2, [r3, #0]
	uint8_t set_curr_low = ((curr - set_curr_off)/set_curr_fact);
 8002332:	1dbb      	adds	r3, r7, #6
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4a47      	ldr	r2, [pc, #284]	; (8002454 <Bms_Demand+0x140>)
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f7fe fd4d 	bl	8000ddc <__aeabi_i2f>
 8002342:	1c02      	adds	r2, r0, #0
 8002344:	4b44      	ldr	r3, [pc, #272]	; (8002458 <Bms_Demand+0x144>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1c19      	adds	r1, r3, #0
 800234a:	1c10      	adds	r0, r2, #0
 800234c:	f7fe f93a 	bl	80005c4 <__aeabi_fdiv>
 8002350:	1c03      	adds	r3, r0, #0
 8002352:	2517      	movs	r5, #23
 8002354:	197c      	adds	r4, r7, r5
 8002356:	1c18      	adds	r0, r3, #0
 8002358:	f7fd ff60 	bl	800021c <__aeabi_f2uiz>
 800235c:	0003      	movs	r3, r0
 800235e:	7023      	strb	r3, [r4, #0]
	uint8_t set_curr_high = ((uint16_t)((curr - set_curr_off)/set_curr_fact) >> 8);
 8002360:	1dbb      	adds	r3, r7, #6
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4a3b      	ldr	r2, [pc, #236]	; (8002454 <Bms_Demand+0x140>)
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f7fe fd36 	bl	8000ddc <__aeabi_i2f>
 8002370:	1c02      	adds	r2, r0, #0
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <Bms_Demand+0x144>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1c19      	adds	r1, r3, #0
 8002378:	1c10      	adds	r0, r2, #0
 800237a:	f7fe f923 	bl	80005c4 <__aeabi_fdiv>
 800237e:	1c03      	adds	r3, r0, #0
 8002380:	1c18      	adds	r0, r3, #0
 8002382:	f7fd ff4b 	bl	800021c <__aeabi_f2uiz>
 8002386:	0003      	movs	r3, r0
 8002388:	b29b      	uxth	r3, r3
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	b29a      	uxth	r2, r3
 800238e:	2616      	movs	r6, #22
 8002390:	19bb      	adds	r3, r7, r6
 8002392:	701a      	strb	r2, [r3, #0]

	uint8_t set_vol_low = ((vol - set_vol_off)/set_vol_fact);
 8002394:	1d7b      	adds	r3, r7, #5
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4a30      	ldr	r2, [pc, #192]	; (800245c <Bms_Demand+0x148>)
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	0018      	movs	r0, r3
 80023a0:	f7fe fd1c 	bl	8000ddc <__aeabi_i2f>
 80023a4:	1c02      	adds	r2, r0, #0
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <Bms_Demand+0x14c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	1c19      	adds	r1, r3, #0
 80023ac:	1c10      	adds	r0, r2, #0
 80023ae:	f7fe f909 	bl	80005c4 <__aeabi_fdiv>
 80023b2:	1c03      	adds	r3, r0, #0
 80023b4:	2215      	movs	r2, #21
 80023b6:	18bc      	adds	r4, r7, r2
 80023b8:	1c18      	adds	r0, r3, #0
 80023ba:	f7fd ff2f 	bl	800021c <__aeabi_f2uiz>
 80023be:	0003      	movs	r3, r0
 80023c0:	7023      	strb	r3, [r4, #0]
	uint8_t set_vol_high = ((uint16_t)((vol - set_vol_off)/set_vol_fact) >> 8);
 80023c2:	1d7b      	adds	r3, r7, #5
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	4a25      	ldr	r2, [pc, #148]	; (800245c <Bms_Demand+0x148>)
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7fe fd05 	bl	8000ddc <__aeabi_i2f>
 80023d2:	1c02      	adds	r2, r0, #0
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <Bms_Demand+0x14c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1c19      	adds	r1, r3, #0
 80023da:	1c10      	adds	r0, r2, #0
 80023dc:	f7fe f8f2 	bl	80005c4 <__aeabi_fdiv>
 80023e0:	1c03      	adds	r3, r0, #0
 80023e2:	1c18      	adds	r0, r3, #0
 80023e4:	f7fd ff1a 	bl	800021c <__aeabi_f2uiz>
 80023e8:	0003      	movs	r3, r0
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	2014      	movs	r0, #20
 80023f2:	183b      	adds	r3, r7, r0
 80023f4:	701a      	strb	r2, [r3, #0]

	bms_to_charger tx_msg = {status,set_vol_low,set_vol_high,set_curr_low,set_curr_high,0x00,0x00,0x00};
 80023f6:	210c      	movs	r1, #12
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	1dfa      	adds	r2, r7, #7
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	187b      	adds	r3, r7, r1
 8002402:	2215      	movs	r2, #21
 8002404:	18ba      	adds	r2, r7, r2
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	705a      	strb	r2, [r3, #1]
 800240a:	187b      	adds	r3, r7, r1
 800240c:	183a      	adds	r2, r7, r0
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	709a      	strb	r2, [r3, #2]
 8002412:	187b      	adds	r3, r7, r1
 8002414:	197a      	adds	r2, r7, r5
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	70da      	strb	r2, [r3, #3]
 800241a:	187b      	adds	r3, r7, r1
 800241c:	19ba      	adds	r2, r7, r6
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	711a      	strb	r2, [r3, #4]
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2200      	movs	r2, #0
 8002426:	715a      	strb	r2, [r3, #5]
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2200      	movs	r2, #0
 800242c:	719a      	strb	r2, [r3, #6]
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2200      	movs	r2, #0
 8002432:	71da      	strb	r2, [r3, #7]
	Format_Bms_Msg(Tx_data, tx_msg);
 8002434:	187b      	adds	r3, r7, r1
 8002436:	480b      	ldr	r0, [pc, #44]	; (8002464 <Bms_Demand+0x150>)
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	f7ff ff37 	bl	80022ae <Format_Bms_Msg>
	CAN_Tx(BMS_ID, Tx_data);
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <Bms_Demand+0x150>)
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <Bms_Demand+0x154>)
 8002444:	0019      	movs	r1, r3
 8002446:	0010      	movs	r0, r2
 8002448:	f7ff feee 	bl	8002228 <CAN_Tx>
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b007      	add	sp, #28
 8002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002454:	2000004c 	.word	0x2000004c
 8002458:	20000000 	.word	0x20000000
 800245c:	2000004d 	.word	0x2000004d
 8002460:	2000000c 	.word	0x2000000c
 8002464:	20000044 	.word	0x20000044
 8002468:	18ff005b 	.word	0x18ff005b

0800246c <Charger_response>:

/*Response of the Charger to the Demand by BMS*/
charger_to_bms Charger_response(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	charger_to_bms rx_msg;
	if(Rx_header.Identifier == CHARGER_ID)
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <Charger_response+0x70>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <Charger_response+0x74>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d120      	bne.n	80024c0 <Charger_response+0x54>
	{
		rx_msg.bat_chg_status 			=	Rx_data[0];
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <Charger_response+0x78>)
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	2108      	movs	r1, #8
 8002484:	187b      	adds	r3, r7, r1
 8002486:	701a      	strb	r2, [r3, #0]
		rx_msg.bat_chg_out_volt_low 	=	Rx_data[1];
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <Charger_response+0x78>)
 800248a:	785a      	ldrb	r2, [r3, #1]
 800248c:	187b      	adds	r3, r7, r1
 800248e:	705a      	strb	r2, [r3, #1]
		rx_msg.bat_chg_out_volt_high	=	Rx_data[2];
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <Charger_response+0x78>)
 8002492:	789a      	ldrb	r2, [r3, #2]
 8002494:	187b      	adds	r3, r7, r1
 8002496:	709a      	strb	r2, [r3, #2]
		rx_msg.bat_chg_out_curr_low		=	Rx_data[3];
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <Charger_response+0x78>)
 800249a:	78da      	ldrb	r2, [r3, #3]
 800249c:	187b      	adds	r3, r7, r1
 800249e:	70da      	strb	r2, [r3, #3]
		rx_msg.bat_chg_out_curr_high	=	Rx_data[4];
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <Charger_response+0x78>)
 80024a2:	791a      	ldrb	r2, [r3, #4]
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	711a      	strb	r2, [r3, #4]
		rx_msg.bat_chg_comm_status		=	Rx_data[5];
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <Charger_response+0x78>)
 80024aa:	795a      	ldrb	r2, [r3, #5]
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	715a      	strb	r2, [r3, #5]
		rx_msg.reserve_b2				=	Rx_data[6];
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <Charger_response+0x78>)
 80024b2:	799a      	ldrb	r2, [r3, #6]
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	719a      	strb	r2, [r3, #6]
		rx_msg.reserve_b3				=	Rx_data[7];
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <Charger_response+0x78>)
 80024ba:	79da      	ldrb	r2, [r3, #7]
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	71da      	strb	r2, [r3, #7]
	}
	return rx_msg;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	2308      	movs	r3, #8
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	0010      	movs	r0, r2
 80024c8:	0019      	movs	r1, r3
 80024ca:	2308      	movs	r3, #8
 80024cc:	001a      	movs	r2, r3
 80024ce:	f002 fc27 	bl	8004d20 <memcpy>
}
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	200000dc 	.word	0x200000dc
 80024e0:	10fd151a 	.word	0x10fd151a
 80024e4:	2000003c 	.word	0x2000003c

080024e8 <Read_Current>:

/*Read the Current Transmitted by Charger over CAN*/
uint16_t Read_Current(charger_to_bms data)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	003b      	movs	r3, r7
 80024f0:	6018      	str	r0, [r3, #0]
 80024f2:	6059      	str	r1, [r3, #4]
	double curr = (((data.bat_chg_out_curr_high << 8) | (data.bat_chg_out_curr_low)) * rec_curr_fact + rec_curr_off);
 80024f4:	003b      	movs	r3, r7
 80024f6:	791b      	ldrb	r3, [r3, #4]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	003a      	movs	r2, r7
 80024fc:	78d2      	ldrb	r2, [r2, #3]
 80024fe:	4313      	orrs	r3, r2
 8002500:	0018      	movs	r0, r3
 8002502:	f7fe fc6b 	bl	8000ddc <__aeabi_i2f>
 8002506:	1c02      	adds	r2, r0, #0
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <Read_Current+0x78>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1c19      	adds	r1, r3, #0
 800250e:	1c10      	adds	r0, r2, #0
 8002510:	f7fe f970 	bl	80007f4 <__aeabi_fmul>
 8002514:	1c03      	adds	r3, r0, #0
 8002516:	1c1c      	adds	r4, r3, #0
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <Read_Current+0x7c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0018      	movs	r0, r3
 800251e:	f7fe fc5d 	bl	8000ddc <__aeabi_i2f>
 8002522:	1c03      	adds	r3, r0, #0
 8002524:	1c19      	adds	r1, r3, #0
 8002526:	1c20      	adds	r0, r4, #0
 8002528:	f7fd feae 	bl	8000288 <__aeabi_fadd>
 800252c:	1c03      	adds	r3, r0, #0
 800252e:	1c18      	adds	r0, r3, #0
 8002530:	f7ff fba6 	bl	8001c80 <__aeabi_f2d>
 8002534:	0002      	movs	r2, r0
 8002536:	000b      	movs	r3, r1
 8002538:	60ba      	str	r2, [r7, #8]
 800253a:	60fb      	str	r3, [r7, #12]
	return (uint16_t)round(curr);
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	0010      	movs	r0, r2
 8002542:	0019      	movs	r1, r3
 8002544:	f002 fbfe 	bl	8004d44 <round>
 8002548:	0002      	movs	r2, r0
 800254a:	000b      	movs	r3, r1
 800254c:	0010      	movs	r0, r2
 800254e:	0019      	movs	r1, r3
 8002550:	f7fd fe7c 	bl	800024c <__aeabi_d2uiz>
 8002554:	0003      	movs	r3, r0
 8002556:	b29b      	uxth	r3, r3
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b005      	add	sp, #20
 800255e:	bd90      	pop	{r4, r7, pc}
 8002560:	20000008 	.word	0x20000008
 8002564:	20000004 	.word	0x20000004

08002568 <Read_Voltage>:

/*Read the Voltage Transmitted by Charger over CAN*/
uint16_t Read_Voltage(charger_to_bms data)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	003b      	movs	r3, r7
 8002570:	6018      	str	r0, [r3, #0]
 8002572:	6059      	str	r1, [r3, #4]
	double vol = (((data.bat_chg_out_volt_high << 8) | (data.bat_chg_out_volt_low)) * rec_vol_fact + rec_vol_off);
 8002574:	003b      	movs	r3, r7
 8002576:	789b      	ldrb	r3, [r3, #2]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	003a      	movs	r2, r7
 800257c:	7852      	ldrb	r2, [r2, #1]
 800257e:	4313      	orrs	r3, r2
 8002580:	0018      	movs	r0, r3
 8002582:	f7fe fc2b 	bl	8000ddc <__aeabi_i2f>
 8002586:	1c02      	adds	r2, r0, #0
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <Read_Voltage+0x78>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1c19      	adds	r1, r3, #0
 800258e:	1c10      	adds	r0, r2, #0
 8002590:	f7fe f930 	bl	80007f4 <__aeabi_fmul>
 8002594:	1c03      	adds	r3, r0, #0
 8002596:	1c1c      	adds	r4, r3, #0
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <Read_Voltage+0x7c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0018      	movs	r0, r3
 800259e:	f7fe fc1d 	bl	8000ddc <__aeabi_i2f>
 80025a2:	1c03      	adds	r3, r0, #0
 80025a4:	1c19      	adds	r1, r3, #0
 80025a6:	1c20      	adds	r0, r4, #0
 80025a8:	f7fd fe6e 	bl	8000288 <__aeabi_fadd>
 80025ac:	1c03      	adds	r3, r0, #0
 80025ae:	1c18      	adds	r0, r3, #0
 80025b0:	f7ff fb66 	bl	8001c80 <__aeabi_f2d>
 80025b4:	0002      	movs	r2, r0
 80025b6:	000b      	movs	r3, r1
 80025b8:	60ba      	str	r2, [r7, #8]
 80025ba:	60fb      	str	r3, [r7, #12]
	return (uint16_t)round(vol);
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0010      	movs	r0, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	f002 fbbe 	bl	8004d44 <round>
 80025c8:	0002      	movs	r2, r0
 80025ca:	000b      	movs	r3, r1
 80025cc:	0010      	movs	r0, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	f7fd fe3c 	bl	800024c <__aeabi_d2uiz>
 80025d4:	0003      	movs	r3, r0
 80025d6:	b29b      	uxth	r3, r3
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b005      	add	sp, #20
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	20000010 	.word	0x20000010
 80025e4:	20000050 	.word	0x20000050

080025e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ec:	f000 fae0 	bl	8002bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025f0:	f000 f810 	bl	8002614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025f4:	f000 f89e 	bl	8002734 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80025f8:	f000 f854 	bl	80026a4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_init();
 80025fc:	f7ff fdda 	bl	80021b4 <CAN_init>
  Charger_CAN_config();
 8002600:	f7ff fdf2 	bl	80021e8 <Charger_CAN_config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Check_Bms_State(state);
 8002604:	4b02      	ldr	r3, [pc, #8]	; (8002610 <main+0x28>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	0018      	movs	r0, r3
 800260a:	f000 f8a9 	bl	8002760 <Check_Bms_State>
 800260e:	e7f9      	b.n	8002604 <main+0x1c>
 8002610:	20000104 	.word	0x20000104

08002614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b095      	sub	sp, #84	; 0x54
 8002618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261a:	2414      	movs	r4, #20
 800261c:	193b      	adds	r3, r7, r4
 800261e:	0018      	movs	r0, r3
 8002620:	233c      	movs	r3, #60	; 0x3c
 8002622:	001a      	movs	r2, r3
 8002624:	2100      	movs	r1, #0
 8002626:	f002 fb84 	bl	8004d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	0018      	movs	r0, r3
 800262e:	2310      	movs	r3, #16
 8002630:	001a      	movs	r2, r3
 8002632:	2100      	movs	r1, #0
 8002634:	f002 fb7d 	bl	8004d32 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	0018      	movs	r0, r3
 800263e:	f001 fbe5 	bl	8003e0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002642:	193b      	adds	r3, r7, r4
 8002644:	2202      	movs	r2, #2
 8002646:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002648:	193b      	adds	r3, r7, r4
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	0052      	lsls	r2, r2, #1
 800264e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002650:	193b      	adds	r3, r7, r4
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002656:	193b      	adds	r3, r7, r4
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800265c:	193b      	adds	r3, r7, r4
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002662:	193b      	adds	r3, r7, r4
 8002664:	0018      	movs	r0, r3
 8002666:	f001 fc11 	bl	8003e8c <HAL_RCC_OscConfig>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800266e:	f000 f9b7 	bl	80029e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	2100      	movs	r1, #0
 800268e:	0018      	movs	r0, r3
 8002690:	f001 ff5c 	bl	800454c <HAL_RCC_ClockConfig>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002698:	f000 f9a2 	bl	80029e0 <Error_Handler>
  }
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b015      	add	sp, #84	; 0x54
 80026a2:	bd90      	pop	{r4, r7, pc}

080026a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <MX_FDCAN1_Init+0x8c>)
 80026ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026d4:	2204      	movs	r2, #4
 80026d6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026da:	2201      	movs	r2, #1
 80026dc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026e0:	220d      	movs	r2, #13
 80026e2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026e6:	2202      	movs	r2, #2
 80026e8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MX_FDCAN1_Init+0x88>)
 80026fe:	2201      	movs	r2, #1
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MX_FDCAN1_Init+0x88>)
 8002704:	2201      	movs	r2, #1
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <MX_FDCAN1_Init+0x88>)
 800270a:	2201      	movs	r2, #1
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <MX_FDCAN1_Init+0x88>)
 8002710:	2200      	movs	r2, #0
 8002712:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <MX_FDCAN1_Init+0x88>)
 8002716:	0018      	movs	r0, r3
 8002718:	f000 fbd2 	bl	8002ec0 <HAL_FDCAN_Init>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d001      	beq.n	8002724 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002720:	f000 f95e 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	20000054 	.word	0x20000054
 8002730:	40006400 	.word	0x40006400

08002734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_GPIO_Init+0x28>)
 800273c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <MX_GPIO_Init+0x28>)
 8002740:	2101      	movs	r1, #1
 8002742:	430a      	orrs	r2, r1
 8002744:	635a      	str	r2, [r3, #52]	; 0x34
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <MX_GPIO_Init+0x28>)
 8002748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274a:	2201      	movs	r2, #1
 800274c:	4013      	ands	r3, r2
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	40021000 	.word	0x40021000

08002760 <Check_Bms_State>:

/* USER CODE BEGIN 4 */

/*Function to check the BMS state*/
void Check_Bms_State(bms_state stat)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	210f      	movs	r1, #15
 800276a:	187b      	adds	r3, r7, r1
 800276c:	701a      	strb	r2, [r3, #0]
	switch(stat)
 800276e:	187b      	adds	r3, r7, r1
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d100      	bne.n	8002778 <Check_Bms_State+0x18>
 8002776:	e0b9      	b.n	80028ec <Check_Bms_State+0x18c>
 8002778:	dd00      	ble.n	800277c <Check_Bms_State+0x1c>
 800277a:	e0f7      	b.n	800296c <Check_Bms_State+0x20c>
 800277c:	2b02      	cmp	r3, #2
 800277e:	d100      	bne.n	8002782 <Check_Bms_State+0x22>
 8002780:	e074      	b.n	800286c <Check_Bms_State+0x10c>
 8002782:	dd00      	ble.n	8002786 <Check_Bms_State+0x26>
 8002784:	e0f2      	b.n	800296c <Check_Bms_State+0x20c>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <Check_Bms_State+0x30>
 800278a:	2b01      	cmp	r3, #1
 800278c:	d02d      	beq.n	80027ea <Check_Bms_State+0x8a>
 800278e:	e0ed      	b.n	800296c <Check_Bms_State+0x20c>
	{
		case SYNC_STATE:
		{
			set_curr = 0;
 8002790:	4b8a      	ldr	r3, [pc, #552]	; (80029bc <Check_Bms_State+0x25c>)
 8002792:	2200      	movs	r2, #0
 8002794:	801a      	strh	r2, [r3, #0]
			set_vol = 58;
 8002796:	4b8a      	ldr	r3, [pc, #552]	; (80029c0 <Check_Bms_State+0x260>)
 8002798:	223a      	movs	r2, #58	; 0x3a
 800279a:	801a      	strh	r2, [r3, #0]
			chg_state = 0;
 800279c:	4b89      	ldr	r3, [pc, #548]	; (80029c4 <Check_Bms_State+0x264>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
			Bms_Demand(chg_state, set_curr, set_vol);
 80027a2:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <Check_Bms_State+0x264>)
 80027a4:	7818      	ldrb	r0, [r3, #0]
 80027a6:	4b85      	ldr	r3, [pc, #532]	; (80029bc <Check_Bms_State+0x25c>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b2d9      	uxtb	r1, r3
 80027ac:	4b84      	ldr	r3, [pc, #528]	; (80029c0 <Check_Bms_State+0x260>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	001a      	movs	r2, r3
 80027b4:	f7ff fdae 	bl	8002314 <Bms_Demand>
			rx_msg = Charger_response();
 80027b8:	4c83      	ldr	r4, [pc, #524]	; (80029c8 <Check_Bms_State+0x268>)
 80027ba:	003b      	movs	r3, r7
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff fe55 	bl	800246c <Charger_response>
 80027c2:	003b      	movs	r3, r7
 80027c4:	0020      	movs	r0, r4
 80027c6:	0019      	movs	r1, r3
 80027c8:	2308      	movs	r3, #8
 80027ca:	001a      	movs	r2, r3
 80027cc:	f002 faa8 	bl	8004d20 <memcpy>
			if(rx_msg.bat_chg_status == 0x02 || rx_msg.bat_chg_status == 0x12)
 80027d0:	4b7d      	ldr	r3, [pc, #500]	; (80029c8 <Check_Bms_State+0x268>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d004      	beq.n	80027e2 <Check_Bms_State+0x82>
 80027d8:	4b7b      	ldr	r3, [pc, #492]	; (80029c8 <Check_Bms_State+0x268>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b12      	cmp	r3, #18
 80027de:	d000      	beq.n	80027e2 <Check_Bms_State+0x82>
 80027e0:	e0e0      	b.n	80029a4 <Check_Bms_State+0x244>
			{
				state = DEM_58V_50A;
 80027e2:	4b7a      	ldr	r3, [pc, #488]	; (80029cc <Check_Bms_State+0x26c>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027e8:	e0dc      	b.n	80029a4 <Check_Bms_State+0x244>
		}

		case DEM_58V_50A:
		{
			set_curr = 45;
 80027ea:	4b74      	ldr	r3, [pc, #464]	; (80029bc <Check_Bms_State+0x25c>)
 80027ec:	222d      	movs	r2, #45	; 0x2d
 80027ee:	801a      	strh	r2, [r3, #0]
			set_vol = 58;
 80027f0:	4b73      	ldr	r3, [pc, #460]	; (80029c0 <Check_Bms_State+0x260>)
 80027f2:	223a      	movs	r2, #58	; 0x3a
 80027f4:	801a      	strh	r2, [r3, #0]
			chg_state = 1;
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <Check_Bms_State+0x264>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
			Bms_Demand(chg_state, set_curr, set_vol);
 80027fc:	4b71      	ldr	r3, [pc, #452]	; (80029c4 <Check_Bms_State+0x264>)
 80027fe:	7818      	ldrb	r0, [r3, #0]
 8002800:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <Check_Bms_State+0x25c>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b2d9      	uxtb	r1, r3
 8002806:	4b6e      	ldr	r3, [pc, #440]	; (80029c0 <Check_Bms_State+0x260>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	001a      	movs	r2, r3
 800280e:	f7ff fd81 	bl	8002314 <Bms_Demand>
			rx_msg = Charger_response();
 8002812:	4c6d      	ldr	r4, [pc, #436]	; (80029c8 <Check_Bms_State+0x268>)
 8002814:	003b      	movs	r3, r7
 8002816:	0018      	movs	r0, r3
 8002818:	f7ff fe28 	bl	800246c <Charger_response>
 800281c:	003b      	movs	r3, r7
 800281e:	0020      	movs	r0, r4
 8002820:	0019      	movs	r1, r3
 8002822:	2308      	movs	r3, #8
 8002824:	001a      	movs	r2, r3
 8002826:	f002 fa7b 	bl	8004d20 <memcpy>
			rec_curr = Read_Current(rx_msg);
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <Check_Bms_State+0x268>)
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	f7ff fe5a 	bl	80024e8 <Read_Current>
 8002834:	0003      	movs	r3, r0
 8002836:	001a      	movs	r2, r3
 8002838:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <Check_Bms_State+0x270>)
 800283a:	801a      	strh	r2, [r3, #0]
			rec_vol = Read_Voltage(rx_msg);
 800283c:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <Check_Bms_State+0x268>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	f7ff fe91 	bl	8002568 <Read_Voltage>
 8002846:	0003      	movs	r3, r0
 8002848:	001a      	movs	r2, r3
 800284a:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <Check_Bms_State+0x274>)
 800284c:	801a      	strh	r2, [r3, #0]
			if(rec_curr == set_curr /*&& rec_vol == set_vol*/)
 800284e:	4b60      	ldr	r3, [pc, #384]	; (80029d0 <Check_Bms_State+0x270>)
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	4b5a      	ldr	r3, [pc, #360]	; (80029bc <Check_Bms_State+0x25c>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d000      	beq.n	800285c <Check_Bms_State+0xfc>
 800285a:	e0a5      	b.n	80029a8 <Check_Bms_State+0x248>
			{
				HAL_Delay(10000);
 800285c:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <Check_Bms_State+0x278>)
 800285e:	0018      	movs	r0, r3
 8002860:	f000 fa2c 	bl	8002cbc <HAL_Delay>
				state = DEM_58V_40A;
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <Check_Bms_State+0x26c>)
 8002866:	2202      	movs	r2, #2
 8002868:	701a      	strb	r2, [r3, #0]
			}
			break;
 800286a:	e09d      	b.n	80029a8 <Check_Bms_State+0x248>
		}

		case DEM_58V_40A:
		{
			set_curr = 30;
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <Check_Bms_State+0x25c>)
 800286e:	221e      	movs	r2, #30
 8002870:	801a      	strh	r2, [r3, #0]
			set_vol = 58;
 8002872:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <Check_Bms_State+0x260>)
 8002874:	223a      	movs	r2, #58	; 0x3a
 8002876:	801a      	strh	r2, [r3, #0]
			chg_state = 1;
 8002878:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <Check_Bms_State+0x264>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
			Bms_Demand(chg_state, set_curr, set_vol);
 800287e:	4b51      	ldr	r3, [pc, #324]	; (80029c4 <Check_Bms_State+0x264>)
 8002880:	7818      	ldrb	r0, [r3, #0]
 8002882:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <Check_Bms_State+0x25c>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b2d9      	uxtb	r1, r3
 8002888:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <Check_Bms_State+0x260>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	001a      	movs	r2, r3
 8002890:	f7ff fd40 	bl	8002314 <Bms_Demand>
			rx_msg = Charger_response();
 8002894:	4c4c      	ldr	r4, [pc, #304]	; (80029c8 <Check_Bms_State+0x268>)
 8002896:	003b      	movs	r3, r7
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff fde7 	bl	800246c <Charger_response>
 800289e:	003b      	movs	r3, r7
 80028a0:	0020      	movs	r0, r4
 80028a2:	0019      	movs	r1, r3
 80028a4:	2308      	movs	r3, #8
 80028a6:	001a      	movs	r2, r3
 80028a8:	f002 fa3a 	bl	8004d20 <memcpy>
			rec_curr = Read_Current(rx_msg);
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <Check_Bms_State+0x268>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	f7ff fe19 	bl	80024e8 <Read_Current>
 80028b6:	0003      	movs	r3, r0
 80028b8:	001a      	movs	r2, r3
 80028ba:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <Check_Bms_State+0x270>)
 80028bc:	801a      	strh	r2, [r3, #0]
			rec_vol = Read_Voltage(rx_msg);
 80028be:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <Check_Bms_State+0x268>)
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	f7ff fe50 	bl	8002568 <Read_Voltage>
 80028c8:	0003      	movs	r3, r0
 80028ca:	001a      	movs	r2, r3
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <Check_Bms_State+0x274>)
 80028ce:	801a      	strh	r2, [r3, #0]
			if(rec_curr == set_curr /*&& rec_vol == set_vol*/)
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <Check_Bms_State+0x270>)
 80028d2:	881a      	ldrh	r2, [r3, #0]
 80028d4:	4b39      	ldr	r3, [pc, #228]	; (80029bc <Check_Bms_State+0x25c>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d167      	bne.n	80029ac <Check_Bms_State+0x24c>
			{
				HAL_Delay(10000);
 80028dc:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <Check_Bms_State+0x278>)
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 f9ec 	bl	8002cbc <HAL_Delay>
				state = DEM_58V_30A;
 80028e4:	4b39      	ldr	r3, [pc, #228]	; (80029cc <Check_Bms_State+0x26c>)
 80028e6:	2203      	movs	r2, #3
 80028e8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80028ea:	e05f      	b.n	80029ac <Check_Bms_State+0x24c>
		}

		case DEM_58V_30A:
		{
			set_curr = 20;
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <Check_Bms_State+0x25c>)
 80028ee:	2214      	movs	r2, #20
 80028f0:	801a      	strh	r2, [r3, #0]
			set_vol = 58;
 80028f2:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <Check_Bms_State+0x260>)
 80028f4:	223a      	movs	r2, #58	; 0x3a
 80028f6:	801a      	strh	r2, [r3, #0]
			chg_state = 1;
 80028f8:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <Check_Bms_State+0x264>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
			Bms_Demand(chg_state, set_curr, set_vol);
 80028fe:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <Check_Bms_State+0x264>)
 8002900:	7818      	ldrb	r0, [r3, #0]
 8002902:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <Check_Bms_State+0x25c>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b2d9      	uxtb	r1, r3
 8002908:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <Check_Bms_State+0x260>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	001a      	movs	r2, r3
 8002910:	f7ff fd00 	bl	8002314 <Bms_Demand>
			rx_msg = Charger_response();
 8002914:	4c2c      	ldr	r4, [pc, #176]	; (80029c8 <Check_Bms_State+0x268>)
 8002916:	003b      	movs	r3, r7
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff fda7 	bl	800246c <Charger_response>
 800291e:	003b      	movs	r3, r7
 8002920:	0020      	movs	r0, r4
 8002922:	0019      	movs	r1, r3
 8002924:	2308      	movs	r3, #8
 8002926:	001a      	movs	r2, r3
 8002928:	f002 f9fa 	bl	8004d20 <memcpy>
			rec_curr = Read_Current(rx_msg);
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <Check_Bms_State+0x268>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
 8002932:	f7ff fdd9 	bl	80024e8 <Read_Current>
 8002936:	0003      	movs	r3, r0
 8002938:	001a      	movs	r2, r3
 800293a:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <Check_Bms_State+0x270>)
 800293c:	801a      	strh	r2, [r3, #0]
			rec_vol = Read_Voltage(rx_msg);
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <Check_Bms_State+0x268>)
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	f7ff fe10 	bl	8002568 <Read_Voltage>
 8002948:	0003      	movs	r3, r0
 800294a:	001a      	movs	r2, r3
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <Check_Bms_State+0x274>)
 800294e:	801a      	strh	r2, [r3, #0]
			if(rec_curr == set_curr /*&& rec_vol == set_vol*/)
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <Check_Bms_State+0x270>)
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <Check_Bms_State+0x25c>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d129      	bne.n	80029b0 <Check_Bms_State+0x250>
			{
				HAL_Delay(10000);
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <Check_Bms_State+0x278>)
 800295e:	0018      	movs	r0, r3
 8002960:	f000 f9ac 	bl	8002cbc <HAL_Delay>
				state = 100;
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <Check_Bms_State+0x26c>)
 8002966:	2264      	movs	r2, #100	; 0x64
 8002968:	701a      	strb	r2, [r3, #0]
			}
			break;
 800296a:	e021      	b.n	80029b0 <Check_Bms_State+0x250>
		}

		default:
		{
			/*Turn Off Charger*/
			set_curr = 0;
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <Check_Bms_State+0x25c>)
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
			set_vol = 0;
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <Check_Bms_State+0x260>)
 8002974:	2200      	movs	r2, #0
 8002976:	801a      	strh	r2, [r3, #0]
			chg_state = 0;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <Check_Bms_State+0x264>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
			Bms_Demand(chg_state, set_curr, set_vol);
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <Check_Bms_State+0x264>)
 8002980:	7818      	ldrb	r0, [r3, #0]
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <Check_Bms_State+0x25c>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b2d9      	uxtb	r1, r3
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <Check_Bms_State+0x260>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	001a      	movs	r2, r3
 8002990:	f7ff fcc0 	bl	8002314 <Bms_Demand>
			HAL_Delay(30000);
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <Check_Bms_State+0x27c>)
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f990 	bl	8002cbc <HAL_Delay>
			state = SYNC_STATE;
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <Check_Bms_State+0x26c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
			break;
 80029a2:	e006      	b.n	80029b2 <Check_Bms_State+0x252>
			break;
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	e004      	b.n	80029b2 <Check_Bms_State+0x252>
			break;
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	e002      	b.n	80029b2 <Check_Bms_State+0x252>
			break;
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	e000      	b.n	80029b2 <Check_Bms_State+0x252>
			break;
 80029b0:	46c0      	nop			; (mov r8, r8)
		}

	}
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b005      	add	sp, #20
 80029b8:	bd90      	pop	{r4, r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	20000110 	.word	0x20000110
 80029c0:	20000112 	.word	0x20000112
 80029c4:	20000118 	.word	0x20000118
 80029c8:	20000108 	.word	0x20000108
 80029cc:	20000104 	.word	0x20000104
 80029d0:	20000114 	.word	0x20000114
 80029d4:	20000116 	.word	0x20000116
 80029d8:	00002710 	.word	0x00002710
 80029dc:	00007530 	.word	0x00007530

080029e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e4:	b672      	cpsid	i
}
 80029e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <Error_Handler+0x8>
	...

080029ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_MspInit+0x44>)
 80029f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_MspInit+0x44>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_MspInit+0x44>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2201      	movs	r2, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_MspInit+0x44>)
 8002a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_MspInit+0x44>)
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	0549      	lsls	r1, r1, #21
 8002a14:	430a      	orrs	r2, r1
 8002a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_MspInit+0x44>)
 8002a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	055b      	lsls	r3, r3, #21
 8002a20:	4013      	ands	r3, r2
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	40021000 	.word	0x40021000

08002a34 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b09d      	sub	sp, #116	; 0x74
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	235c      	movs	r3, #92	; 0x5c
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	0018      	movs	r0, r3
 8002a42:	2314      	movs	r3, #20
 8002a44:	001a      	movs	r2, r3
 8002a46:	2100      	movs	r1, #0
 8002a48:	f002 f973 	bl	8004d32 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a4c:	2410      	movs	r4, #16
 8002a4e:	193b      	adds	r3, r7, r4
 8002a50:	0018      	movs	r0, r3
 8002a52:	234c      	movs	r3, #76	; 0x4c
 8002a54:	001a      	movs	r2, r3
 8002a56:	2100      	movs	r1, #0
 8002a58:	f002 f96b 	bl	8004d32 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <HAL_FDCAN_MspInit+0xcc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d148      	bne.n	8002af8 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	0492      	lsls	r2, r2, #18
 8002a6c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002a6e:	193b      	adds	r3, r7, r4
 8002a70:	2200      	movs	r2, #0
 8002a72:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a74:	193b      	adds	r3, r7, r4
 8002a76:	0018      	movs	r0, r3
 8002a78:	f001 fef2 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002a80:	f7ff ffae 	bl	80029e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a84:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <HAL_FDCAN_MspInit+0xd0>)
 8002a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_FDCAN_MspInit+0xd0>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	0149      	lsls	r1, r1, #5
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_FDCAN_MspInit+0xd0>)
 8002a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	015b      	lsls	r3, r3, #5
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_FDCAN_MspInit+0xd0>)
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_FDCAN_MspInit+0xd0>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_FDCAN_MspInit+0xd0>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ab8:	215c      	movs	r1, #92	; 0x5c
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	22c0      	movs	r2, #192	; 0xc0
 8002abe:	0152      	lsls	r2, r2, #5
 8002ac0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ada:	187a      	adds	r2, r7, r1
 8002adc:	23a0      	movs	r3, #160	; 0xa0
 8002ade:	05db      	lsls	r3, r3, #23
 8002ae0:	0011      	movs	r1, r2
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f001 f826 	bl	8003b34 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2100      	movs	r1, #0
 8002aec:	2015      	movs	r0, #21
 8002aee:	f000 f9b5 	bl	8002e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8002af2:	2015      	movs	r0, #21
 8002af4:	f000 f9c7 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b01d      	add	sp, #116	; 0x74
 8002afe:	bd90      	pop	{r4, r7, pc}
 8002b00:	40006400 	.word	0x40006400
 8002b04:	40021000 	.word	0x40021000

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2c:	f000 f8aa 	bl	8002c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 fd74 	bl	800362c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	20000054 	.word	0x20000054

08002b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b60:	f7ff fff6 	bl	8002b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b64:	480c      	ldr	r0, [pc, #48]	; (8002b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b66:	490d      	ldr	r1, [pc, #52]	; (8002b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <LoopForever+0xe>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <LoopForever+0x16>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b8a:	f002 f8a5 	bl	8004cd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002b8e:	f7ff fd2b 	bl	80025e8 <main>

08002b92 <LoopForever>:

LoopForever:
  b LoopForever
 8002b92:	e7fe      	b.n	8002b92 <LoopForever>
  ldr   r0, =_estack
 8002b94:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b9c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002ba0:	08004f10 	.word	0x08004f10
  ldr r2, =_sbss
 8002ba4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002ba8:	20000120 	.word	0x20000120

08002bac <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bac:	e7fe      	b.n	8002bac <ADC1_COMP_IRQHandler>
	...

08002bb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bb6:	1dfb      	adds	r3, r7, #7
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_Init+0x3c>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_Init+0x3c>)
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	0049      	lsls	r1, r1, #1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bca:	2003      	movs	r0, #3
 8002bcc:	f000 f810 	bl	8002bf0 <HAL_InitTick>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e001      	b.n	8002be0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002bdc:	f7ff ff06 	bl	80029ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	781b      	ldrb	r3, [r3, #0]
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b002      	add	sp, #8
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000

08002bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_InitTick+0x88>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02b      	beq.n	8002c60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <HAL_InitTick+0x8c>)
 8002c0a:	681c      	ldr	r4, [r3, #0]
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_InitTick+0x88>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	0019      	movs	r1, r3
 8002c12:	23fa      	movs	r3, #250	; 0xfa
 8002c14:	0098      	lsls	r0, r3, #2
 8002c16:	f7fd fa75 	bl	8000104 <__udivsi3>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f7fd fa70 	bl	8000104 <__udivsi3>
 8002c24:	0003      	movs	r3, r0
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 f93d 	bl	8002ea6 <HAL_SYSTICK_Config>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d112      	bne.n	8002c56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d80a      	bhi.n	8002c4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	2301      	movs	r3, #1
 8002c3a:	425b      	negs	r3, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 f90c 	bl	8002e5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_InitTick+0x90>)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e00d      	b.n	8002c68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002c4c:	230f      	movs	r3, #15
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e008      	b.n	8002c68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c56:	230f      	movs	r3, #15
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e003      	b.n	8002c68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c60:	230f      	movs	r3, #15
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	781b      	ldrb	r3, [r3, #0]
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b005      	add	sp, #20
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	2000001c 	.word	0x2000001c
 8002c7c:	20000014 	.word	0x20000014
 8002c80:	20000018 	.word	0x20000018

08002c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_IncTick+0x1c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	18d2      	adds	r2, r2, r3
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c96:	601a      	str	r2, [r3, #0]
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	2000001c 	.word	0x2000001c
 8002ca4:	2000011c 	.word	0x2000011c

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b02      	ldr	r3, [pc, #8]	; (8002cb8 <HAL_GetTick+0x10>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	2000011c 	.word	0x2000011c

08002cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_GetTick>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	d005      	beq.n	8002ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_Delay+0x44>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	001a      	movs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	f7ff ffe0 	bl	8002ca8 <HAL_GetTick>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d8f7      	bhi.n	8002ce4 <HAL_Delay+0x28>
  {
  }
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	2000001c 	.word	0x2000001c

08002d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	1dfb      	adds	r3, r7, #7
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b7f      	cmp	r3, #127	; 0x7f
 8002d16:	d809      	bhi.n	8002d2c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d18:	1dfb      	adds	r3, r7, #7
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	231f      	movs	r3, #31
 8002d20:	401a      	ands	r2, r3
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <__NVIC_EnableIRQ+0x30>)
 8002d24:	2101      	movs	r1, #1
 8002d26:	4091      	lsls	r1, r2
 8002d28:	000a      	movs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	0002      	movs	r2, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d4c:	d828      	bhi.n	8002da0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d4e:	4a2f      	ldr	r2, [pc, #188]	; (8002e0c <__NVIC_SetPriority+0xd4>)
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	33c0      	adds	r3, #192	; 0xc0
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	589b      	ldr	r3, [r3, r2]
 8002d5e:	1dfa      	adds	r2, r7, #7
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	0011      	movs	r1, r2
 8002d64:	2203      	movs	r2, #3
 8002d66:	400a      	ands	r2, r1
 8002d68:	00d2      	lsls	r2, r2, #3
 8002d6a:	21ff      	movs	r1, #255	; 0xff
 8002d6c:	4091      	lsls	r1, r2
 8002d6e:	000a      	movs	r2, r1
 8002d70:	43d2      	mvns	r2, r2
 8002d72:	401a      	ands	r2, r3
 8002d74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	22ff      	movs	r2, #255	; 0xff
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	0018      	movs	r0, r3
 8002d84:	2303      	movs	r3, #3
 8002d86:	4003      	ands	r3, r0
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d8c:	481f      	ldr	r0, [pc, #124]	; (8002e0c <__NVIC_SetPriority+0xd4>)
 8002d8e:	1dfb      	adds	r3, r7, #7
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	430a      	orrs	r2, r1
 8002d98:	33c0      	adds	r3, #192	; 0xc0
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d9e:	e031      	b.n	8002e04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002da0:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <__NVIC_SetPriority+0xd8>)
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	0019      	movs	r1, r3
 8002da8:	230f      	movs	r3, #15
 8002daa:	400b      	ands	r3, r1
 8002dac:	3b08      	subs	r3, #8
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3306      	adds	r3, #6
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	18d3      	adds	r3, r2, r3
 8002db6:	3304      	adds	r3, #4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	1dfa      	adds	r2, r7, #7
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	00d2      	lsls	r2, r2, #3
 8002dc6:	21ff      	movs	r1, #255	; 0xff
 8002dc8:	4091      	lsls	r1, r2
 8002dca:	000a      	movs	r2, r1
 8002dcc:	43d2      	mvns	r2, r2
 8002dce:	401a      	ands	r2, r3
 8002dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	401a      	ands	r2, r3
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	0018      	movs	r0, r3
 8002de0:	2303      	movs	r3, #3
 8002de2:	4003      	ands	r3, r0
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002de8:	4809      	ldr	r0, [pc, #36]	; (8002e10 <__NVIC_SetPriority+0xd8>)
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	001c      	movs	r4, r3
 8002df0:	230f      	movs	r3, #15
 8002df2:	4023      	ands	r3, r4
 8002df4:	3b08      	subs	r3, #8
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	3306      	adds	r3, #6
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	18c3      	adds	r3, r0, r3
 8002e00:	3304      	adds	r3, #4
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b003      	add	sp, #12
 8002e0a:	bd90      	pop	{r4, r7, pc}
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1e5a      	subs	r2, r3, #1
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	045b      	lsls	r3, r3, #17
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d301      	bcc.n	8002e2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e010      	b.n	8002e4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <SysTick_Config+0x44>)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	3a01      	subs	r2, #1
 8002e32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e34:	2301      	movs	r3, #1
 8002e36:	425b      	negs	r3, r3
 8002e38:	2103      	movs	r1, #3
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff ff7c 	bl	8002d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <SysTick_Config+0x44>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SysTick_Config+0x44>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b002      	add	sp, #8
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	e000e010 	.word	0xe000e010

08002e5c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	210f      	movs	r1, #15
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	1c02      	adds	r2, r0, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	0011      	movs	r1, r2
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff ff5d 	bl	8002d38 <__NVIC_SetPriority>
}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e92:	1dfb      	adds	r3, r7, #7
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff ff33 	bl	8002d04 <__NVIC_EnableIRQ>
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff ffaf 	bl	8002e14 <SysTick_Config>
 8002eb6:	0003      	movs	r3, r0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e14e      	b.n	8003170 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	225c      	movs	r2, #92	; 0x5c
 8002ed6:	5c9b      	ldrb	r3, [r3, r2]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	225d      	movs	r2, #93	; 0x5d
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7ff fda3 	bl	8002a34 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2110      	movs	r1, #16
 8002efa:	438a      	bics	r2, r1
 8002efc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002efe:	f7ff fed3 	bl	8002ca8 <HAL_GetTick>
 8002f02:	0003      	movs	r3, r0
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002f06:	e012      	b.n	8002f2e <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002f08:	f7ff fece 	bl	8002ca8 <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b0a      	cmp	r3, #10
 8002f14:	d90b      	bls.n	8002f2e <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	225c      	movs	r2, #92	; 0x5c
 8002f26:	2103      	movs	r1, #3
 8002f28:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e120      	b.n	8003170 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2208      	movs	r2, #8
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d0e5      	beq.n	8002f08 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f4c:	f7ff feac 	bl	8002ca8 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002f54:	e012      	b.n	8002f7c <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002f56:	f7ff fea7 	bl	8002ca8 <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b0a      	cmp	r3, #10
 8002f62:	d90b      	bls.n	8002f7c <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	2201      	movs	r2, #1
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	225c      	movs	r2, #92	; 0x5c
 8002f74:	2103      	movs	r1, #3
 8002f76:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0f9      	b.n	8003170 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2201      	movs	r2, #1
 8002f84:	4013      	ands	r3, r2
 8002f86:	d0e6      	beq.n	8002f56 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2102      	movs	r1, #2
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a76      	ldr	r2, [pc, #472]	; (8003178 <HAL_FDCAN_Init+0x2b8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d103      	bne.n	8002faa <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002fa2:	4a76      	ldr	r2, [pc, #472]	; (800317c <HAL_FDCAN_Init+0x2bc>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7c1b      	ldrb	r3, [r3, #16]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2140      	movs	r1, #64	; 0x40
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	619a      	str	r2, [r3, #24]
 8002fc2:	e007      	b.n	8002fd4 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2140      	movs	r1, #64	; 0x40
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7c5b      	ldrb	r3, [r3, #17]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d109      	bne.n	8002ff0 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	01c9      	lsls	r1, r1, #7
 8002fea:	430a      	orrs	r2, r1
 8002fec:	619a      	str	r2, [r3, #24]
 8002fee:	e007      	b.n	8003000 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4961      	ldr	r1, [pc, #388]	; (8003180 <HAL_FDCAN_Init+0x2c0>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7c9b      	ldrb	r3, [r3, #18]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d108      	bne.n	800301a <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	495c      	ldr	r1, [pc, #368]	; (8003184 <HAL_FDCAN_Init+0x2c4>)
 8003014:	400a      	ands	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
 8003018:	e008      	b.n	800302c <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	0149      	lsls	r1, r1, #5
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	4a55      	ldr	r2, [pc, #340]	; (8003188 <HAL_FDCAN_Init+0x2c8>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	21a4      	movs	r1, #164	; 0xa4
 8003050:	438a      	bics	r2, r1
 8003052:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2110      	movs	r1, #16
 8003060:	438a      	bics	r2, r1
 8003062:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d108      	bne.n	800307e <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2104      	movs	r1, #4
 8003078:	430a      	orrs	r2, r1
 800307a:	619a      	str	r2, [r3, #24]
 800307c:	e02c      	b.n	80030d8 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d028      	beq.n	80030d8 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d01c      	beq.n	80030c8 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2180      	movs	r1, #128	; 0x80
 800309a:	430a      	orrs	r2, r1
 800309c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2110      	movs	r1, #16
 80030aa:	430a      	orrs	r2, r1
 80030ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d110      	bne.n	80030d8 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2120      	movs	r1, #32
 80030c2:	430a      	orrs	r2, r1
 80030c4:	619a      	str	r2, [r3, #24]
 80030c6:	e007      	b.n	80030d8 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2120      	movs	r1, #32
 80030d4:	430a      	orrs	r2, r1
 80030d6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	3b01      	subs	r3, #1
 80030de:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030e8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80030f0:	431a      	orrs	r2, r3
 80030f2:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003100:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003102:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	23c0      	movs	r3, #192	; 0xc0
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	429a      	cmp	r2, r3
 800310e:	d115      	bne.n	800313c <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	3b01      	subs	r3, #1
 800311c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800311e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	3b01      	subs	r3, #1
 8003126:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003128:	431a      	orrs	r2, r3
 800312a:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	3b01      	subs	r3, #1
 8003132:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003138:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800313a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	22c0      	movs	r2, #192	; 0xc0
 8003142:	5899      	ldr	r1, [r3, r2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	21c0      	movs	r1, #192	; 0xc0
 8003150:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	0018      	movs	r0, r3
 8003156:	f000 fc05 	bl	8003964 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	225c      	movs	r2, #92	; 0x5c
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40006400 	.word	0x40006400
 800317c:	40006500 	.word	0x40006500
 8003180:	ffffbfff 	.word	0xffffbfff
 8003184:	ffffefff 	.word	0xffffefff
 8003188:	fffffcff 	.word	0xfffffcff

0800318c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	225c      	movs	r2, #92	; 0x5c
 8003198:	5c9b      	ldrb	r3, [r3, r2]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d110      	bne.n	80031c2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	225c      	movs	r2, #92	; 0x5c
 80031a4:	2102      	movs	r1, #2
 80031a6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2101      	movs	r1, #1
 80031b4:	438a      	bics	r2, r1
 80031b6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e006      	b.n	80031d0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	2204      	movs	r2, #4
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
  }
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	225c      	movs	r2, #92	; 0x5c
 80031e8:	5c9b      	ldrb	r3, [r3, r2]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d12d      	bne.n	800324c <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	22c4      	movs	r2, #196	; 0xc4
 80031f6:	589a      	ldr	r2, [r3, r2]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	039b      	lsls	r3, r3, #14
 80031fc:	4013      	ands	r3, r2
 80031fe:	d008      	beq.n	8003212 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	0092      	lsls	r2, r2, #2
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e023      	b.n	800325a <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	22c4      	movs	r2, #196	; 0xc4
 8003218:	589b      	ldr	r3, [r3, r2]
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	2203      	movs	r2, #3
 800321e:	4013      	ands	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fc07 	bl	8003a3c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4091      	lsls	r1, r2
 8003238:	000a      	movs	r2, r1
 800323a:	21cc      	movs	r1, #204	; 0xcc
 800323c:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800323e:	2201      	movs	r2, #1
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e006      	b.n	800325a <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	2208      	movs	r2, #8
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
  }
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b006      	add	sp, #24
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003276:	201b      	movs	r0, #27
 8003278:	183b      	adds	r3, r7, r0
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	215c      	movs	r1, #92	; 0x5c
 800327e:	5c52      	ldrb	r2, [r2, r1]
 8003280:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003282:	183b      	adds	r3, r7, r0
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d000      	beq.n	800328c <HAL_FDCAN_GetRxMessage+0x28>
 800328a:	e0ec      	b.n	8003466 <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d137      	bne.n	8003302 <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2290      	movs	r2, #144	; 0x90
 8003298:	589b      	ldr	r3, [r3, r2]
 800329a:	220f      	movs	r2, #15
 800329c:	4013      	ands	r3, r2
 800329e:	d108      	bne.n	80032b2 <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	0052      	lsls	r2, r2, #1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0e0      	b.n	8003474 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2290      	movs	r2, #144	; 0x90
 80032b8:	589b      	ldr	r3, [r3, r2]
 80032ba:	0e1b      	lsrs	r3, r3, #24
 80032bc:	2201      	movs	r2, #1
 80032be:	4013      	ands	r3, r2
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10a      	bne.n	80032da <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2280      	movs	r2, #128	; 0x80
 80032ca:	589b      	ldr	r3, [r3, r2]
 80032cc:	0a5b      	lsrs	r3, r3, #9
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2290      	movs	r2, #144	; 0x90
 80032e0:	589b      	ldr	r3, [r3, r2]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	2203      	movs	r2, #3
 80032e6:	4013      	ands	r3, r2
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	18d3      	adds	r3, r2, r3
 80032ec:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	0013      	movs	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	189b      	adds	r3, r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	18cb      	adds	r3, r1, r3
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	e036      	b.n	8003370 <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2298      	movs	r2, #152	; 0x98
 8003308:	589b      	ldr	r3, [r3, r2]
 800330a:	220f      	movs	r2, #15
 800330c:	4013      	ands	r3, r2
 800330e:	d108      	bne.n	8003322 <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	0052      	lsls	r2, r2, #1
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0a8      	b.n	8003474 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2298      	movs	r2, #152	; 0x98
 8003328:	589b      	ldr	r3, [r3, r2]
 800332a:	0e1b      	lsrs	r3, r3, #24
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10a      	bne.n	800334a <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	589b      	ldr	r3, [r3, r2]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	2201      	movs	r2, #1
 8003340:	4013      	ands	r3, r2
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003346:	2301      	movs	r3, #1
 8003348:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2298      	movs	r2, #152	; 0x98
 8003350:	589b      	ldr	r3, [r3, r2]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	2203      	movs	r2, #3
 8003356:	4013      	ands	r3, r2
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	18d3      	adds	r3, r2, r3
 800335c:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	0013      	movs	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	189b      	adds	r3, r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	18cb      	adds	r3, r1, r3
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	05db      	lsls	r3, r3, #23
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0c9b      	lsrs	r3, r3, #18
 800338c:	055b      	lsls	r3, r3, #21
 800338e:	0d5a      	lsrs	r2, r3, #21
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e005      	b.n	80033a2 <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	059b      	lsls	r3, r3, #22
 80033aa:	401a      	ands	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0fdb      	lsrs	r3, r3, #31
 80033b6:	07da      	lsls	r2, r3, #31
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	3304      	adds	r3, #4
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	041b      	lsls	r3, r3, #16
 80033c8:	0c1a      	lsrs	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	220f      	movs	r2, #15
 80033d6:	401a      	ands	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	035b      	lsls	r3, r3, #13
 80033e4:	401a      	ands	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	039b      	lsls	r3, r3, #14
 80033f2:	401a      	ands	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0e1b      	lsrs	r3, r3, #24
 80033fe:	227f      	movs	r2, #127	; 0x7f
 8003400:	401a      	ands	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	0fda      	lsrs	r2, r3, #31
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	3304      	adds	r3, #4
 8003414:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800341a:	2300      	movs	r3, #0
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	e00a      	b.n	8003436 <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	18d2      	adds	r2, r2, r3
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	18cb      	adds	r3, r1, r3
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	3301      	adds	r3, #1
 8003434:	623b      	str	r3, [r7, #32]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4a10      	ldr	r2, [pc, #64]	; (800347c <HAL_FDCAN_GetRxMessage+0x218>)
 800343c:	5cd3      	ldrb	r3, [r2, r3]
 800343e:	001a      	movs	r2, r3
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	4293      	cmp	r3, r2
 8003444:	d3ec      	bcc.n	8003420 <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d105      	bne.n	8003458 <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2194      	movs	r1, #148	; 0x94
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	505a      	str	r2, [r3, r1]
 8003456:	e004      	b.n	8003462 <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	219c      	movs	r1, #156	; 0x9c
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e006      	b.n	8003474 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	2208      	movs	r2, #8
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
  }
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b00a      	add	sp, #40	; 0x28
 800347a:	bd80      	pop	{r7, pc}
 800347c:	08004ef8 	.word	0x08004ef8

08003480 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800348c:	2017      	movs	r0, #23
 800348e:	183b      	adds	r3, r7, r0
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	215c      	movs	r1, #92	; 0x5c
 8003494:	5c52      	ldrb	r2, [r2, r1]
 8003496:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003498:	0002      	movs	r2, r0
 800349a:	18bb      	adds	r3, r7, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d004      	beq.n	80034ac <HAL_FDCAN_ActivateNotification+0x2c>
 80034a2:	18bb      	adds	r3, r7, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d000      	beq.n	80034ac <HAL_FDCAN_ActivateNotification+0x2c>
 80034aa:	e0b4      	b.n	8003616 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2207      	movs	r2, #7
 80034b8:	4013      	ands	r3, r2
 80034ba:	d003      	beq.n	80034c4 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2201      	movs	r2, #1
 80034c0:	4013      	ands	r3, r2
 80034c2:	d034      	beq.n	800352e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2238      	movs	r2, #56	; 0x38
 80034c8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80034ca:	d003      	beq.n	80034d4 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2202      	movs	r2, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	d02c      	beq.n	800352e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	23e0      	movs	r3, #224	; 0xe0
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80034dc:	d003      	beq.n	80034e6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2204      	movs	r2, #4
 80034e2:	4013      	ands	r3, r2
 80034e4:	d023      	beq.n	800352e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	23f0      	movs	r3, #240	; 0xf0
 80034ea:	015b      	lsls	r3, r3, #5
 80034ec:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80034ee:	d003      	beq.n	80034f8 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2208      	movs	r2, #8
 80034f4:	4013      	ands	r3, r2
 80034f6:	d01a      	beq.n	800352e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	23e0      	movs	r3, #224	; 0xe0
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003500:	d003      	beq.n	800350a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2210      	movs	r2, #16
 8003506:	4013      	ands	r3, r2
 8003508:	d011      	beq.n	800352e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	23c0      	movs	r3, #192	; 0xc0
 800350e:	029b      	lsls	r3, r3, #10
 8003510:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003512:	d003      	beq.n	800351c <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2220      	movs	r2, #32
 8003518:	4013      	ands	r3, r2
 800351a:	d008      	beq.n	800352e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	23fc      	movs	r3, #252	; 0xfc
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003524:	d00b      	beq.n	800353e <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	4013      	ands	r3, r2
 800352c:	d107      	bne.n	800353e <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2101      	movs	r1, #1
 800353a:	430a      	orrs	r2, r1
 800353c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2207      	movs	r2, #7
 8003542:	4013      	ands	r3, r2
 8003544:	d003      	beq.n	800354e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2201      	movs	r2, #1
 800354a:	4013      	ands	r3, r2
 800354c:	d134      	bne.n	80035b8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2238      	movs	r2, #56	; 0x38
 8003552:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003554:	d003      	beq.n	800355e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2202      	movs	r2, #2
 800355a:	4013      	ands	r3, r2
 800355c:	d12c      	bne.n	80035b8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	23e0      	movs	r3, #224	; 0xe0
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003566:	d003      	beq.n	8003570 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2204      	movs	r2, #4
 800356c:	4013      	ands	r3, r2
 800356e:	d123      	bne.n	80035b8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	23f0      	movs	r3, #240	; 0xf0
 8003574:	015b      	lsls	r3, r3, #5
 8003576:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003578:	d003      	beq.n	8003582 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2208      	movs	r2, #8
 800357e:	4013      	ands	r3, r2
 8003580:	d11a      	bne.n	80035b8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	23e0      	movs	r3, #224	; 0xe0
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800358a:	d003      	beq.n	8003594 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2210      	movs	r2, #16
 8003590:	4013      	ands	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	23c0      	movs	r3, #192	; 0xc0
 8003598:	029b      	lsls	r3, r3, #10
 800359a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800359c:	d003      	beq.n	80035a6 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2220      	movs	r2, #32
 80035a2:	4013      	ands	r3, r2
 80035a4:	d108      	bne.n	80035b8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	23fc      	movs	r3, #252	; 0xfc
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80035ae:	d00b      	beq.n	80035c8 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	4013      	ands	r3, r2
 80035b6:	d007      	beq.n	80035c8 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2102      	movs	r1, #2
 80035c4:	430a      	orrs	r2, r1
 80035c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	4013      	ands	r3, r2
 80035ce:	d009      	beq.n	80035e4 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	22dc      	movs	r2, #220	; 0xdc
 80035d6:	5899      	ldr	r1, [r3, r2]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	430a      	orrs	r2, r1
 80035e0:	21dc      	movs	r1, #220	; 0xdc
 80035e2:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	22e0      	movs	r2, #224	; 0xe0
 80035f4:	5899      	ldr	r1, [r3, r2]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	21e0      	movs	r1, #224	; 0xe0
 8003600:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	430a      	orrs	r2, r1
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e006      	b.n	8003624 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	2202      	movs	r2, #2
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
  }
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b006      	add	sp, #24
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800363a:	23e0      	movs	r3, #224	; 0xe0
 800363c:	015b      	lsls	r3, r3, #5
 800363e:	4013      	ands	r3, r2
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	4013      	ands	r3, r2
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	2207      	movs	r2, #7
 8003656:	4013      	ands	r3, r2
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	4013      	ands	r3, r2
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	2238      	movs	r2, #56	; 0x38
 800366e:	4013      	ands	r3, r2
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	4013      	ands	r3, r2
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003684:	23f1      	movs	r3, #241	; 0xf1
 8003686:	041b      	lsls	r3, r3, #16
 8003688:	4013      	ands	r3, r2
 800368a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	4013      	ands	r3, r2
 8003696:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800369e:	23e0      	movs	r3, #224	; 0xe0
 80036a0:	031b      	lsls	r3, r3, #12
 80036a2:	4013      	ands	r3, r2
 80036a4:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c0:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	001a      	movs	r2, r3
 80036c8:	2301      	movs	r3, #1
 80036ca:	4013      	ands	r3, r2
 80036cc:	d00d      	beq.n	80036ea <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	001a      	movs	r2, r3
 80036d4:	2301      	movs	r3, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	d007      	beq.n	80036ea <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f924 	bl	8003932 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	001a      	movs	r2, r3
 80036f0:	2301      	movs	r3, #1
 80036f2:	4013      	ands	r3, r2
 80036f4:	d01c      	beq.n	8003730 <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	001a      	movs	r2, r3
 80036fc:	2301      	movs	r3, #1
 80036fe:	4013      	ands	r3, r2
 8003700:	d016      	beq.n	8003730 <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	22d8      	movs	r2, #216	; 0xd8
 8003708:	589b      	ldr	r3, [r3, r2]
 800370a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	22e0      	movs	r2, #224	; 0xe0
 8003712:	589a      	ldr	r2, [r3, r2]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	0052      	lsls	r2, r2, #1
 8003722:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0011      	movs	r1, r2
 800372a:	0018      	movs	r0, r3
 800372c:	f000 f8e8 	bl	8003900 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800373e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0011      	movs	r1, r2
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f8b8 	bl	80038ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003756:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f7fe fd96 	bl	8002290 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003770:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0011      	movs	r1, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f000 f8a7 	bl	80038cc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	0a5b      	lsrs	r3, r3, #9
 8003782:	001a      	movs	r2, r3
 8003784:	2301      	movs	r3, #1
 8003786:	4013      	ands	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	0a5b      	lsrs	r3, r3, #9
 800378e:	001a      	movs	r2, r3
 8003790:	2301      	movs	r3, #1
 8003792:	4013      	ands	r3, r2
 8003794:	d008      	beq.n	80037a8 <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 f89b 	bl	80038de <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	09db      	lsrs	r3, r3, #7
 80037ac:	001a      	movs	r2, r3
 80037ae:	2301      	movs	r3, #1
 80037b0:	4013      	ands	r3, r2
 80037b2:	d01b      	beq.n	80037ec <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	09db      	lsrs	r3, r3, #7
 80037b8:	001a      	movs	r2, r3
 80037ba:	2301      	movs	r3, #1
 80037bc:	4013      	ands	r3, r2
 80037be:	d015      	beq.n	80037ec <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	22d4      	movs	r2, #212	; 0xd4
 80037c6:	589b      	ldr	r3, [r3, r2]
 80037c8:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	22dc      	movs	r2, #220	; 0xdc
 80037d0:	589a      	ldr	r2, [r3, r2]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0011      	movs	r1, r2
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f881 	bl	80038ee <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	0b5b      	lsrs	r3, r3, #13
 80037f0:	001a      	movs	r2, r3
 80037f2:	2301      	movs	r3, #1
 80037f4:	4013      	ands	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	0b5b      	lsrs	r3, r3, #13
 80037fc:	001a      	movs	r2, r3
 80037fe:	2301      	movs	r3, #1
 8003800:	4013      	ands	r3, r2
 8003802:	d008      	beq.n	8003816 <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	0192      	lsls	r2, r2, #6
 800380c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	0018      	movs	r0, r3
 8003812:	f000 f87e 	bl	8003912 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	0bdb      	lsrs	r3, r3, #15
 800381a:	001a      	movs	r2, r3
 800381c:	2301      	movs	r3, #1
 800381e:	4013      	ands	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	0bdb      	lsrs	r3, r3, #15
 8003826:	001a      	movs	r2, r3
 8003828:	2301      	movs	r3, #1
 800382a:	4013      	ands	r3, r2
 800382c:	d008      	beq.n	8003840 <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	0212      	lsls	r2, r2, #8
 8003836:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0018      	movs	r0, r3
 800383c:	f000 f871 	bl	8003922 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0b9b      	lsrs	r3, r3, #14
 8003844:	001a      	movs	r2, r3
 8003846:	2301      	movs	r3, #1
 8003848:	4013      	ands	r3, r2
 800384a:	d010      	beq.n	800386e <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	0b9b      	lsrs	r3, r3, #14
 8003850:	001a      	movs	r2, r3
 8003852:	2301      	movs	r3, #1
 8003854:	4013      	ands	r3, r2
 8003856:	d00a      	beq.n	800386e <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2280      	movs	r2, #128	; 0x80
 800385e:	01d2      	lsls	r2, r2, #7
 8003860:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f000 f865 	bl	8003952 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 f848 	bl	8003942 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b00c      	add	sp, #48	; 0x30
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b002      	add	sp, #8
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b002      	add	sp, #8
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b002      	add	sp, #8
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b002      	add	sp, #8
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b002      	add	sp, #8
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}

08003964 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800396c:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 800396e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2e      	ldr	r2, [pc, #184]	; (8003a30 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d105      	bne.n	8003986 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	22d4      	movs	r2, #212	; 0xd4
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	4694      	mov	ip, r2
 8003982:	4463      	add	r3, ip
 8003984:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	589b      	ldr	r3, [r3, r2]
 8003994:	4a27      	ldr	r2, [pc, #156]	; (8003a34 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003996:	4013      	ands	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	041a      	lsls	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	3370      	adds	r3, #112	; 0x70
 80039ae:	001a      	movs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	589b      	ldr	r3, [r3, r2]
 80039bc:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80039be:	4013      	ands	r3, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	061a      	lsls	r2, r3, #24
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	33b0      	adds	r3, #176	; 0xb0
 80039d6:	001a      	movs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3389      	adds	r3, #137	; 0x89
 80039e0:	33ff      	adds	r3, #255	; 0xff
 80039e2:	001a      	movs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2298      	movs	r2, #152	; 0x98
 80039ec:	0092      	lsls	r2, r2, #2
 80039ee:	189a      	adds	r2, r3, r2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	229e      	movs	r2, #158	; 0x9e
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	189a      	adds	r2, r3, r2
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e005      	b.n	8003a12 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	22d4      	movs	r2, #212	; 0xd4
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4694      	mov	ip, r2
 8003a1a:	4463      	add	r3, ip
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d3f1      	bcc.n	8003a06 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	4000b400 	.word	0x4000b400
 8003a30:	40006800 	.word	0x40006800
 8003a34:	ffe0ffff 	.word	0xffe0ffff
 8003a38:	f0ffffff 	.word	0xf0ffffff

08003a3c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003a5a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e00b      	b.n	8003a80 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003a70:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003a76:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	05d2      	lsls	r2, r2, #23
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003a8a:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003a90:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003a96:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	0013      	movs	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	189b      	adds	r3, r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	18cb      	adds	r3, r1, r3
 8003ab2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3304      	adds	r3, #4
 8003abe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e020      	b.n	8003b14 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3303      	adds	r3, #3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	18d3      	adds	r3, r2, r3
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	18cb      	adds	r3, r1, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003aea:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3301      	adds	r3, #1
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	18cb      	adds	r3, r1, r3
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003af8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	188a      	adds	r2, r1, r2
 8003b00:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003b02:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3304      	adds	r3, #4
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <FDCAN_CopyMessageToRAM+0xf4>)
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d3d6      	bcc.n	8003ad2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b008      	add	sp, #32
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	08004ef8 	.word	0x08004ef8

08003b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b42:	e14d      	b.n	8003de0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2101      	movs	r1, #1
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4091      	lsls	r1, r2
 8003b4e:	000a      	movs	r2, r1
 8003b50:	4013      	ands	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d100      	bne.n	8003b5c <HAL_GPIO_Init+0x28>
 8003b5a:	e13e      	b.n	8003dda <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2203      	movs	r2, #3
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d005      	beq.n	8003b74 <HAL_GPIO_Init+0x40>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d130      	bne.n	8003bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	409a      	lsls	r2, r3
 8003b82:	0013      	movs	r3, r2
 8003b84:	43da      	mvns	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	409a      	lsls	r2, r3
 8003b96:	0013      	movs	r3, r2
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003baa:	2201      	movs	r2, #1
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	0013      	movs	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2203      	movs	r2, #3
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d017      	beq.n	8003c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	2203      	movs	r2, #3
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	0013      	movs	r3, r2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2203      	movs	r2, #3
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d123      	bne.n	8003c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	08da      	lsrs	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3208      	adds	r2, #8
 8003c26:	0092      	lsls	r2, r2, #2
 8003c28:	58d3      	ldr	r3, [r2, r3]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2207      	movs	r2, #7
 8003c30:	4013      	ands	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	220f      	movs	r2, #15
 8003c36:	409a      	lsls	r2, r3
 8003c38:	0013      	movs	r3, r2
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2107      	movs	r1, #7
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	08da      	lsrs	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3208      	adds	r2, #8
 8003c60:	0092      	lsls	r2, r2, #2
 8003c62:	6939      	ldr	r1, [r7, #16]
 8003c64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	2203      	movs	r2, #3
 8003c72:	409a      	lsls	r2, r3
 8003c74:	0013      	movs	r3, r2
 8003c76:	43da      	mvns	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2203      	movs	r2, #3
 8003c84:	401a      	ands	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	0013      	movs	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	23c0      	movs	r3, #192	; 0xc0
 8003ca0:	029b      	lsls	r3, r3, #10
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d100      	bne.n	8003ca8 <HAL_GPIO_Init+0x174>
 8003ca6:	e098      	b.n	8003dda <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ca8:	4a53      	ldr	r2, [pc, #332]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	3318      	adds	r3, #24
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	589b      	ldr	r3, [r3, r2]
 8003cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	4013      	ands	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	0013      	movs	r3, r2
 8003cc4:	43da      	mvns	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	23a0      	movs	r3, #160	; 0xa0
 8003cd0:	05db      	lsls	r3, r3, #23
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d019      	beq.n	8003d0a <HAL_GPIO_Init+0x1d6>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_GPIO_Init+0x1d2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a47      	ldr	r2, [pc, #284]	; (8003e00 <HAL_GPIO_Init+0x2cc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00d      	beq.n	8003d02 <HAL_GPIO_Init+0x1ce>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a46      	ldr	r2, [pc, #280]	; (8003e04 <HAL_GPIO_Init+0x2d0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x1ca>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a45      	ldr	r2, [pc, #276]	; (8003e08 <HAL_GPIO_Init+0x2d4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_GPIO_Init+0x1c6>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	e008      	b.n	8003d0c <HAL_GPIO_Init+0x1d8>
 8003cfa:	2305      	movs	r3, #5
 8003cfc:	e006      	b.n	8003d0c <HAL_GPIO_Init+0x1d8>
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e004      	b.n	8003d0c <HAL_GPIO_Init+0x1d8>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e002      	b.n	8003d0c <HAL_GPIO_Init+0x1d8>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_GPIO_Init+0x1d8>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	2103      	movs	r1, #3
 8003d10:	400a      	ands	r2, r1
 8003d12:	00d2      	lsls	r2, r2, #3
 8003d14:	4093      	lsls	r3, r2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d1c:	4936      	ldr	r1, [pc, #216]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	3318      	adds	r3, #24
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d2a:	4b33      	ldr	r3, [pc, #204]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	035b      	lsls	r3, r3, #13
 8003d42:	4013      	ands	r3, r2
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	039b      	lsls	r3, r3, #14
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d78:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d7e:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003d80:	2384      	movs	r3, #132	; 0x84
 8003d82:	58d3      	ldr	r3, [r2, r3]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	029b      	lsls	r3, r3, #10
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003da4:	4914      	ldr	r1, [pc, #80]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003da6:	2284      	movs	r2, #132	; 0x84
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003dac:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	58d3      	ldr	r3, [r2, r3]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43da      	mvns	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	025b      	lsls	r3, r3, #9
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dd2:	4909      	ldr	r1, [pc, #36]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	40da      	lsrs	r2, r3
 8003de8:	1e13      	subs	r3, r2, #0
 8003dea:	d000      	beq.n	8003dee <HAL_GPIO_Init+0x2ba>
 8003dec:	e6aa      	b.n	8003b44 <HAL_GPIO_Init+0x10>
  }
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b006      	add	sp, #24
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021800 	.word	0x40021800
 8003dfc:	50000400 	.word	0x50000400
 8003e00:	50000800 	.word	0x50000800
 8003e04:	50000c00 	.word	0x50000c00
 8003e08:	50001000 	.word	0x50001000

08003e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d11f      	bne.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	0013      	movs	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	4912      	ldr	r1, [pc, #72]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f7fc f960 	bl	8000104 <__udivsi3>
 8003e44:	0003      	movs	r3, r0
 8003e46:	3301      	adds	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e4a:	e008      	b.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e001      	b.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e009      	b.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	401a      	ands	r2, r3
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0ed      	beq.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b004      	add	sp, #16
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	fffff9ff 	.word	0xfffff9ff
 8003e84:	20000014 	.word	0x20000014
 8003e88:	000f4240 	.word	0x000f4240

08003e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f000 fb50 	bl	8004540 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d100      	bne.n	8003eac <HAL_RCC_OscConfig+0x20>
 8003eaa:	e07c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eac:	4bc3      	ldr	r3, [pc, #780]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2238      	movs	r2, #56	; 0x38
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb6:	4bc1      	ldr	r3, [pc, #772]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2203      	movs	r2, #3
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d102      	bne.n	8003ecc <HAL_RCC_OscConfig+0x40>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d002      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d10b      	bne.n	8003eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed2:	4bba      	ldr	r3, [pc, #744]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	029b      	lsls	r3, r3, #10
 8003eda:	4013      	ands	r3, r2
 8003edc:	d062      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x118>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d15e      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e32a      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	025b      	lsls	r3, r3, #9
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_OscConfig+0x7a>
 8003ef6:	4bb1      	ldr	r3, [pc, #708]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4bb0      	ldr	r3, [pc, #704]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	0249      	lsls	r1, r1, #9
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e020      	b.n	8003f48 <HAL_RCC_OscConfig+0xbc>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	23a0      	movs	r3, #160	; 0xa0
 8003f0c:	02db      	lsls	r3, r3, #11
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d10e      	bne.n	8003f30 <HAL_RCC_OscConfig+0xa4>
 8003f12:	4baa      	ldr	r3, [pc, #680]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4ba9      	ldr	r3, [pc, #676]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	02c9      	lsls	r1, r1, #11
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	4ba6      	ldr	r3, [pc, #664]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4ba5      	ldr	r3, [pc, #660]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f26:	2180      	movs	r1, #128	; 0x80
 8003f28:	0249      	lsls	r1, r1, #9
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0xbc>
 8003f30:	4ba2      	ldr	r3, [pc, #648]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4ba1      	ldr	r3, [pc, #644]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f36:	49a2      	ldr	r1, [pc, #648]	; (80041c0 <HAL_RCC_OscConfig+0x334>)
 8003f38:	400a      	ands	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	4b9f      	ldr	r3, [pc, #636]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b9e      	ldr	r3, [pc, #632]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f42:	49a0      	ldr	r1, [pc, #640]	; (80041c4 <HAL_RCC_OscConfig+0x338>)
 8003f44:	400a      	ands	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d014      	beq.n	8003f7a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe feaa 	bl	8002ca8 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5a:	f7fe fea5 	bl	8002ca8 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b64      	cmp	r3, #100	; 0x64
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e2e9      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6c:	4b93      	ldr	r3, [pc, #588]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0xce>
 8003f78:	e015      	b.n	8003fa6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fe fe95 	bl	8002ca8 <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe fe90 	bl	8002ca8 <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e2d4      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f96:	4b89      	ldr	r3, [pc, #548]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	029b      	lsls	r3, r3, #10
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0xf8>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d100      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x126>
 8003fb0:	e099      	b.n	80040e6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb2:	4b82      	ldr	r3, [pc, #520]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2238      	movs	r2, #56	; 0x38
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fbc:	4b7f      	ldr	r3, [pc, #508]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d102      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x146>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d135      	bne.n	8004044 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd8:	4b78      	ldr	r3, [pc, #480]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x164>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e2a7      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	4b72      	ldr	r3, [pc, #456]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a74      	ldr	r2, [pc, #464]	; (80041c8 <HAL_RCC_OscConfig+0x33c>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	4b6e      	ldr	r3, [pc, #440]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d112      	bne.n	8004032 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800400c:	4b6b      	ldr	r3, [pc, #428]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6e      	ldr	r2, [pc, #440]	; (80041cc <HAL_RCC_OscConfig+0x340>)
 8004012:	4013      	ands	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	4b68      	ldr	r3, [pc, #416]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004020:	4b66      	ldr	r3, [pc, #408]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	0adb      	lsrs	r3, r3, #11
 8004026:	2207      	movs	r2, #7
 8004028:	4013      	ands	r3, r2
 800402a:	4a69      	ldr	r2, [pc, #420]	; (80041d0 <HAL_RCC_OscConfig+0x344>)
 800402c:	40da      	lsrs	r2, r3
 800402e:	4b69      	ldr	r3, [pc, #420]	; (80041d4 <HAL_RCC_OscConfig+0x348>)
 8004030:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004032:	4b69      	ldr	r3, [pc, #420]	; (80041d8 <HAL_RCC_OscConfig+0x34c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	0018      	movs	r0, r3
 8004038:	f7fe fdda 	bl	8002bf0 <HAL_InitTick>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d051      	beq.n	80040e4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e27d      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d030      	beq.n	80040ae <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800404c:	4b5b      	ldr	r3, [pc, #364]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a5e      	ldr	r2, [pc, #376]	; (80041cc <HAL_RCC_OscConfig+0x340>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	4b58      	ldr	r3, [pc, #352]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004060:	4b56      	ldr	r3, [pc, #344]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b55      	ldr	r3, [pc, #340]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	0049      	lsls	r1, r1, #1
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fe fe1b 	bl	8002ca8 <HAL_GetTick>
 8004072:	0003      	movs	r3, r0
 8004074:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004078:	f7fe fe16 	bl	8002ca8 <HAL_GetTick>
 800407c:	0002      	movs	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e25a      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408a:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4013      	ands	r3, r2
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004096:	4b49      	ldr	r3, [pc, #292]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4a4b      	ldr	r2, [pc, #300]	; (80041c8 <HAL_RCC_OscConfig+0x33c>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	021a      	lsls	r2, r3, #8
 80040a6:	4b45      	ldr	r3, [pc, #276]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	e01b      	b.n	80040e6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b42      	ldr	r3, [pc, #264]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 80040b4:	4949      	ldr	r1, [pc, #292]	; (80041dc <HAL_RCC_OscConfig+0x350>)
 80040b6:	400a      	ands	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fe fdf5 	bl	8002ca8 <HAL_GetTick>
 80040be:	0003      	movs	r3, r0
 80040c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fe fdf0 	bl	8002ca8 <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e234      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d6:	4b39      	ldr	r3, [pc, #228]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x238>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2208      	movs	r2, #8
 80040ec:	4013      	ands	r3, r2
 80040ee:	d047      	beq.n	8004180 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040f0:	4b32      	ldr	r3, [pc, #200]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2238      	movs	r2, #56	; 0x38
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b18      	cmp	r3, #24
 80040fa:	d10a      	bne.n	8004112 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	2202      	movs	r2, #2
 8004102:	4013      	ands	r3, r2
 8004104:	d03c      	beq.n	8004180 <HAL_RCC_OscConfig+0x2f4>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d138      	bne.n	8004180 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e216      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d019      	beq.n	800414e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800411a:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 800411c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800411e:	4b27      	ldr	r3, [pc, #156]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004120:	2101      	movs	r1, #1
 8004122:	430a      	orrs	r2, r1
 8004124:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fe fdbf 	bl	8002ca8 <HAL_GetTick>
 800412a:	0003      	movs	r3, r0
 800412c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004130:	f7fe fdba 	bl	8002ca8 <HAL_GetTick>
 8004134:	0002      	movs	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1fe      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004142:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004146:	2202      	movs	r2, #2
 8004148:	4013      	ands	r3, r2
 800414a:	d0f1      	beq.n	8004130 <HAL_RCC_OscConfig+0x2a4>
 800414c:	e018      	b.n	8004180 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004150:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004154:	2101      	movs	r1, #1
 8004156:	438a      	bics	r2, r1
 8004158:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fe fda5 	bl	8002ca8 <HAL_GetTick>
 800415e:	0003      	movs	r3, r0
 8004160:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004164:	f7fe fda0 	bl	8002ca8 <HAL_GetTick>
 8004168:	0002      	movs	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1e4      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417a:	2202      	movs	r2, #2
 800417c:	4013      	ands	r3, r2
 800417e:	d1f1      	bne.n	8004164 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2204      	movs	r2, #4
 8004186:	4013      	ands	r3, r2
 8004188:	d100      	bne.n	800418c <HAL_RCC_OscConfig+0x300>
 800418a:	e0c7      	b.n	800431c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418c:	231f      	movs	r3, #31
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2238      	movs	r2, #56	; 0x38
 800419a:	4013      	ands	r3, r2
 800419c:	2b20      	cmp	r3, #32
 800419e:	d11f      	bne.n	80041e0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_RCC_OscConfig+0x330>)
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	2202      	movs	r2, #2
 80041a6:	4013      	ands	r3, r2
 80041a8:	d100      	bne.n	80041ac <HAL_RCC_OscConfig+0x320>
 80041aa:	e0b7      	b.n	800431c <HAL_RCC_OscConfig+0x490>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d000      	beq.n	80041b6 <HAL_RCC_OscConfig+0x32a>
 80041b4:	e0b2      	b.n	800431c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1c2      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	40021000 	.word	0x40021000
 80041c0:	fffeffff 	.word	0xfffeffff
 80041c4:	fffbffff 	.word	0xfffbffff
 80041c8:	ffff80ff 	.word	0xffff80ff
 80041cc:	ffffc7ff 	.word	0xffffc7ff
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	20000014 	.word	0x20000014
 80041d8:	20000018 	.word	0x20000018
 80041dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041e0:	4bb5      	ldr	r3, [pc, #724]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80041e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	055b      	lsls	r3, r3, #21
 80041e8:	4013      	ands	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_OscConfig+0x364>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x366>
 80041f0:	2300      	movs	r3, #0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4bb0      	ldr	r3, [pc, #704]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80041f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041fa:	4baf      	ldr	r3, [pc, #700]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	0549      	lsls	r1, r1, #21
 8004200:	430a      	orrs	r2, r1
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c
 8004204:	4bac      	ldr	r3, [pc, #688]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	055b      	lsls	r3, r3, #21
 800420c:	4013      	ands	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004212:	231f      	movs	r3, #31
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421a:	4ba8      	ldr	r3, [pc, #672]	; (80044bc <HAL_RCC_OscConfig+0x630>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4013      	ands	r3, r2
 8004224:	d11a      	bne.n	800425c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004226:	4ba5      	ldr	r3, [pc, #660]	; (80044bc <HAL_RCC_OscConfig+0x630>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4ba4      	ldr	r3, [pc, #656]	; (80044bc <HAL_RCC_OscConfig+0x630>)
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	0049      	lsls	r1, r1, #1
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004234:	f7fe fd38 	bl	8002ca8 <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fe fd33 	bl	8002ca8 <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e177      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	4b9a      	ldr	r3, [pc, #616]	; (80044bc <HAL_RCC_OscConfig+0x630>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4013      	ands	r3, r2
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x3e6>
 8004264:	4b94      	ldr	r3, [pc, #592]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004266:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004268:	4b93      	ldr	r3, [pc, #588]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800426a:	2101      	movs	r1, #1
 800426c:	430a      	orrs	r2, r1
 800426e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004270:	e01c      	b.n	80042ac <HAL_RCC_OscConfig+0x420>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b05      	cmp	r3, #5
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x408>
 800427a:	4b8f      	ldr	r3, [pc, #572]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800427c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800427e:	4b8e      	ldr	r3, [pc, #568]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004280:	2104      	movs	r1, #4
 8004282:	430a      	orrs	r2, r1
 8004284:	65da      	str	r2, [r3, #92]	; 0x5c
 8004286:	4b8c      	ldr	r3, [pc, #560]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004288:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800428a:	4b8b      	ldr	r3, [pc, #556]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800428c:	2101      	movs	r1, #1
 800428e:	430a      	orrs	r2, r1
 8004290:	65da      	str	r2, [r3, #92]	; 0x5c
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0x420>
 8004294:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004298:	4b87      	ldr	r3, [pc, #540]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800429a:	2101      	movs	r1, #1
 800429c:	438a      	bics	r2, r1
 800429e:	65da      	str	r2, [r3, #92]	; 0x5c
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80042a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042a4:	4b84      	ldr	r3, [pc, #528]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80042a6:	2104      	movs	r1, #4
 80042a8:	438a      	bics	r2, r1
 80042aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d014      	beq.n	80042de <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fe fcf8 	bl	8002ca8 <HAL_GetTick>
 80042b8:	0003      	movs	r3, r0
 80042ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	e009      	b.n	80042d2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe fcf3 	bl	8002ca8 <HAL_GetTick>
 80042c2:	0002      	movs	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	4a7d      	ldr	r2, [pc, #500]	; (80044c0 <HAL_RCC_OscConfig+0x634>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e136      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d2:	4b79      	ldr	r3, [pc, #484]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	2202      	movs	r2, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x432>
 80042dc:	e013      	b.n	8004306 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fe fce3 	bl	8002ca8 <HAL_GetTick>
 80042e2:	0003      	movs	r3, r0
 80042e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e6:	e009      	b.n	80042fc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e8:	f7fe fcde 	bl	8002ca8 <HAL_GetTick>
 80042ec:	0002      	movs	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	4a73      	ldr	r2, [pc, #460]	; (80044c0 <HAL_RCC_OscConfig+0x634>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e121      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042fc:	4b6e      	ldr	r3, [pc, #440]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	2202      	movs	r2, #2
 8004302:	4013      	ands	r3, r2
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004306:	231f      	movs	r3, #31
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004310:	4b69      	ldr	r3, [pc, #420]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004314:	4b68      	ldr	r3, [pc, #416]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004316:	496b      	ldr	r1, [pc, #428]	; (80044c4 <HAL_RCC_OscConfig+0x638>)
 8004318:	400a      	ands	r2, r1
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2220      	movs	r2, #32
 8004322:	4013      	ands	r3, r2
 8004324:	d039      	beq.n	800439a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01b      	beq.n	8004366 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800432e:	4b62      	ldr	r3, [pc, #392]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	03c9      	lsls	r1, r1, #15
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fe fcb4 	bl	8002ca8 <HAL_GetTick>
 8004340:	0003      	movs	r3, r0
 8004342:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004346:	f7fe fcaf 	bl	8002ca8 <HAL_GetTick>
 800434a:	0002      	movs	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0f3      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004358:	4b57      	ldr	r3, [pc, #348]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	4013      	ands	r3, r2
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x4ba>
 8004364:	e019      	b.n	800439a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004366:	4b54      	ldr	r3, [pc, #336]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800436c:	4956      	ldr	r1, [pc, #344]	; (80044c8 <HAL_RCC_OscConfig+0x63c>)
 800436e:	400a      	ands	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fe fc99 	bl	8002ca8 <HAL_GetTick>
 8004376:	0003      	movs	r3, r0
 8004378:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800437c:	f7fe fc94 	bl	8002ca8 <HAL_GetTick>
 8004380:	0002      	movs	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0d8      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800438e:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	4013      	ands	r3, r2
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d100      	bne.n	80043a4 <HAL_RCC_OscConfig+0x518>
 80043a2:	e0cc      	b.n	800453e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043a4:	4b44      	ldr	r3, [pc, #272]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2238      	movs	r2, #56	; 0x38
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d100      	bne.n	80043b2 <HAL_RCC_OscConfig+0x526>
 80043b0:	e07b      	b.n	80044aa <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d156      	bne.n	8004468 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b3e      	ldr	r3, [pc, #248]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80043c0:	4942      	ldr	r1, [pc, #264]	; (80044cc <HAL_RCC_OscConfig+0x640>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fe fc6f 	bl	8002ca8 <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fe fc6a 	bl	8002ca8 <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0ae      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e2:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	049b      	lsls	r3, r3, #18
 80043ea:	4013      	ands	r3, r2
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ee:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4a37      	ldr	r2, [pc, #220]	; (80044d0 <HAL_RCC_OscConfig+0x644>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	431a      	orrs	r2, r3
 800441c:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800441e:	430a      	orrs	r2, r1
 8004420:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004422:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004428:	2180      	movs	r1, #128	; 0x80
 800442a:	0449      	lsls	r1, r1, #17
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004430:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004436:	2180      	movs	r1, #128	; 0x80
 8004438:	0549      	lsls	r1, r1, #21
 800443a:	430a      	orrs	r2, r1
 800443c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fe fc33 	bl	8002ca8 <HAL_GetTick>
 8004442:	0003      	movs	r3, r0
 8004444:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fe fc2e 	bl	8002ca8 <HAL_GetTick>
 800444c:	0002      	movs	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e072      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	049b      	lsls	r3, r3, #18
 8004462:	4013      	ands	r3, r2
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x5bc>
 8004466:	e06a      	b.n	800453e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800446e:	4917      	ldr	r1, [pc, #92]	; (80044cc <HAL_RCC_OscConfig+0x640>)
 8004470:	400a      	ands	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fe fc18 	bl	8002ca8 <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447e:	f7fe fc13 	bl	8002ca8 <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e057      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	049b      	lsls	r3, r3, #18
 8004498:	4013      	ands	r3, r2
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_OscConfig+0x62c>)
 80044a2:	490c      	ldr	r1, [pc, #48]	; (80044d4 <HAL_RCC_OscConfig+0x648>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	e049      	b.n	800453e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d112      	bne.n	80044d8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e044      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40007000 	.word	0x40007000
 80044c0:	00001388 	.word	0x00001388
 80044c4:	efffffff 	.word	0xefffffff
 80044c8:	ffbfffff 	.word	0xffbfffff
 80044cc:	feffffff 	.word	0xfeffffff
 80044d0:	11c1808c 	.word	0x11c1808c
 80044d4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x6bc>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2203      	movs	r2, #3
 80044e2:	401a      	ands	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d126      	bne.n	800453a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2270      	movs	r2, #112	; 0x70
 80044f0:	401a      	ands	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d11f      	bne.n	800453a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	23fe      	movs	r3, #254	; 0xfe
 80044fe:	01db      	lsls	r3, r3, #7
 8004500:	401a      	ands	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d116      	bne.n	800453a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	23f8      	movs	r3, #248	; 0xf8
 8004510:	039b      	lsls	r3, r3, #14
 8004512:	401a      	ands	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d10e      	bne.n	800453a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	23e0      	movs	r3, #224	; 0xe0
 8004520:	051b      	lsls	r3, r3, #20
 8004522:	401a      	ands	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d106      	bne.n	800453a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	0f5b      	lsrs	r3, r3, #29
 8004530:	075a      	lsls	r2, r3, #29
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	b008      	add	sp, #32
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0e9      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004560:	4b76      	ldr	r3, [pc, #472]	; (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2207      	movs	r2, #7
 8004566:	4013      	ands	r3, r2
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d91e      	bls.n	80045ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b73      	ldr	r3, [pc, #460]	; (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2207      	movs	r2, #7
 8004574:	4393      	bics	r3, r2
 8004576:	0019      	movs	r1, r3
 8004578:	4b70      	ldr	r3, [pc, #448]	; (800473c <HAL_RCC_ClockConfig+0x1f0>)
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004580:	f7fe fb92 	bl	8002ca8 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004588:	e009      	b.n	800459e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458a:	f7fe fb8d 	bl	8002ca8 <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	4a6a      	ldr	r2, [pc, #424]	; (8004740 <HAL_RCC_ClockConfig+0x1f4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0ca      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800459e:	4b67      	ldr	r3, [pc, #412]	; (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2207      	movs	r2, #7
 80045a4:	4013      	ands	r3, r2
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d1ee      	bne.n	800458a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2202      	movs	r2, #2
 80045b2:	4013      	ands	r3, r2
 80045b4:	d015      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2204      	movs	r2, #4
 80045bc:	4013      	ands	r3, r2
 80045be:	d006      	beq.n	80045ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045c0:	4b60      	ldr	r3, [pc, #384]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	4b5f      	ldr	r3, [pc, #380]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 80045c6:	21e0      	movs	r1, #224	; 0xe0
 80045c8:	01c9      	lsls	r1, r1, #7
 80045ca:	430a      	orrs	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ce:	4b5d      	ldr	r3, [pc, #372]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4a5d      	ldr	r2, [pc, #372]	; (8004748 <HAL_RCC_ClockConfig+0x1fc>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2201      	movs	r2, #1
 80045e8:	4013      	ands	r3, r2
 80045ea:	d057      	beq.n	800469c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f4:	4b53      	ldr	r3, [pc, #332]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	029b      	lsls	r3, r3, #10
 80045fc:	4013      	ands	r3, r2
 80045fe:	d12b      	bne.n	8004658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e097      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d107      	bne.n	800461c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460c:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	049b      	lsls	r3, r3, #18
 8004614:	4013      	ands	r3, r2
 8004616:	d11f      	bne.n	8004658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e08b      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004624:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4013      	ands	r3, r2
 800462e:	d113      	bne.n	8004658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e07f      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d106      	bne.n	800464a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463c:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 800463e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004640:	2202      	movs	r2, #2
 8004642:	4013      	ands	r3, r2
 8004644:	d108      	bne.n	8004658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e074      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	4b3e      	ldr	r3, [pc, #248]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 800464c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464e:	2202      	movs	r2, #2
 8004650:	4013      	ands	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e06d      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004658:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2207      	movs	r2, #7
 800465e:	4393      	bics	r3, r2
 8004660:	0019      	movs	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 8004668:	430a      	orrs	r2, r1
 800466a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466c:	f7fe fb1c 	bl	8002ca8 <HAL_GetTick>
 8004670:	0003      	movs	r3, r0
 8004672:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004674:	e009      	b.n	800468a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004676:	f7fe fb17 	bl	8002ca8 <HAL_GetTick>
 800467a:	0002      	movs	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	4a2f      	ldr	r2, [pc, #188]	; (8004740 <HAL_RCC_ClockConfig+0x1f4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e054      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2238      	movs	r2, #56	; 0x38
 8004690:	401a      	ands	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	429a      	cmp	r2, r3
 800469a:	d1ec      	bne.n	8004676 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800469c:	4b27      	ldr	r3, [pc, #156]	; (800473c <HAL_RCC_ClockConfig+0x1f0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2207      	movs	r2, #7
 80046a2:	4013      	ands	r3, r2
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d21e      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2207      	movs	r2, #7
 80046b0:	4393      	bics	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046bc:	f7fe faf4 	bl	8002ca8 <HAL_GetTick>
 80046c0:	0003      	movs	r3, r0
 80046c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046c4:	e009      	b.n	80046da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c6:	f7fe faef 	bl	8002ca8 <HAL_GetTick>
 80046ca:	0002      	movs	r2, r0
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_RCC_ClockConfig+0x1f4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e02c      	b.n	8004734 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046da:	4b18      	ldr	r3, [pc, #96]	; (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2207      	movs	r2, #7
 80046e0:	4013      	ands	r3, r2
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d1ee      	bne.n	80046c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2204      	movs	r2, #4
 80046ee:	4013      	ands	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046f2:	4b14      	ldr	r3, [pc, #80]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <HAL_RCC_ClockConfig+0x200>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	0019      	movs	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 8004702:	430a      	orrs	r2, r1
 8004704:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004706:	f000 f829 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800470a:	0001      	movs	r1, r0
 800470c:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	220f      	movs	r2, #15
 8004714:	401a      	ands	r2, r3
 8004716:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <HAL_RCC_ClockConfig+0x204>)
 8004718:	0092      	lsls	r2, r2, #2
 800471a:	58d3      	ldr	r3, [r2, r3]
 800471c:	221f      	movs	r2, #31
 800471e:	4013      	ands	r3, r2
 8004720:	000a      	movs	r2, r1
 8004722:	40da      	lsrs	r2, r3
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_ClockConfig+0x208>)
 8004726:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_ClockConfig+0x20c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	0018      	movs	r0, r3
 800472e:	f7fe fa5f 	bl	8002bf0 <HAL_InitTick>
 8004732:	0003      	movs	r3, r0
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40022000 	.word	0x40022000
 8004740:	00001388 	.word	0x00001388
 8004744:	40021000 	.word	0x40021000
 8004748:	fffff0ff 	.word	0xfffff0ff
 800474c:	ffff8fff 	.word	0xffff8fff
 8004750:	08004eb8 	.word	0x08004eb8
 8004754:	20000014 	.word	0x20000014
 8004758:	20000018 	.word	0x20000018

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2238      	movs	r2, #56	; 0x38
 8004768:	4013      	ands	r3, r2
 800476a:	d10f      	bne.n	800478c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800476c:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	0adb      	lsrs	r3, r3, #11
 8004772:	2207      	movs	r2, #7
 8004774:	4013      	ands	r3, r2
 8004776:	2201      	movs	r2, #1
 8004778:	409a      	lsls	r2, r3
 800477a:	0013      	movs	r3, r2
 800477c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	4835      	ldr	r0, [pc, #212]	; (8004858 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004782:	f7fb fcbf 	bl	8000104 <__udivsi3>
 8004786:	0003      	movs	r3, r0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	e05d      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800478c:	4b31      	ldr	r3, [pc, #196]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2238      	movs	r2, #56	; 0x38
 8004792:	4013      	ands	r3, r2
 8004794:	2b08      	cmp	r3, #8
 8004796:	d102      	bne.n	800479e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004798:	4b30      	ldr	r3, [pc, #192]	; (800485c <HAL_RCC_GetSysClockFreq+0x100>)
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e054      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800479e:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2238      	movs	r2, #56	; 0x38
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d138      	bne.n	800481c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047aa:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2203      	movs	r2, #3
 80047b0:	4013      	ands	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b4:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	2207      	movs	r2, #7
 80047bc:	4013      	ands	r3, r2
 80047be:	3301      	adds	r3, #1
 80047c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4824      	ldr	r0, [pc, #144]	; (800485c <HAL_RCC_GetSysClockFreq+0x100>)
 80047cc:	f7fb fc9a 	bl	8000104 <__udivsi3>
 80047d0:	0003      	movs	r3, r0
 80047d2:	0019      	movs	r1, r3
 80047d4:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	227f      	movs	r2, #127	; 0x7f
 80047dc:	4013      	ands	r3, r2
 80047de:	434b      	muls	r3, r1
 80047e0:	617b      	str	r3, [r7, #20]
        break;
 80047e2:	e00d      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	481c      	ldr	r0, [pc, #112]	; (8004858 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047e8:	f7fb fc8c 	bl	8000104 <__udivsi3>
 80047ec:	0003      	movs	r3, r0
 80047ee:	0019      	movs	r1, r3
 80047f0:	4b18      	ldr	r3, [pc, #96]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	227f      	movs	r2, #127	; 0x7f
 80047f8:	4013      	ands	r3, r2
 80047fa:	434b      	muls	r3, r1
 80047fc:	617b      	str	r3, [r7, #20]
        break;
 80047fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004800:	4b14      	ldr	r3, [pc, #80]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0f5b      	lsrs	r3, r3, #29
 8004806:	2207      	movs	r2, #7
 8004808:	4013      	ands	r3, r2
 800480a:	3301      	adds	r3, #1
 800480c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	6978      	ldr	r0, [r7, #20]
 8004812:	f7fb fc77 	bl	8000104 <__udivsi3>
 8004816:	0003      	movs	r3, r0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	e015      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2238      	movs	r2, #56	; 0x38
 8004822:	4013      	ands	r3, r2
 8004824:	2b20      	cmp	r3, #32
 8004826:	d103      	bne.n	8004830 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e00b      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2238      	movs	r2, #56	; 0x38
 8004836:	4013      	ands	r3, r2
 8004838:	2b18      	cmp	r3, #24
 800483a:	d103      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800483c:	23fa      	movs	r3, #250	; 0xfa
 800483e:	01db      	lsls	r3, r3, #7
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	e001      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004848:	693b      	ldr	r3, [r7, #16]
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b006      	add	sp, #24
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	40021000 	.word	0x40021000
 8004858:	00f42400 	.word	0x00f42400
 800485c:	007a1200 	.word	0x007a1200

08004860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004868:	2313      	movs	r3, #19
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004870:	2312      	movs	r3, #18
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	4013      	ands	r3, r2
 8004882:	d100      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004884:	e0ad      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004886:	2011      	movs	r0, #17
 8004888:	183b      	adds	r3, r7, r0
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488e:	4b47      	ldr	r3, [pc, #284]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	055b      	lsls	r3, r3, #21
 8004896:	4013      	ands	r3, r2
 8004898:	d110      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	4b44      	ldr	r3, [pc, #272]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800489c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800489e:	4b43      	ldr	r3, [pc, #268]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048a0:	2180      	movs	r1, #128	; 0x80
 80048a2:	0549      	lsls	r1, r1, #21
 80048a4:	430a      	orrs	r2, r1
 80048a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80048a8:	4b40      	ldr	r3, [pc, #256]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	055b      	lsls	r3, r3, #21
 80048b0:	4013      	ands	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b6:	183b      	adds	r3, r7, r0
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048bc:	4b3c      	ldr	r3, [pc, #240]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	0049      	lsls	r1, r1, #1
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ca:	f7fe f9ed 	bl	8002ca8 <HAL_GetTick>
 80048ce:	0003      	movs	r3, r0
 80048d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048d2:	e00b      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d4:	f7fe f9e8 	bl	8002ca8 <HAL_GetTick>
 80048d8:	0002      	movs	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d904      	bls.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80048e2:	2313      	movs	r3, #19
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	2203      	movs	r2, #3
 80048e8:	701a      	strb	r2, [r3, #0]
        break;
 80048ea:	e005      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ec:	4b30      	ldr	r3, [pc, #192]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	d0ed      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80048f8:	2313      	movs	r3, #19
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d15e      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004902:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004906:	23c0      	movs	r3, #192	; 0xc0
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4013      	ands	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d019      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	429a      	cmp	r2, r3
 800491c:	d014      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004924:	4013      	ands	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004928:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800492a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800492c:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800492e:	2180      	movs	r1, #128	; 0x80
 8004930:	0249      	lsls	r1, r1, #9
 8004932:	430a      	orrs	r2, r1
 8004934:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004936:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004938:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800493a:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800493c:	491e      	ldr	r1, [pc, #120]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800493e:	400a      	ands	r2, r1
 8004940:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004942:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2201      	movs	r2, #1
 800494c:	4013      	ands	r3, r2
 800494e:	d016      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fe f9aa 	bl	8002ca8 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004958:	e00c      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495a:	f7fe f9a5 	bl	8002ca8 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d904      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800496a:	2313      	movs	r3, #19
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	2203      	movs	r2, #3
 8004970:	701a      	strb	r2, [r3, #0]
            break;
 8004972:	e004      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	2202      	movs	r2, #2
 800497a:	4013      	ands	r3, r2
 800497c:	d0ed      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800497e:	2313      	movs	r3, #19
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800498a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498c:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800498e:	4013      	ands	r3, r2
 8004990:	0019      	movs	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004998:	430a      	orrs	r2, r1
 800499a:	65da      	str	r2, [r3, #92]	; 0x5c
 800499c:	e016      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800499e:	2312      	movs	r3, #18
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2213      	movs	r2, #19
 80049a4:	18ba      	adds	r2, r7, r2
 80049a6:	7812      	ldrb	r2, [r2, #0]
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e00f      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
 80049b4:	fffffcff 	.word	0xfffffcff
 80049b8:	fffeffff 	.word	0xfffeffff
 80049bc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	2312      	movs	r3, #18
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	2213      	movs	r2, #19
 80049c6:	18ba      	adds	r2, r7, r2
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049cc:	2311      	movs	r3, #17
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d105      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d6:	4bb6      	ldr	r3, [pc, #728]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049da:	4bb5      	ldr	r3, [pc, #724]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049dc:	49b5      	ldr	r1, [pc, #724]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80049de:	400a      	ands	r2, r1
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2201      	movs	r2, #1
 80049e8:	4013      	ands	r3, r2
 80049ea:	d009      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ec:	4bb0      	ldr	r3, [pc, #704]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	2203      	movs	r2, #3
 80049f2:	4393      	bics	r3, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	4bad      	ldr	r3, [pc, #692]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049fc:	430a      	orrs	r2, r1
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2202      	movs	r2, #2
 8004a06:	4013      	ands	r3, r2
 8004a08:	d009      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a0a:	4ba9      	ldr	r3, [pc, #676]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	220c      	movs	r2, #12
 8004a10:	4393      	bics	r3, r2
 8004a12:	0019      	movs	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	4ba5      	ldr	r3, [pc, #660]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2204      	movs	r2, #4
 8004a24:	4013      	ands	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a28:	4ba1      	ldr	r3, [pc, #644]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	2230      	movs	r2, #48	; 0x30
 8004a2e:	4393      	bics	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	4b9e      	ldr	r3, [pc, #632]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2210      	movs	r2, #16
 8004a42:	4013      	ands	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a46:	4b9a      	ldr	r3, [pc, #616]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	4a9b      	ldr	r2, [pc, #620]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	4b96      	ldr	r3, [pc, #600]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a56:	430a      	orrs	r2, r1
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	015b      	lsls	r3, r3, #5
 8004a62:	4013      	ands	r3, r2
 8004a64:	d009      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004a66:	4b92      	ldr	r3, [pc, #584]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	4a94      	ldr	r2, [pc, #592]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	4b8e      	ldr	r3, [pc, #568]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a76:	430a      	orrs	r2, r1
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4013      	ands	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a86:	4b8a      	ldr	r3, [pc, #552]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	4a8d      	ldr	r2, [pc, #564]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	0019      	movs	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a94:	4b86      	ldr	r3, [pc, #536]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a96:	430a      	orrs	r2, r1
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d009      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aa6:	4b82      	ldr	r3, [pc, #520]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	4a86      	ldr	r2, [pc, #536]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	0019      	movs	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4b7e      	ldr	r3, [pc, #504]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac4:	4b7a      	ldr	r3, [pc, #488]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	4a7f      	ldr	r2, [pc, #508]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	4b77      	ldr	r3, [pc, #476]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2240      	movs	r2, #64	; 0x40
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ae2:	4b73      	ldr	r3, [pc, #460]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	4a79      	ldr	r2, [pc, #484]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	4b6f      	ldr	r3, [pc, #444]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af2:	430a      	orrs	r2, r1
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	01db      	lsls	r3, r3, #7
 8004afe:	4013      	ands	r3, r2
 8004b00:	d015      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b02:	4b6b      	ldr	r3, [pc, #428]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	0899      	lsrs	r1, r3, #2
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0e:	4b68      	ldr	r3, [pc, #416]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b10:	430a      	orrs	r2, r1
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	05db      	lsls	r3, r3, #23
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b20:	4b63      	ldr	r3, [pc, #396]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	4b62      	ldr	r3, [pc, #392]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	0249      	lsls	r1, r1, #9
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	031b      	lsls	r3, r3, #12
 8004b36:	4013      	ands	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b3a:	4b5d      	ldr	r3, [pc, #372]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	2240      	movs	r2, #64	; 0x40
 8004b40:	4393      	bics	r3, r2
 8004b42:	0019      	movs	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b48:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	2380      	movs	r3, #128	; 0x80
 8004b54:	039b      	lsls	r3, r3, #14
 8004b56:	4013      	ands	r3, r2
 8004b58:	d016      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b5a:	4b55      	ldr	r3, [pc, #340]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	4a5c      	ldr	r2, [pc, #368]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b68:	4b51      	ldr	r3, [pc, #324]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	03db      	lsls	r3, r3, #15
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d106      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b7a:	4b4d      	ldr	r3, [pc, #308]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	4b4c      	ldr	r3, [pc, #304]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	0449      	lsls	r1, r1, #17
 8004b84:	430a      	orrs	r2, r1
 8004b86:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	03db      	lsls	r3, r3, #15
 8004b90:	4013      	ands	r3, r2
 8004b92:	d016      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b94:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	4a4e      	ldr	r2, [pc, #312]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ba2:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	045b      	lsls	r3, r3, #17
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	0449      	lsls	r1, r1, #17
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d014      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004bce:	4b38      	ldr	r3, [pc, #224]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	4393      	bics	r3, r2
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	4b34      	ldr	r3, [pc, #208]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bf0:	2180      	movs	r1, #128	; 0x80
 8004bf2:	0249      	lsls	r1, r1, #9
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	019b      	lsls	r3, r3, #6
 8004c00:	4013      	ands	r3, r2
 8004c02:	d014      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c08:	220c      	movs	r2, #12
 8004c0a:	4393      	bics	r3, r2
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c12:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c14:	430a      	orrs	r2, r1
 8004c16:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c20:	4b23      	ldr	r3, [pc, #140]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	0249      	lsls	r1, r1, #9
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	045b      	lsls	r3, r3, #17
 8004c36:	4013      	ands	r3, r2
 8004c38:	d016      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	4a22      	ldr	r2, [pc, #136]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	0019      	movs	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	019b      	lsls	r3, r3, #6
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d106      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c60:	2180      	movs	r1, #128	; 0x80
 8004c62:	0449      	lsls	r1, r1, #17
 8004c64:	430a      	orrs	r2, r1
 8004c66:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	049b      	lsls	r3, r3, #18
 8004c70:	4013      	ands	r3, r2
 8004c72:	d016      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	4a10      	ldr	r2, [pc, #64]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c84:	430a      	orrs	r2, r1
 8004c86:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c9a:	2180      	movs	r1, #128	; 0x80
 8004c9c:	0449      	lsls	r1, r1, #17
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004ca2:	2312      	movs	r3, #18
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	781b      	ldrb	r3, [r3, #0]
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b006      	add	sp, #24
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	efffffff 	.word	0xefffffff
 8004cb8:	fffff3ff 	.word	0xfffff3ff
 8004cbc:	fffffcff 	.word	0xfffffcff
 8004cc0:	fff3ffff 	.word	0xfff3ffff
 8004cc4:	ffcfffff 	.word	0xffcfffff
 8004cc8:	ffffcfff 	.word	0xffffcfff
 8004ccc:	ffff3fff 	.word	0xffff3fff
 8004cd0:	ffbfffff 	.word	0xffbfffff
 8004cd4:	feffffff 	.word	0xfeffffff

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	2600      	movs	r6, #0
 8004cdc:	4d0c      	ldr	r5, [pc, #48]	; (8004d10 <__libc_init_array+0x38>)
 8004cde:	4c0d      	ldr	r4, [pc, #52]	; (8004d14 <__libc_init_array+0x3c>)
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	2600      	movs	r6, #0
 8004cea:	f000 f879 	bl	8004de0 <_init>
 8004cee:	4d0a      	ldr	r5, [pc, #40]	; (8004d18 <__libc_init_array+0x40>)
 8004cf0:	4c0a      	ldr	r4, [pc, #40]	; (8004d1c <__libc_init_array+0x44>)
 8004cf2:	1b64      	subs	r4, r4, r5
 8004cf4:	10a4      	asrs	r4, r4, #2
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	00b3      	lsls	r3, r6, #2
 8004cfe:	58eb      	ldr	r3, [r5, r3]
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	00b3      	lsls	r3, r6, #2
 8004d08:	58eb      	ldr	r3, [r5, r3]
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	08004f08 	.word	0x08004f08
 8004d14:	08004f08 	.word	0x08004f08
 8004d18:	08004f08 	.word	0x08004f08
 8004d1c:	08004f0c 	.word	0x08004f0c

08004d20 <memcpy>:
 8004d20:	2300      	movs	r3, #0
 8004d22:	b510      	push	{r4, lr}
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d100      	bne.n	8004d2a <memcpy+0xa>
 8004d28:	bd10      	pop	{r4, pc}
 8004d2a:	5ccc      	ldrb	r4, [r1, r3]
 8004d2c:	54c4      	strb	r4, [r0, r3]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	e7f8      	b.n	8004d24 <memcpy+0x4>

08004d32 <memset>:
 8004d32:	0003      	movs	r3, r0
 8004d34:	1882      	adds	r2, r0, r2
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d100      	bne.n	8004d3c <memset+0xa>
 8004d3a:	4770      	bx	lr
 8004d3c:	7019      	strb	r1, [r3, #0]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	e7f9      	b.n	8004d36 <memset+0x4>
	...

08004d44 <round>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	000d      	movs	r5, r1
 8004d48:	0006      	movs	r6, r0
 8004d4a:	0001      	movs	r1, r0
 8004d4c:	006a      	lsls	r2, r5, #1
 8004d4e:	4820      	ldr	r0, [pc, #128]	; (8004dd0 <round+0x8c>)
 8004d50:	0d52      	lsrs	r2, r2, #21
 8004d52:	1810      	adds	r0, r2, r0
 8004d54:	2813      	cmp	r0, #19
 8004d56:	dc18      	bgt.n	8004d8a <round+0x46>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	da09      	bge.n	8004d70 <round+0x2c>
 8004d5c:	0feb      	lsrs	r3, r5, #31
 8004d5e:	2200      	movs	r2, #0
 8004d60:	07db      	lsls	r3, r3, #31
 8004d62:	1c41      	adds	r1, r0, #1
 8004d64:	d101      	bne.n	8004d6a <round+0x26>
 8004d66:	491b      	ldr	r1, [pc, #108]	; (8004dd4 <round+0x90>)
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	0010      	movs	r0, r2
 8004d6e:	e018      	b.n	8004da2 <round+0x5e>
 8004d70:	4c19      	ldr	r4, [pc, #100]	; (8004dd8 <round+0x94>)
 8004d72:	4104      	asrs	r4, r0
 8004d74:	0022      	movs	r2, r4
 8004d76:	402a      	ands	r2, r5
 8004d78:	4311      	orrs	r1, r2
 8004d7a:	d014      	beq.n	8004da6 <round+0x62>
 8004d7c:	2280      	movs	r2, #128	; 0x80
 8004d7e:	0312      	lsls	r2, r2, #12
 8004d80:	4102      	asrs	r2, r0
 8004d82:	1953      	adds	r3, r2, r5
 8004d84:	43a3      	bics	r3, r4
 8004d86:	2200      	movs	r2, #0
 8004d88:	e7ef      	b.n	8004d6a <round+0x26>
 8004d8a:	2833      	cmp	r0, #51	; 0x33
 8004d8c:	dd0e      	ble.n	8004dac <round+0x68>
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4298      	cmp	r0, r3
 8004d94:	d107      	bne.n	8004da6 <round+0x62>
 8004d96:	0032      	movs	r2, r6
 8004d98:	002b      	movs	r3, r5
 8004d9a:	0030      	movs	r0, r6
 8004d9c:	0029      	movs	r1, r5
 8004d9e:	f7fc f86b 	bl	8000e78 <__aeabi_dadd>
 8004da2:	0006      	movs	r6, r0
 8004da4:	000d      	movs	r5, r1
 8004da6:	0030      	movs	r0, r6
 8004da8:	0029      	movs	r1, r5
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	4c0b      	ldr	r4, [pc, #44]	; (8004ddc <round+0x98>)
 8004dae:	1912      	adds	r2, r2, r4
 8004db0:	2401      	movs	r4, #1
 8004db2:	4264      	negs	r4, r4
 8004db4:	40d4      	lsrs	r4, r2
 8004db6:	4234      	tst	r4, r6
 8004db8:	d0f5      	beq.n	8004da6 <round+0x62>
 8004dba:	2233      	movs	r2, #51	; 0x33
 8004dbc:	1a10      	subs	r0, r2, r0
 8004dbe:	3a32      	subs	r2, #50	; 0x32
 8004dc0:	4082      	lsls	r2, r0
 8004dc2:	1992      	adds	r2, r2, r6
 8004dc4:	42b2      	cmp	r2, r6
 8004dc6:	4189      	sbcs	r1, r1
 8004dc8:	4249      	negs	r1, r1
 8004dca:	186b      	adds	r3, r5, r1
 8004dcc:	43a2      	bics	r2, r4
 8004dce:	e7cc      	b.n	8004d6a <round+0x26>
 8004dd0:	fffffc01 	.word	0xfffffc01
 8004dd4:	3ff00000 	.word	0x3ff00000
 8004dd8:	000fffff 	.word	0x000fffff
 8004ddc:	fffffbed 	.word	0xfffffbed

08004de0 <_init>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr

08004dec <_fini>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr
